ERROR 23:06:00,591 - Nema dovoljno argumenata! ( Ocekivani ulaz: <ulaz>.mj <izlaz>.obj )
INFO  23:06:21,587 - Kompajliranje ulaznog fajla C:\Users\Anja\Desktop\PP1 projekat\workspace\MJCompiler\test\program.mj
INFO  23:06:21,657 - #2 program
INFO  23:06:21,658 - #20 MJProgram
INFO  23:06:21,658 - #20 abc
INFO  23:06:21,659 - #20 a
INFO  23:06:21,659 - #40 ;
INFO  23:06:21,660 - #7 const
INFO  23:06:21,660 - #20 int
INFO  23:06:21,660 - #20 cnst
INFO  23:06:21,660 - #37 =
INFO  23:06:21,660 - #21 1
INFO  23:06:21,660 - #40 ;
INFO  23:06:21,661 - #47 {
INFO  23:06:21,662 - #20 int
INFO  23:06:21,662 - #20 fun
INFO  23:06:21,662 - #43 (
INFO  23:06:21,662 - #20 int
INFO  23:06:21,662 - #20 x
INFO  23:06:21,662 - #44 )
INFO  23:06:21,663 - #47 {
INFO  23:06:21,663 - #48 }
INFO  23:06:21,663 - #16 void
INFO  23:06:21,664 - #20 main
INFO  23:06:21,664 - #43 (
INFO  23:06:21,664 - #44 )
INFO  23:06:21,664 - #20 int
INFO  23:06:21,664 - #20 b
INFO  23:06:21,664 - #40 ;
INFO  23:06:21,665 - #20 char
INFO  23:06:21,665 - #20 b
INFO  23:06:21,665 - #40 ;
INFO  23:06:21,665 - #20 int
INFO  23:06:21,666 - #20 num
INFO  23:06:21,666 - #40 ;
INFO  23:06:21,666 - #20 char
INFO  23:06:21,666 - #20 character
INFO  23:06:21,666 - #40 ;
INFO  23:06:21,666 - #20 bool
INFO  23:06:21,666 - #20 boolean
INFO  23:06:21,666 - #40 ;
INFO  23:06:21,666 - #20 int
INFO  23:06:21,667 - #20 niz
INFO  23:06:21,667 - #45 [
INFO  23:06:21,667 - #46 ]
INFO  23:06:21,667 - #41 ,
INFO  23:06:21,667 - #20 niz1
INFO  23:06:21,667 - #45 [
INFO  23:06:21,667 - #46 ]
INFO  23:06:21,667 - #40 ;
INFO  23:06:21,667 - #47 {
INFO  23:06:21,668 - #20 a
INFO  23:06:21,668 - #37 =
INFO  23:06:21,668 - #21 1
INFO  23:06:21,668 - #40 ;
INFO  23:06:21,669 - #20 num
INFO  23:06:21,669 - #37 =
INFO  23:06:21,669 - #22 a
INFO  23:06:21,669 - #40 ;
INFO  23:06:21,669 - #20 num
INFO  23:06:21,669 - #37 =
INFO  23:06:21,670 - #23 true
INFO  23:06:21,670 - #40 ;
INFO  23:06:21,670 - #20 character
INFO  23:06:21,670 - #37 =
INFO  23:06:21,670 - #21 1
INFO  23:06:21,670 - #40 ;
INFO  23:06:21,671 - #20 character
INFO  23:06:21,671 - #37 =
INFO  23:06:21,671 - #23 true
INFO  23:06:21,671 - #40 ;
INFO  23:06:21,671 - #20 boolean
INFO  23:06:21,671 - #37 =
INFO  23:06:21,671 - #21 1
INFO  23:06:21,672 - #40 ;
INFO  23:06:21,672 - #20 boolean
INFO  23:06:21,672 - #37 =
INFO  23:06:21,672 - #22 a
INFO  23:06:21,672 - #40 ;
INFO  23:06:21,672 - #20 cnst
INFO  23:06:21,672 - #37 =
INFO  23:06:21,673 - #21 2
INFO  23:06:21,673 - #40 ;
INFO  23:06:21,673 - #20 character
INFO  23:06:21,674 - #38 ++
INFO  23:06:21,674 - #40 ;
INFO  23:06:21,674 - #20 boolean
INFO  23:06:21,674 - #39 --
INFO  23:06:21,674 - #40 ;
INFO  23:06:21,675 - #20 fun
INFO  23:06:21,675 - #43 (
INFO  23:06:21,675 - #21 1
INFO  23:06:21,675 - #41 ,
INFO  23:06:21,675 - #21 2
INFO  23:06:21,676 - #44 )
INFO  23:06:21,676 - #40 ;
INFO  23:06:21,676 - #20 fun
INFO  23:06:21,676 - #43 (
INFO  23:06:21,676 - #23 true
INFO  23:06:21,676 - #44 )
INFO  23:06:21,676 - #40 ;
INFO  23:06:21,677 - #20 character
INFO  23:06:21,677 - #37 =
INFO  23:06:21,677 - #25 -
INFO  23:06:21,677 - #22 a
INFO  23:06:21,677 - #40 ;
INFO  23:06:21,677 - #20 niz
INFO  23:06:21,677 - #37 =
INFO  23:06:21,677 - #12 new
INFO  23:06:21,677 - #20 int
INFO  23:06:21,678 - #45 [
INFO  23:06:21,678 - #22 a
INFO  23:06:21,678 - #46 ]
INFO  23:06:21,678 - #40 ;
INFO  23:06:21,678 - #10 do
INFO  23:06:21,678 - #47 {
INFO  23:06:21,679 - #20 num
INFO  23:06:21,679 - #38 ++
INFO  23:06:21,679 - #40 ;
INFO  23:06:21,679 - #3 break
INFO  23:06:21,679 - #40 ;
INFO  23:06:21,680 - #18 continue
INFO  23:06:21,680 - #40 ;
INFO  23:06:21,680 - #48 }
INFO  23:06:21,681 - #11 while
INFO  23:06:21,681 - #43 (
INFO  23:06:21,681 - #20 num
INFO  23:06:21,681 - #33 <
INFO  23:06:21,681 - #21 10
INFO  23:06:21,682 - #44 )
INFO  23:06:21,683 - #40 ;
INFO  23:06:21,683 - #3 break
INFO  23:06:21,683 - #40 ;
INFO  23:06:21,683 - #18 continue
INFO  23:06:21,683 - #40 ;
INFO  23:06:21,683 - #8 if
INFO  23:06:21,684 - #43 (
INFO  23:06:21,684 - #20 niz
INFO  23:06:21,684 - #33 <
INFO  23:06:21,684 - #20 niz1
INFO  23:06:21,684 - #44 )
INFO  23:06:21,684 - #47 {
INFO  23:06:21,684 - #20 num
INFO  23:06:21,684 - #37 =
INFO  23:06:21,684 - #21 1
INFO  23:06:21,685 - #40 ;
INFO  23:06:21,685 - #48 }
INFO  23:06:21,685 - #8 if
INFO  23:06:21,685 - #43 (
INFO  23:06:21,685 - #20 num
INFO  23:06:21,685 - #44 )
INFO  23:06:21,686 - #47 {
INFO  23:06:21,686 - #20 num
INFO  23:06:21,686 - #37 =
INFO  23:06:21,686 - #21 2
INFO  23:06:21,686 - #40 ;
INFO  23:06:21,686 - #48 }
INFO  23:06:21,686 - #10 do
INFO  23:06:21,686 - #47 {
INFO  23:06:21,686 - #20 niz
INFO  23:06:21,686 - #45 [
INFO  23:06:21,686 - #23 true
INFO  23:06:21,687 - #46 ]
INFO  23:06:21,687 - #37 =
INFO  23:06:21,687 - #21 1
INFO  23:06:21,687 - #40 ;
INFO  23:06:21,687 - #48 }
INFO  23:06:21,687 - #11 while
INFO  23:06:21,687 - #43 (
INFO  23:06:21,687 - #20 num
INFO  23:06:21,687 - #44 )
INFO  23:06:21,687 - #40 ;
INFO  23:06:21,688 - #20 num
INFO  23:06:21,688 - #37 =
INFO  23:06:21,688 - #20 num
INFO  23:06:21,688 - #24 +
INFO  23:06:21,688 - #22 a
INFO  23:06:21,690 - #40 ;
INFO  23:06:21,690 - #20 num
INFO  23:06:21,690 - #37 =
INFO  23:06:21,690 - #20 num
INFO  23:06:21,691 - #26 *
INFO  23:06:21,691 - #22 a
INFO  23:06:21,692 - #40 ;
INFO  23:06:21,692 - #20 num
INFO  23:06:21,692 - #37 =
INFO  23:06:21,692 - #20 boolean
INFO  23:06:21,692 - #49 ?
INFO  23:06:21,692 - #21 1
INFO  23:06:21,692 - #50 :
INFO  23:06:21,693 - #22 a
INFO  23:06:21,693 - #40 ;
INFO  23:06:21,693 - #48 }
INFO  23:06:21,693 - #48 }
INFO  23:06:21,695 - 

================SINTAKSNO STABLO====================


INFO  23:06:21,701 - Program(
  ProgName(
   MJProgram
  ) [ProgName]
  ProgramDeclMulti(
    ProgramDeclMulti(
      ProgramDeclEps(
      ) [ProgramDeclEps]
      PartVarDeclaration(
        GlobalVarDeclaration(
          Type(
           abc
          ) [Type]
          GlobalVarSingle(
            GlobalVarNormal(
             a
            ) [GlobalVarNormal]
          ) [GlobalVarSingle]
        ) [GlobalVarDeclaration]
      ) [PartVarDeclaration]
    ) [ProgramDeclMulti]
    PartConstDeclaration(
      ConstDeclaration(
        Type(
         int
        ) [Type]
        ConstSingle(
          ConstPart(
           cnst
            NumConst(
             1
            ) [NumConst]
          ) [ConstPart]
        ) [ConstSingle]
      ) [ConstDeclaration]
    ) [PartConstDeclaration]
  ) [ProgramDeclMulti]
  MethodDecMulti(
    MethodDeclSingle(
      MethodTypeDeclaration(
        MethodType3(
          MethodTypeName(
            Type(
             int
            ) [Type]
           fun
          ) [MethodTypeName]
          ParamSingle(
            ParamNormal(
              Type(
               int
              ) [Type]
             x
            ) [ParamNormal]
          ) [ParamSingle]
        ) [MethodType3]
      ) [MethodTypeDeclaration]
    ) [MethodDeclSingle]
    MethodVoidDeclaration(
      MethodVoid4(
        MethodVoidName(
         main
        ) [MethodVoidName]
        VarDeclMulti(
          VarDeclMulti(
            VarDeclMulti(
              VarDeclMulti(
                VarDeclMulti(
                  VarDeclSingle(
                    VarDeclaration(
                      Type(
                       int
                      ) [Type]
                      VarSingle(
                        VarNormal(
                         b
                        ) [VarNormal]
                      ) [VarSingle]
                    ) [VarDeclaration]
                  ) [VarDeclSingle]
                  VarDeclaration(
                    Type(
                     char
                    ) [Type]
                    VarSingle(
                      VarNormal(
                       b
                      ) [VarNormal]
                    ) [VarSingle]
                  ) [VarDeclaration]
                ) [VarDeclMulti]
                VarDeclaration(
                  Type(
                   int
                  ) [Type]
                  VarSingle(
                    VarNormal(
                     num
                    ) [VarNormal]
                  ) [VarSingle]
                ) [VarDeclaration]
              ) [VarDeclMulti]
              VarDeclaration(
                Type(
                 char
                ) [Type]
                VarSingle(
                  VarNormal(
                   character
                  ) [VarNormal]
                ) [VarSingle]
              ) [VarDeclaration]
            ) [VarDeclMulti]
            VarDeclaration(
              Type(
               bool
              ) [Type]
              VarSingle(
                VarNormal(
                 boolean
                ) [VarNormal]
              ) [VarSingle]
            ) [VarDeclaration]
          ) [VarDeclMulti]
          VarDeclaration(
            Type(
             int
            ) [Type]
            VarMulti(
              VarSingle(
                VarArray(
                 niz
                ) [VarArray]
              ) [VarSingle]
              VarArray(
               niz1
              ) [VarArray]
            ) [VarMulti]
          ) [VarDeclaration]
        ) [VarDeclMulti]
        StatementMulti(
          StatementMulti(
            StatementMulti(
              StatementMulti(
                StatementMulti(
                  StatementMulti(
                    StatementMulti(
                      StatementMulti(
                        StatementMulti(
                          StatementMulti(
                            StatementMulti(
                              StatementMulti(
                                StatementMulti(
                                  StatementMulti(
                                    StatementMulti(
                                      StatementMulti(
                                        StatementMulti(
                                          StatementMulti(
                                            StatementMulti(
                                              StatementMulti(
                                                StatementMulti(
                                                  StatementMulti(
                                                    StatementSingle(
                                                      StmtDesign(
                                                        DesignatorAssignment(
                                                          DesignatorSimple(
                                                           a
                                                          ) [DesignatorSimple]
                                                          AssignmentExpr(
                                                            ExprOne(
                                                              ExprSingle(
                                                                TermSingle(
                                                                  FactorNumConst(
                                                                   1
                                                                  ) [FactorNumConst]
                                                                ) [TermSingle]
                                                              ) [ExprSingle]
                                                            ) [ExprOne]
                                                          ) [AssignmentExpr]
                                                        ) [DesignatorAssignment]
                                                      ) [StmtDesign]
                                                    ) [StatementSingle]
                                                    StmtDesign(
                                                      DesignatorAssignment(
                                                        DesignatorSimple(
                                                         num
                                                        ) [DesignatorSimple]
                                                        AssignmentExpr(
                                                          ExprOne(
                                                            ExprSingle(
                                                              TermSingle(
                                                                FactorCharConst(
                                                                 a
                                                                ) [FactorCharConst]
                                                              ) [TermSingle]
                                                            ) [ExprSingle]
                                                          ) [ExprOne]
                                                        ) [AssignmentExpr]
                                                      ) [DesignatorAssignment]
                                                    ) [StmtDesign]
                                                  ) [StatementMulti]
                                                  StmtDesign(
                                                    DesignatorAssignment(
                                                      DesignatorSimple(
                                                       num
                                                      ) [DesignatorSimple]
                                                      AssignmentExpr(
                                                        ExprOne(
                                                          ExprSingle(
                                                            TermSingle(
                                                              FactorBoolConst(
                                                               true
                                                              ) [FactorBoolConst]
                                                            ) [TermSingle]
                                                          ) [ExprSingle]
                                                        ) [ExprOne]
                                                      ) [AssignmentExpr]
                                                    ) [DesignatorAssignment]
                                                  ) [StmtDesign]
                                                ) [StatementMulti]
                                                StmtDesign(
                                                  DesignatorAssignment(
                                                    DesignatorSimple(
                                                     character
                                                    ) [DesignatorSimple]
                                                    AssignmentExpr(
                                                      ExprOne(
                                                        ExprSingle(
                                                          TermSingle(
                                                            FactorNumConst(
                                                             1
                                                            ) [FactorNumConst]
                                                          ) [TermSingle]
                                                        ) [ExprSingle]
                                                      ) [ExprOne]
                                                    ) [AssignmentExpr]
                                                  ) [DesignatorAssignment]
                                                ) [StmtDesign]
                                              ) [StatementMulti]
                                              StmtDesign(
                                                DesignatorAssignment(
                                                  DesignatorSimple(
                                                   character
                                                  ) [DesignatorSimple]
                                                  AssignmentExpr(
                                                    ExprOne(
                                                      ExprSingle(
                                                        TermSingle(
                                                          FactorBoolConst(
                                                           true
                                                          ) [FactorBoolConst]
                                                        ) [TermSingle]
                                                      ) [ExprSingle]
                                                    ) [ExprOne]
                                                  ) [AssignmentExpr]
                                                ) [DesignatorAssignment]
                                              ) [StmtDesign]
                                            ) [StatementMulti]
                                            StmtDesign(
                                              DesignatorAssignment(
                                                DesignatorSimple(
                                                 boolean
                                                ) [DesignatorSimple]
                                                AssignmentExpr(
                                                  ExprOne(
                                                    ExprSingle(
                                                      TermSingle(
                                                        FactorNumConst(
                                                         1
                                                        ) [FactorNumConst]
                                                      ) [TermSingle]
                                                    ) [ExprSingle]
                                                  ) [ExprOne]
                                                ) [AssignmentExpr]
                                              ) [DesignatorAssignment]
                                            ) [StmtDesign]
                                          ) [StatementMulti]
                                          StmtDesign(
                                            DesignatorAssignment(
                                              DesignatorSimple(
                                               boolean
                                              ) [DesignatorSimple]
                                              AssignmentExpr(
                                                ExprOne(
                                                  ExprSingle(
                                                    TermSingle(
                                                      FactorCharConst(
                                                       a
                                                      ) [FactorCharConst]
                                                    ) [TermSingle]
                                                  ) [ExprSingle]
                                                ) [ExprOne]
                                              ) [AssignmentExpr]
                                            ) [DesignatorAssignment]
                                          ) [StmtDesign]
                                        ) [StatementMulti]
                                        StmtDesign(
                                          DesignatorAssignment(
                                            DesignatorSimple(
                                             cnst
                                            ) [DesignatorSimple]
                                            AssignmentExpr(
                                              ExprOne(
                                                ExprSingle(
                                                  TermSingle(
                                                    FactorNumConst(
                                                     2
                                                    ) [FactorNumConst]
                                                  ) [TermSingle]
                                                ) [ExprSingle]
                                              ) [ExprOne]
                                            ) [AssignmentExpr]
                                          ) [DesignatorAssignment]
                                        ) [StmtDesign]
                                      ) [StatementMulti]
                                      StmtDesign(
                                        DesignatorIncrement(
                                          DesignatorSimple(
                                           character
                                          ) [DesignatorSimple]
                                        ) [DesignatorIncrement]
                                      ) [StmtDesign]
                                    ) [StatementMulti]
                                    StmtDesign(
                                      DesignatorDecrement(
                                        DesignatorSimple(
                                         boolean
                                        ) [DesignatorSimple]
                                      ) [DesignatorDecrement]
                                    ) [StmtDesign]
                                  ) [StatementMulti]
                                  StmtDesign(
                                    DesignatorMethodCallParams(
                                      DesignatorSimple(
                                       fun
                                      ) [DesignatorSimple]
                                      ActParsMulti(
                                        ActParsSingle(
                                          ExprOne(
                                            ExprSingle(
                                              TermSingle(
                                                FactorNumConst(
                                                 1
                                                ) [FactorNumConst]
                                              ) [TermSingle]
                                            ) [ExprSingle]
                                          ) [ExprOne]
                                        ) [ActParsSingle]
                                        ExprOne(
                                          ExprSingle(
                                            TermSingle(
                                              FactorNumConst(
                                               2
                                              ) [FactorNumConst]
                                            ) [TermSingle]
                                          ) [ExprSingle]
                                        ) [ExprOne]
                                      ) [ActParsMulti]
                                    ) [DesignatorMethodCallParams]
                                  ) [StmtDesign]
                                ) [StatementMulti]
                                StmtDesign(
                                  DesignatorMethodCallParams(
                                    DesignatorSimple(
                                     fun
                                    ) [DesignatorSimple]
                                    ActParsSingle(
                                      ExprOne(
                                        ExprSingle(
                                          TermSingle(
                                            FactorBoolConst(
                                             true
                                            ) [FactorBoolConst]
                                          ) [TermSingle]
                                        ) [ExprSingle]
                                      ) [ExprOne]
                                    ) [ActParsSingle]
                                  ) [DesignatorMethodCallParams]
                                ) [StmtDesign]
                              ) [StatementMulti]
                              StmtDesign(
                                DesignatorAssignment(
                                  DesignatorSimple(
                                   character
                                  ) [DesignatorSimple]
                                  AssignmentExpr(
                                    ExprOne(
                                      ExprNeg(
                                        TermSingle(
                                          FactorCharConst(
                                           a
                                          ) [FactorCharConst]
                                        ) [TermSingle]
                                      ) [ExprNeg]
                                    ) [ExprOne]
                                  ) [AssignmentExpr]
                                ) [DesignatorAssignment]
                              ) [StmtDesign]
                            ) [StatementMulti]
                            StmtDesign(
                              DesignatorAssignment(
                                DesignatorSimple(
                                 niz
                                ) [DesignatorSimple]
                                AssignmentExpr(
                                  ExprOne(
                                    ExprSingle(
                                      TermSingle(
                                        FactorNewArray(
                                          Type(
                                           int
                                          ) [Type]
                                          ExprOne(
                                            ExprSingle(
                                              TermSingle(
                                                FactorCharConst(
                                                 a
                                                ) [FactorCharConst]
                                              ) [TermSingle]
                                            ) [ExprSingle]
                                          ) [ExprOne]
                                        ) [FactorNewArray]
                                      ) [TermSingle]
                                    ) [ExprSingle]
                                  ) [ExprOne]
                                ) [AssignmentExpr]
                              ) [DesignatorAssignment]
                            ) [StmtDesign]
                          ) [StatementMulti]
                          StmtDoWhile(
                            DoHead(
                            ) [DoHead]
                            Stmt(
                              StatementMulti(
                                StatementMulti(
                                  StatementSingle(
                                    StmtDesign(
                                      DesignatorIncrement(
                                        DesignatorSimple(
                                         num
                                        ) [DesignatorSimple]
                                      ) [DesignatorIncrement]
                                    ) [StmtDesign]
                                  ) [StatementSingle]
                                  StmtBreak(
                                  ) [StmtBreak]
                                ) [StatementMulti]
                                StmtContinue(
                                ) [StmtContinue]
                              ) [StatementMulti]
                            ) [Stmt]
                            CondOne(
                              CondTermOne(
                                CondFactTwo(
                                  ExprOne(
                                    ExprSingle(
                                      TermSingle(
                                        FactorDesignator(
                                          DesignatorSimple(
                                           num
                                          ) [DesignatorSimple]
                                        ) [FactorDesignator]
                                      ) [TermSingle]
                                    ) [ExprSingle]
                                  ) [ExprOne]
                                  RelopLT(
                                  ) [RelopLT]
                                  ExprOne(
                                    ExprSingle(
                                      TermSingle(
                                        FactorNumConst(
                                         10
                                        ) [FactorNumConst]
                                      ) [TermSingle]
                                    ) [ExprSingle]
                                  ) [ExprOne]
                                ) [CondFactTwo]
                              ) [CondTermOne]
                            ) [CondOne]
                          ) [StmtDoWhile]
                        ) [StatementMulti]
                        StmtBreak(
                        ) [StmtBreak]
                      ) [StatementMulti]
                      StmtContinue(
                      ) [StmtContinue]
                    ) [StatementMulti]
                    StmtIf(
                      StmtIfBody(
                        IfCond(
                          CondOne(
                            CondTermOne(
                              CondFactTwo(
                                ExprOne(
                                  ExprSingle(
                                    TermSingle(
                                      FactorDesignator(
                                        DesignatorSimple(
                                         niz
                                        ) [DesignatorSimple]
                                      ) [FactorDesignator]
                                    ) [TermSingle]
                                  ) [ExprSingle]
                                ) [ExprOne]
                                RelopLT(
                                ) [RelopLT]
                                ExprOne(
                                  ExprSingle(
                                    TermSingle(
                                      FactorDesignator(
                                        DesignatorSimple(
                                         niz1
                                        ) [DesignatorSimple]
                                      ) [FactorDesignator]
                                    ) [TermSingle]
                                  ) [ExprSingle]
                                ) [ExprOne]
                              ) [CondFactTwo]
                            ) [CondTermOne]
                          ) [CondOne]
                        ) [IfCond]
                        Stmt(
                          StatementSingle(
                            StmtDesign(
                              DesignatorAssignment(
                                DesignatorSimple(
                                 num
                                ) [DesignatorSimple]
                                AssignmentExpr(
                                  ExprOne(
                                    ExprSingle(
                                      TermSingle(
                                        FactorNumConst(
                                         1
                                        ) [FactorNumConst]
                                      ) [TermSingle]
                                    ) [ExprSingle]
                                  ) [ExprOne]
                                ) [AssignmentExpr]
                              ) [DesignatorAssignment]
                            ) [StmtDesign]
                          ) [StatementSingle]
                        ) [Stmt]
                      ) [StmtIfBody]
                    ) [StmtIf]
                  ) [StatementMulti]
                  StmtIf(
                    StmtIfBody(
                      IfCond(
                        CondOne(
                          CondTermOne(
                            CondFactOne(
                              ExprOne(
                                ExprSingle(
                                  TermSingle(
                                    FactorDesignator(
                                      DesignatorSimple(
                                       num
                                      ) [DesignatorSimple]
                                    ) [FactorDesignator]
                                  ) [TermSingle]
                                ) [ExprSingle]
                              ) [ExprOne]
                            ) [CondFactOne]
                          ) [CondTermOne]
                        ) [CondOne]
                      ) [IfCond]
                      Stmt(
                        StatementSingle(
                          StmtDesign(
                            DesignatorAssignment(
                              DesignatorSimple(
                               num
                              ) [DesignatorSimple]
                              AssignmentExpr(
                                ExprOne(
                                  ExprSingle(
                                    TermSingle(
                                      FactorNumConst(
                                       2
                                      ) [FactorNumConst]
                                    ) [TermSingle]
                                  ) [ExprSingle]
                                ) [ExprOne]
                              ) [AssignmentExpr]
                            ) [DesignatorAssignment]
                          ) [StmtDesign]
                        ) [StatementSingle]
                      ) [Stmt]
                    ) [StmtIfBody]
                  ) [StmtIf]
                ) [StatementMulti]
                StmtDoWhile(
                  DoHead(
                  ) [DoHead]
                  Stmt(
                    StatementSingle(
                      StmtDesign(
                        DesignatorAssignment(
                          DesignatorArray(
                           niz
                            ExprOne(
                              ExprSingle(
                                TermSingle(
                                  FactorBoolConst(
                                   true
                                  ) [FactorBoolConst]
                                ) [TermSingle]
                              ) [ExprSingle]
                            ) [ExprOne]
                          ) [DesignatorArray]
                          AssignmentExpr(
                            ExprOne(
                              ExprSingle(
                                TermSingle(
                                  FactorNumConst(
                                   1
                                  ) [FactorNumConst]
                                ) [TermSingle]
                              ) [ExprSingle]
                            ) [ExprOne]
                          ) [AssignmentExpr]
                        ) [DesignatorAssignment]
                      ) [StmtDesign]
                    ) [StatementSingle]
                  ) [Stmt]
                  CondOne(
                    CondTermOne(
                      CondFactOne(
                        ExprOne(
                          ExprSingle(
                            TermSingle(
                              FactorDesignator(
                                DesignatorSimple(
                                 num
                                ) [DesignatorSimple]
                              ) [FactorDesignator]
                            ) [TermSingle]
                          ) [ExprSingle]
                        ) [ExprOne]
                      ) [CondFactOne]
                    ) [CondTermOne]
                  ) [CondOne]
                ) [StmtDoWhile]
              ) [StatementMulti]
              StmtDesign(
                DesignatorAssignment(
                  DesignatorSimple(
                   num
                  ) [DesignatorSimple]
                  AssignmentExpr(
                    ExprOne(
                      ExprAddop(
                        ExprSingle(
                          TermSingle(
                            FactorDesignator(
                              DesignatorSimple(
                               num
                              ) [DesignatorSimple]
                            ) [FactorDesignator]
                          ) [TermSingle]
                        ) [ExprSingle]
                        AddopPlus(
                        ) [AddopPlus]
                        TermSingle(
                          FactorCharConst(
                           a
                          ) [FactorCharConst]
                        ) [TermSingle]
                      ) [ExprAddop]
                    ) [ExprOne]
                  ) [AssignmentExpr]
                ) [DesignatorAssignment]
              ) [StmtDesign]
            ) [StatementMulti]
            StmtDesign(
              DesignatorAssignment(
                DesignatorSimple(
                 num
                ) [DesignatorSimple]
                AssignmentExpr(
                  ExprOne(
                    ExprSingle(
                      TermMulop(
                        TermSingle(
                          FactorDesignator(
                            DesignatorSimple(
                             num
                            ) [DesignatorSimple]
                          ) [FactorDesignator]
                        ) [TermSingle]
                        MulopMul(
                        ) [MulopMul]
                        FactorCharConst(
                         a
                        ) [FactorCharConst]
                      ) [TermMulop]
                    ) [ExprSingle]
                  ) [ExprOne]
                ) [AssignmentExpr]
              ) [DesignatorAssignment]
            ) [StmtDesign]
          ) [StatementMulti]
          StmtDesign(
            DesignatorAssignment(
              DesignatorSimple(
               num
              ) [DesignatorSimple]
              AssignmentExpr(
                ExprTernary(
                  ExprSingle(
                    TermSingle(
                      FactorDesignator(
                        DesignatorSimple(
                         boolean
                        ) [DesignatorSimple]
                      ) [FactorDesignator]
                    ) [TermSingle]
                  ) [ExprSingle]
                  ExprSingle(
                    TermSingle(
                      FactorNumConst(
                       1
                      ) [FactorNumConst]
                    ) [TermSingle]
                  ) [ExprSingle]
                  ExprSingle(
                    TermSingle(
                      FactorCharConst(
                       a
                      ) [FactorCharConst]
                    ) [TermSingle]
                  ) [ExprSingle]
                ) [ExprTernary]
              ) [AssignmentExpr]
            ) [DesignatorAssignment]
          ) [StmtDesign]
        ) [StatementMulti]
      ) [MethodVoid4]
    ) [MethodVoidDeclaration]
  ) [MethodDecMulti]
) [Program]
INFO  23:06:21,705 - 

================SEMANTICKA OBRADA====================


ERROR 23:06:21,721 - Semanticka greska - nije pronadjen tip 'abc' u tabeli simbola!
INFO  23:06:21,722 - Deklarisana globalna promenljiva 'a' na liniji 2
INFO  23:06:21,722 - Deklarisana konstanta 'cnst' na liniji 3
INFO  23:06:21,723 - Formalni parametar funkcije fun: 'x' na liniji 5
ERROR 23:06:21,723 - Semanticka greska - metoda 'fun' treba da ima povratnu vrednost!
INFO  23:06:21,724 - Deklarisana promenljiva 'b' na liniji 14
ERROR 23:06:21,724 - Semanticka greska - 'b' je vec deklarisano na liniji 14
INFO  23:06:21,724 - Deklarisana promenljiva 'num' na liniji 15
INFO  23:06:21,724 - Deklarisana promenljiva 'character' na liniji 15
INFO  23:06:21,724 - Deklarisana promenljiva 'boolean' na liniji 15
INFO  23:06:21,724 - Deklarisan niz 'niz' na liniji 16
INFO  23:06:21,724 - Deklarisan niz 'niz1' na liniji 16
ERROR 23:06:21,725 - Semanticka greska - nekompatibilni tipovi za dodelu vrednosti na liniji 18
ERROR 23:06:21,725 - Semanticka greska - nekompatibilni tipovi za dodelu vrednosti na liniji 21
ERROR 23:06:21,725 - Semanticka greska - nekompatibilni tipovi za dodelu vrednosti na liniji 22
ERROR 23:06:21,725 - Semanticka greska - nekompatibilni tipovi za dodelu vrednosti na liniji 23
ERROR 23:06:21,725 - Semanticka greska - nekompatibilni tipovi za dodelu vrednosti na liniji 24
ERROR 23:06:21,729 - Semanticka greska - nekompatibilni tipovi za dodelu vrednosti na liniji 25
ERROR 23:06:21,729 - Semanticka greska - nekompatibilni tipovi za dodelu vrednosti na liniji 26
ERROR 23:06:21,729 - Semanticka greska - vrednost moze da se dodeli samo promenljivoj, elementu niza ili polju objekta na liniji 29
ERROR 23:06:21,729 - Semanticka greska - tip za inkrement moze biti jedino int na liniji 32
ERROR 23:06:21,729 - Semanticka greska - tip za dekrement moze biti jedino int na liniji 33
INFO  23:06:21,729 - Pronadjen poziv funkcije 'fun' na liniji 36
ERROR 23:06:21,730 - Semanticka greska - argumenti funkcije nisu odgovarajuci na liniji 36
INFO  23:06:21,730 - Pronadjen poziv funkcije 'fun' na liniji 37
ERROR 23:06:21,730 - Semanticka greska - argumenti funkcije nisu odgovarajuci na liniji 37
ERROR 23:06:21,730 - Semanticka greska - tip mora da bude int na liniji 40
ERROR 23:06:21,730 - Semanticka greska - tip za alociranje niza moze biti jedino int na liniji 43
ERROR 23:06:21,730 - Semanticka greska - break iskaz van petlje
ERROR 23:06:21,730 - Semanticka greska - continue iskaz van petlje
ERROR 23:06:21,731 - Semanticka greska - relacioni izraz sa referentnim tipovima moze koristiti samo '==' i '!=' operatore na liniji 54
ERROR 23:06:21,732 - Semanticka greska - if uslov nije tipa bool na liniji 58
ERROR 23:06:21,732 - Semanticka greska - nevalidan pristup elementu niza na liniji 63
INFO  23:06:21,732 - Pristup elementu niza 'niz' na liniji 63
ERROR 23:06:21,732 - Semanticka greska - while uslov nije tipa bool na liniji 62
ERROR 23:06:21,732 - Semanticka greska - clanovi izraza nisu tipa int na liniji 66
ERROR 23:06:21,732 - Semanticka greska - clanovi izraza nisu kompatibilni na liniji 66
ERROR 23:06:21,732 - Semanticka greska - clanovi izraza nisu tipa int na liniji 67
ERROR 23:06:21,732 - Semanticka greska - drugi i treci izraz moraju biti istog tipa na liniji 69
INFO  23:06:21,733 - ===================================
ERROR 23:06:21,733 - Parsiranje nije uspesno zavrseno!
INFO  23:08:27,327 - Kompajliranje ulaznog fajla C:\Users\Anja\Desktop\PP1 projekat\workspace\MJCompiler\test\program.mj
INFO  23:08:27,405 - #2 program
INFO  23:08:27,405 - #20 p
INFO  23:08:27,406 - #7 const
INFO  23:08:27,406 - #20 int
INFO  23:08:27,407 - #20 size
INFO  23:08:27,407 - #37 =
INFO  23:08:27,407 - #21 10
INFO  23:08:27,408 - #40 ;
INFO  23:08:27,409 - #4 class
INFO  23:08:27,409 - #20 Table
INFO  23:08:27,409 - #47 {
INFO  23:08:27,409 - #20 int
INFO  23:08:27,410 - #20 pos
INFO  23:08:27,410 - #45 [
INFO  23:08:27,410 - #46 ]
INFO  23:08:27,410 - #41 ,
INFO  23:08:27,410 - #20 neg
INFO  23:08:27,410 - #45 [
INFO  23:08:27,410 - #46 ]
INFO  23:08:27,410 - #40 ;
INFO  23:08:27,411 - #47 {
INFO  23:08:27,411 - #16 void
INFO  23:08:27,411 - #20 putp
INFO  23:08:27,411 - #43 (
INFO  23:08:27,412 - #20 int
INFO  23:08:27,412 - #20 a
INFO  23:08:27,412 - #41 ,
INFO  23:08:27,412 - #20 int
INFO  23:08:27,413 - #20 idx
INFO  23:08:27,413 - #44 )
INFO  23:08:27,413 - #47 {
INFO  23:08:27,413 - #20 this
INFO  23:08:27,413 - #42 .
ERROR 23:08:27,413 - 
Sintaksna greska na liniji 6, koloni 33 za simbol "."!
INFO  23:08:27,414 - #20 pos
INFO  23:08:27,414 - #45 [
INFO  23:08:27,414 - #20 idx
INFO  23:08:27,414 - #46 ]
INFO  23:08:27,415 - #37 =
INFO  23:08:27,415 - #20 a
INFO  23:08:27,415 - #40 ;
INFO  23:08:27,415 - #48 }
INFO  23:08:27,415 - #16 void
INFO  23:08:27,415 - #20 putn
INFO  23:08:27,415 - #43 (
INFO  23:08:27,415 - #20 int
INFO  23:08:27,415 - #20 a
INFO  23:08:27,415 - #41 ,
INFO  23:08:27,415 - #20 int
INFO  23:08:27,416 - #20 idx
INFO  23:08:27,416 - #44 )
ERROR 23:08:27,416 - Oporavak od greske u definiciji formalnih parametara funkcije na liniji 6, koloni 33 za simbol "."!
INFO  23:08:27,417 - #47 {
INFO  23:08:27,417 - #20 this
INFO  23:08:27,417 - #42 .
ERROR 23:08:27,417 - 
Sintaksna greska na liniji 7, koloni 33 za simbol "."!
INFO  23:08:27,417 - #20 neg
INFO  23:08:27,417 - #45 [
INFO  23:08:27,417 - #20 idx
INFO  23:08:27,417 - #46 ]
INFO  23:08:27,417 - #37 =
INFO  23:08:27,417 - #20 a
INFO  23:08:27,417 - #40 ;
INFO  23:08:27,418 - #48 }
INFO  23:08:27,418 - #20 int
INFO  23:08:27,418 - #20 getp
INFO  23:08:27,418 - #43 (
INFO  23:08:27,418 - #20 int
INFO  23:08:27,418 - #20 idx
INFO  23:08:27,418 - #44 )
INFO  23:08:27,418 - #47 {
INFO  23:08:27,418 - #15 return
INFO  23:08:27,418 - #20 pos
ERROR 23:08:27,418 - Oporavak od greske u definiciji formalnih parametara funkcije na liniji 7, koloni 33 za simbol "."!
INFO  23:08:27,418 - #45 [
INFO  23:08:27,419 - #20 idx
INFO  23:08:27,419 - #46 ]
INFO  23:08:27,420 - #40 ;
INFO  23:08:27,420 - #48 }
INFO  23:08:27,420 - #20 int
INFO  23:08:27,421 - #20 getn
INFO  23:08:27,421 - #43 (
INFO  23:08:27,421 - #20 int
INFO  23:08:27,421 - #20 idx
INFO  23:08:27,422 - #44 )
INFO  23:08:27,422 - #47 {
INFO  23:08:27,422 - #15 return
INFO  23:08:27,422 - #20 neg
INFO  23:08:27,422 - #45 [
INFO  23:08:27,422 - #20 idx
INFO  23:08:27,422 - #46 ]
INFO  23:08:27,422 - #40 ;
INFO  23:08:27,422 - #48 }
INFO  23:08:27,423 - #48 }
INFO  23:08:27,423 - #48 }
INFO  23:08:27,423 - #20 Table
INFO  23:08:27,424 - #20 val
INFO  23:08:27,424 - #40 ;
INFO  23:08:27,424 - #47 {
INFO  23:08:27,425 - #16 void
INFO  23:08:27,425 - #20 f
INFO  23:08:27,425 - #43 (
INFO  23:08:27,425 - #20 char
INFO  23:08:27,425 - #20 ch
INFO  23:08:27,425 - #41 ,
INFO  23:08:27,425 - #20 int
INFO  23:08:27,425 - #20 a
INFO  23:08:27,425 - #41 ,
INFO  23:08:27,425 - #20 int
INFO  23:08:27,425 - #20 arg
INFO  23:08:27,426 - #44 )
INFO  23:08:27,426 - #20 int
INFO  23:08:27,426 - #20 x
INFO  23:08:27,426 - #40 ;
INFO  23:08:27,426 - #47 {
INFO  23:08:27,426 - #20 x
INFO  23:08:27,426 - #37 =
INFO  23:08:27,426 - #20 arg
INFO  23:08:27,426 - #40 ;
INFO  23:08:27,427 - #48 }
INFO  23:08:27,427 - #16 void
INFO  23:08:27,427 - #20 main
INFO  23:08:27,427 - #43 (
INFO  23:08:27,428 - #44 )
INFO  23:08:27,428 - #20 int
INFO  23:08:27,428 - #20 x
INFO  23:08:27,428 - #41 ,
INFO  23:08:27,428 - #20 i
INFO  23:08:27,428 - #40 ;
INFO  23:08:27,428 - #20 char
INFO  23:08:27,428 - #20 c
INFO  23:08:27,429 - #40 ;
INFO  23:08:27,429 - #47 {
INFO  23:08:27,429 - #20 val
INFO  23:08:27,429 - #37 =
INFO  23:08:27,429 - #12 new
INFO  23:08:27,429 - #20 Table
INFO  23:08:27,429 - #40 ;
INFO  23:08:27,429 - #20 val
INFO  23:08:27,429 - #42 .
ERROR 23:08:27,429 - 
Sintaksna greska na liniji 22, koloni 3 za simbol "."!
INFO  23:08:27,430 - #20 pos
INFO  23:08:27,430 - #37 =
INFO  23:08:27,430 - #12 new
INFO  23:08:27,430 - #20 int
INFO  23:08:27,430 - #45 [
INFO  23:08:27,431 - #20 size
INFO  23:08:27,431 - #46 ]
INFO  23:08:27,431 - #40 ;
INFO  23:08:27,434 - #20 val
INFO  23:08:27,434 - #42 .
INFO  23:08:27,434 - #20 neg
INFO  23:08:27,434 - #37 =
INFO  23:08:27,434 - #12 new
INFO  23:08:27,434 - #20 int
INFO  23:08:27,434 - #45 [
INFO  23:08:27,435 - #20 size
INFO  23:08:27,435 - #46 ]
INFO  23:08:27,435 - #40 ;
INFO  23:08:27,435 - #20 i
INFO  23:08:27,435 - #37 =
INFO  23:08:27,435 - #21 0
INFO  23:08:27,435 - #40 ;
INFO  23:08:27,435 - #10 do
INFO  23:08:27,435 - #47 {
INFO  23:08:27,435 - #20 val
INFO  23:08:27,435 - #42 .
INFO  23:08:27,435 - #20 putp
INFO  23:08:27,435 - #43 (
INFO  23:08:27,435 - #21 0
INFO  23:08:27,436 - #41 ,
INFO  23:08:27,436 - #20 i
INFO  23:08:27,436 - #44 )
INFO  23:08:27,436 - #40 ;
INFO  23:08:27,436 - #20 val
INFO  23:08:27,436 - #42 .
INFO  23:08:27,436 - #20 putn
INFO  23:08:27,436 - #43 (
INFO  23:08:27,436 - #21 0
INFO  23:08:27,437 - #41 ,
INFO  23:08:27,437 - #20 i
INFO  23:08:27,437 - #44 )
INFO  23:08:27,437 - #40 ;
INFO  23:08:27,437 - #20 i
INFO  23:08:27,437 - #38 ++
INFO  23:08:27,437 - #40 ;
INFO  23:08:27,437 - #48 }
INFO  23:08:27,437 - #11 while
INFO  23:08:27,437 - #43 (
INFO  23:08:27,437 - #20 i
INFO  23:08:27,437 - #33 <
INFO  23:08:27,438 - #20 size
INFO  23:08:27,438 - #44 )
INFO  23:08:27,438 - #40 ;
INFO  23:08:27,438 - #20 f
INFO  23:08:27,438 - #43 (
INFO  23:08:27,438 - #20 c
INFO  23:08:27,438 - #41 ,
INFO  23:08:27,438 - #20 x
INFO  23:08:27,438 - #41 ,
INFO  23:08:27,439 - #20 i
INFO  23:08:27,439 - #44 )
INFO  23:08:27,439 - #40 ;
INFO  23:08:27,439 - #14 read
INFO  23:08:27,439 - #43 (
INFO  23:08:27,439 - #20 x
INFO  23:08:27,439 - #44 )
INFO  23:08:27,439 - #40 ;
INFO  23:08:27,439 - #10 do
INFO  23:08:27,439 - #47 {
INFO  23:08:27,440 - #8 if
INFO  23:08:27,440 - #43 (
INFO  23:08:27,440 - #20 x
INFO  23:08:27,440 - #34 <=
INFO  23:08:27,440 - #21 0
INFO  23:08:27,440 - #44 )
INFO  23:08:27,440 - #3 break
INFO  23:08:27,440 - #40 ;
INFO  23:08:27,440 - #8 if
INFO  23:08:27,440 - #43 (
INFO  23:08:27,441 - #21 0
INFO  23:08:27,441 - #34 <=
INFO  23:08:27,441 - #20 x
INFO  23:08:27,441 - #35 &&
INFO  23:08:27,441 - #20 x
INFO  23:08:27,441 - #33 <
INFO  23:08:27,442 - #20 size
INFO  23:08:27,442 - #44 )
INFO  23:08:27,442 - #47 {
INFO  23:08:27,442 - #20 val
INFO  23:08:27,442 - #42 .
ERROR 23:08:27,442 - Oporavak od greske u definiciji formalnih parametara funkcije na liniji 22, koloni 3 za simbol "."!
ERROR 23:08:27,442 - 
Sintaksna greska na liniji 36, koloni 3 za simbol "."!
INFO  23:08:27,442 - #20 putp
INFO  23:08:27,442 - #43 (
INFO  23:08:27,442 - #20 val
INFO  23:08:27,442 - #42 .
INFO  23:08:27,443 - #20 getp
INFO  23:08:27,443 - #43 (
INFO  23:08:27,443 - #20 x
INFO  23:08:27,443 - #44 )
INFO  23:08:27,443 - #24 +
INFO  23:08:27,443 - #21 1
INFO  23:08:27,443 - #44 )
INFO  23:08:27,443 - #40 ;
INFO  23:08:27,443 - #48 }
INFO  23:08:27,443 - #6 else
INFO  23:08:27,443 - #8 if
INFO  23:08:27,444 - #43 (
INFO  23:08:27,444 - #20 size
INFO  23:08:27,444 - #33 <
INFO  23:08:27,444 - #20 x
INFO  23:08:27,444 - #35 &&
INFO  23:08:27,445 - #20 x
INFO  23:08:27,445 - #33 <
INFO  23:08:27,445 - #21 0
INFO  23:08:27,445 - #44 )
INFO  23:08:27,445 - #47 {
INFO  23:08:27,445 - #20 val
INFO  23:08:27,445 - #42 .
ERROR 23:08:27,445 - Oporavak od greske u definiciji formalnih parametara funkcije na liniji 36, koloni 3 za simbol "."!
ERROR 23:08:27,445 - 
Sintaksna greska na liniji 40, koloni 3 za simbol "."!
INFO  23:08:27,445 - #20 putn
INFO  23:08:27,445 - #43 (
INFO  23:08:27,446 - #20 val
INFO  23:08:27,446 - #42 .
INFO  23:08:27,446 - #20 getn
INFO  23:08:27,446 - #43 (
INFO  23:08:27,446 - #20 x
INFO  23:08:27,446 - #44 )
INFO  23:08:27,446 - #24 +
INFO  23:08:27,446 - #21 1
INFO  23:08:27,446 - #44 )
INFO  23:08:27,446 - #40 ;
INFO  23:08:27,446 - #48 }
INFO  23:08:27,446 - #14 read
INFO  23:08:27,447 - #43 (
INFO  23:08:27,447 - #20 x
INFO  23:08:27,447 - #44 )
INFO  23:08:27,447 - #40 ;
INFO  23:08:27,447 - #48 }
INFO  23:08:27,447 - #11 while
INFO  23:08:27,447 - #43 (
INFO  23:08:27,447 - #23 true
INFO  23:08:27,447 - #44 )
INFO  23:08:27,447 - #40 ;
INFO  23:08:27,447 - #13 print
INFO  23:08:27,447 - #43 (
INFO  23:08:27,448 - #20 x
INFO  23:08:27,448 - #33 <
INFO  23:08:27,448 - #21 0
INFO  23:08:27,448 - #49 ?
INFO  23:08:27,448 - #22 -
INFO  23:08:27,448 - #50 :
INFO  23:08:27,448 - #22 +
INFO  23:08:27,448 - #44 )
INFO  23:08:27,448 - #40 ;
INFO  23:08:27,448 - #48 }
INFO  23:08:27,448 - #48 }
ERROR 23:08:27,449 - Fatalna greska, parsiranje se ne moze nastaviti na liniji 46, koloni 1!
INFO  23:10:12,542 - Kompajliranje ulaznog fajla C:\Users\Anja\Desktop\PP1 projekat\workspace\MJCompiler\test\program.mj
INFO  23:10:12,600 - #2 program
INFO  23:10:12,600 - #20 p
INFO  23:10:12,600 - #7 const
INFO  23:10:12,601 - #20 int
INFO  23:10:12,602 - #20 size
INFO  23:10:12,602 - #37 =
INFO  23:10:12,602 - #21 10
INFO  23:10:12,602 - #40 ;
INFO  23:10:12,603 - #4 class
INFO  23:10:12,603 - #20 Table
INFO  23:10:12,603 - #47 {
INFO  23:10:12,603 - #20 int
INFO  23:10:12,603 - #20 pos
INFO  23:10:12,603 - #45 [
INFO  23:10:12,603 - #46 ]
INFO  23:10:12,603 - #41 ,
INFO  23:10:12,604 - #20 neg
INFO  23:10:12,604 - #45 [
INFO  23:10:12,604 - #46 ]
INFO  23:10:12,604 - #40 ;
INFO  23:10:12,604 - #47 {
INFO  23:10:12,605 - #16 void
INFO  23:10:12,605 - #20 putp
INFO  23:10:12,605 - #43 (
INFO  23:10:12,605 - #20 int
INFO  23:10:12,605 - #20 a
INFO  23:10:12,605 - #41 ,
INFO  23:10:12,606 - #20 int
INFO  23:10:12,606 - #20 idx
INFO  23:10:12,606 - #44 )
INFO  23:10:12,606 - #47 {
INFO  23:10:12,606 - #20 this
INFO  23:10:12,606 - #42 .
ERROR 23:10:12,606 - 
Sintaksna greska na liniji 6, koloni 33 za simbol "."!
INFO  23:10:12,606 - #20 pos
INFO  23:10:12,606 - #45 [
INFO  23:10:12,606 - #20 idx
INFO  23:10:12,607 - #46 ]
INFO  23:10:12,607 - #37 =
INFO  23:10:12,607 - #20 a
INFO  23:10:12,607 - #40 ;
INFO  23:10:12,607 - #48 }
INFO  23:10:12,607 - #16 void
INFO  23:10:12,607 - #20 putn
INFO  23:10:12,607 - #43 (
INFO  23:10:12,608 - #20 int
INFO  23:10:12,608 - #20 a
INFO  23:10:12,608 - #41 ,
INFO  23:10:12,608 - #20 int
INFO  23:10:12,608 - #20 idx
INFO  23:10:12,608 - #44 )
ERROR 23:10:12,608 - Oporavak od greske u definiciji formalnih parametara funkcije na liniji 6, koloni 33 za simbol "."!
INFO  23:10:12,608 - #47 {
INFO  23:10:12,608 - #20 this
INFO  23:10:12,609 - #42 .
ERROR 23:10:12,609 - 
Sintaksna greska na liniji 7, koloni 33 za simbol "."!
INFO  23:10:12,609 - #20 neg
INFO  23:10:12,609 - #45 [
INFO  23:10:12,609 - #20 idx
INFO  23:10:12,609 - #46 ]
INFO  23:10:12,609 - #37 =
INFO  23:10:12,610 - #20 a
INFO  23:10:12,610 - #40 ;
INFO  23:10:12,610 - #48 }
INFO  23:10:12,610 - #20 int
INFO  23:10:12,610 - #20 getp
INFO  23:10:12,611 - #43 (
INFO  23:10:12,612 - #20 int
INFO  23:10:12,612 - #20 idx
INFO  23:10:12,612 - #44 )
INFO  23:10:12,612 - #47 {
INFO  23:10:12,612 - #15 return
INFO  23:10:12,612 - #20 pos
ERROR 23:10:12,612 - Oporavak od greske u definiciji formalnih parametara funkcije na liniji 7, koloni 33 za simbol "."!
INFO  23:10:12,612 - #45 [
INFO  23:10:12,612 - #20 idx
INFO  23:10:12,612 - #46 ]
INFO  23:10:12,613 - #40 ;
INFO  23:10:12,613 - #48 }
INFO  23:10:12,613 - #20 int
INFO  23:10:12,614 - #20 getn
INFO  23:10:12,614 - #43 (
INFO  23:10:12,614 - #20 int
INFO  23:10:12,614 - #20 idx
INFO  23:10:12,614 - #44 )
INFO  23:10:12,614 - #47 {
INFO  23:10:12,615 - #15 return
INFO  23:10:12,615 - #20 neg
INFO  23:10:12,615 - #45 [
INFO  23:10:12,615 - #20 idx
INFO  23:10:12,615 - #46 ]
INFO  23:10:12,615 - #40 ;
INFO  23:10:12,615 - #48 }
INFO  23:10:12,615 - #48 }
INFO  23:10:12,615 - #48 }
INFO  23:10:12,616 - #20 Table
INFO  23:10:12,616 - #20 val
INFO  23:10:12,616 - #40 ;
INFO  23:10:12,617 - #47 {
INFO  23:10:12,617 - #16 void
INFO  23:10:12,617 - #20 f
INFO  23:10:12,617 - #43 (
INFO  23:10:12,617 - #20 char
INFO  23:10:12,617 - #20 ch
INFO  23:10:12,617 - #41 ,
INFO  23:10:12,617 - #20 int
INFO  23:10:12,618 - #20 a
INFO  23:10:12,618 - #41 ,
INFO  23:10:12,618 - #20 int
INFO  23:10:12,618 - #20 arg
INFO  23:10:12,618 - #44 )
INFO  23:10:12,618 - #20 int
INFO  23:10:12,618 - #20 x
INFO  23:10:12,618 - #40 ;
INFO  23:10:12,618 - #47 {
INFO  23:10:12,618 - #20 x
INFO  23:10:12,618 - #37 =
INFO  23:10:12,618 - #20 arg
INFO  23:10:12,618 - #40 ;
INFO  23:10:12,619 - #48 }
INFO  23:10:12,619 - #16 void
INFO  23:10:12,619 - #20 main
INFO  23:10:12,619 - #43 (
INFO  23:10:12,619 - #44 )
INFO  23:10:12,619 - #20 int
INFO  23:10:12,620 - #20 x
INFO  23:10:12,620 - #41 ,
INFO  23:10:12,620 - #20 i
INFO  23:10:12,620 - #40 ;
INFO  23:10:12,620 - #20 char
INFO  23:10:12,620 - #20 c
INFO  23:10:12,620 - #40 ;
INFO  23:10:12,620 - #47 {
INFO  23:10:12,620 - #20 val
INFO  23:10:12,620 - #37 =
INFO  23:10:12,620 - #12 new
INFO  23:10:12,620 - #20 Table
INFO  23:10:12,621 - #40 ;
INFO  23:10:12,621 - #20 val
INFO  23:10:12,621 - #42 .
ERROR 23:10:12,621 - 
Sintaksna greska na liniji 22, koloni 3 za simbol "."!
INFO  23:10:12,621 - #20 pos
INFO  23:10:12,621 - #37 =
INFO  23:10:12,621 - #12 new
INFO  23:10:12,621 - #20 int
INFO  23:10:12,621 - #45 [
INFO  23:10:12,621 - #20 size
INFO  23:10:12,621 - #46 ]
INFO  23:10:12,621 - #40 ;
INFO  23:10:12,625 - #20 val
INFO  23:10:12,625 - #42 .
INFO  23:10:12,625 - #20 neg
INFO  23:10:12,625 - #37 =
INFO  23:10:12,625 - #12 new
INFO  23:10:12,625 - #20 int
INFO  23:10:12,625 - #45 [
INFO  23:10:12,625 - #20 size
INFO  23:10:12,625 - #46 ]
INFO  23:10:12,625 - #40 ;
INFO  23:10:12,625 - #20 i
INFO  23:10:12,625 - #37 =
INFO  23:10:12,625 - #21 0
INFO  23:10:12,625 - #40 ;
INFO  23:10:12,625 - #10 do
INFO  23:10:12,626 - #47 {
INFO  23:10:12,626 - #20 val
INFO  23:10:12,626 - #42 .
INFO  23:10:12,626 - #20 putp
INFO  23:10:12,626 - #43 (
INFO  23:10:12,626 - #21 0
INFO  23:10:12,626 - #41 ,
INFO  23:10:12,626 - #20 i
INFO  23:10:12,626 - #44 )
INFO  23:10:12,626 - #40 ;
INFO  23:10:12,626 - #20 val
INFO  23:10:12,626 - #42 .
INFO  23:10:12,626 - #20 putn
INFO  23:10:12,626 - #43 (
INFO  23:10:12,626 - #21 0
INFO  23:10:12,626 - #41 ,
INFO  23:10:12,626 - #20 i
INFO  23:10:12,627 - #44 )
INFO  23:10:12,627 - #40 ;
INFO  23:10:12,627 - #20 i
INFO  23:10:12,627 - #38 ++
INFO  23:10:12,627 - #40 ;
INFO  23:10:12,627 - #48 }
INFO  23:10:12,627 - #11 while
INFO  23:10:12,627 - #43 (
INFO  23:10:12,627 - #20 i
INFO  23:10:12,627 - #33 <
INFO  23:10:12,627 - #20 size
INFO  23:10:12,627 - #44 )
INFO  23:10:12,627 - #40 ;
INFO  23:10:12,628 - #20 f
INFO  23:10:12,628 - #43 (
INFO  23:10:12,628 - #20 c
INFO  23:10:12,628 - #41 ,
INFO  23:10:12,628 - #20 x
INFO  23:10:12,628 - #41 ,
INFO  23:10:12,628 - #20 i
INFO  23:10:12,628 - #44 )
INFO  23:10:12,628 - #40 ;
INFO  23:10:12,628 - #14 read
INFO  23:10:12,628 - #43 (
INFO  23:10:12,628 - #20 x
INFO  23:10:12,628 - #44 )
INFO  23:10:12,628 - #40 ;
INFO  23:10:12,629 - #10 do
INFO  23:10:12,629 - #47 {
INFO  23:10:12,629 - #8 if
INFO  23:10:12,629 - #43 (
INFO  23:10:12,629 - #20 x
INFO  23:10:12,629 - #34 <=
INFO  23:10:12,629 - #21 0
INFO  23:10:12,629 - #44 )
INFO  23:10:12,629 - #3 break
INFO  23:10:12,629 - #40 ;
INFO  23:10:12,629 - #8 if
INFO  23:10:12,629 - #43 (
INFO  23:10:12,629 - #21 0
INFO  23:10:12,629 - #34 <=
INFO  23:10:12,629 - #20 x
INFO  23:10:12,629 - #35 &&
INFO  23:10:12,629 - #20 x
INFO  23:10:12,629 - #33 <
INFO  23:10:12,629 - #20 size
INFO  23:10:12,629 - #44 )
INFO  23:10:12,629 - #47 {
INFO  23:10:12,629 - #20 val
INFO  23:10:12,629 - #42 .
ERROR 23:10:12,629 - Oporavak od greske u definiciji formalnih parametara funkcije na liniji 22, koloni 3 za simbol "."!
ERROR 23:10:12,629 - 
Sintaksna greska na liniji 36, koloni 3 za simbol "."!
INFO  23:10:12,630 - #20 putp
INFO  23:10:12,630 - #43 (
INFO  23:10:12,630 - #20 val
INFO  23:10:12,630 - #42 .
INFO  23:10:12,630 - #20 getp
INFO  23:10:12,630 - #43 (
INFO  23:10:12,630 - #20 x
INFO  23:10:12,630 - #44 )
INFO  23:10:12,630 - #24 +
INFO  23:10:12,630 - #21 1
INFO  23:10:12,630 - #44 )
INFO  23:10:12,630 - #40 ;
INFO  23:10:12,630 - #48 }
INFO  23:10:12,630 - #6 else
INFO  23:10:12,630 - #8 if
INFO  23:10:12,630 - #43 (
INFO  23:10:12,630 - #20 size
INFO  23:10:12,631 - #33 <
INFO  23:10:12,631 - #20 x
INFO  23:10:12,631 - #35 &&
INFO  23:10:12,631 - #20 x
INFO  23:10:12,631 - #33 <
INFO  23:10:12,631 - #21 0
INFO  23:10:12,631 - #44 )
INFO  23:10:12,631 - #47 {
INFO  23:10:12,631 - #20 val
INFO  23:10:12,631 - #42 .
ERROR 23:10:12,631 - Oporavak od greske u definiciji formalnih parametara funkcije na liniji 36, koloni 3 za simbol "."!
ERROR 23:10:12,631 - 
Sintaksna greska na liniji 40, koloni 3 za simbol "."!
INFO  23:10:12,631 - #20 putn
INFO  23:10:12,632 - #43 (
INFO  23:10:12,632 - #20 val
INFO  23:10:12,632 - #42 .
INFO  23:10:12,632 - #20 getn
INFO  23:10:12,632 - #43 (
INFO  23:10:12,632 - #20 x
INFO  23:10:12,632 - #44 )
INFO  23:10:12,632 - #24 +
INFO  23:10:12,632 - #21 1
INFO  23:10:12,632 - #44 )
INFO  23:10:12,632 - #40 ;
INFO  23:10:12,632 - #48 }
INFO  23:10:12,632 - #14 read
INFO  23:10:12,633 - #43 (
INFO  23:10:12,633 - #20 x
INFO  23:10:12,633 - #44 )
INFO  23:10:12,633 - #40 ;
INFO  23:10:12,633 - #48 }
INFO  23:10:12,633 - #11 while
INFO  23:10:12,633 - #43 (
INFO  23:10:12,633 - #23 true
INFO  23:10:12,633 - #44 )
INFO  23:10:12,633 - #40 ;
INFO  23:10:12,633 - #13 print
INFO  23:10:12,633 - #43 (
INFO  23:10:12,633 - #20 x
INFO  23:10:12,633 - #24 +
INFO  23:10:12,634 - #21 0
INFO  23:10:12,634 - #49 ?
INFO  23:10:12,634 - #22 -
INFO  23:10:12,634 - #50 :
INFO  23:10:12,634 - #22 +
INFO  23:10:12,634 - #44 )
INFO  23:10:12,634 - #40 ;
INFO  23:10:12,634 - #48 }
INFO  23:10:12,634 - #48 }
ERROR 23:10:12,634 - Fatalna greska, parsiranje se ne moze nastaviti na liniji 46, koloni 1!
INFO  23:16:49,482 - Kompajliranje ulaznog fajla C:\Users\Anja\Desktop\PP1 projekat\workspace\MJCompiler\test\program.mj
INFO  23:16:49,532 - #2 program
INFO  23:16:49,532 - #20 p
INFO  23:16:49,532 - #7 const
INFO  23:16:49,533 - #20 int
INFO  23:16:49,533 - #20 size
INFO  23:16:49,533 - #37 =
INFO  23:16:49,533 - #21 10
INFO  23:16:49,533 - #40 ;
INFO  23:16:49,534 - #4 class
INFO  23:16:49,534 - #20 Table
INFO  23:16:49,534 - #47 {
INFO  23:16:49,534 - #20 int
INFO  23:16:49,534 - #20 pos
INFO  23:16:49,534 - #45 [
INFO  23:16:49,534 - #46 ]
INFO  23:16:49,534 - #41 ,
INFO  23:16:49,535 - #20 neg
INFO  23:16:49,535 - #45 [
INFO  23:16:49,535 - #46 ]
INFO  23:16:49,535 - #40 ;
INFO  23:16:49,535 - #47 {
INFO  23:16:49,535 - #16 void
INFO  23:16:49,535 - #20 putp
INFO  23:16:49,536 - #43 (
INFO  23:16:49,536 - #20 int
INFO  23:16:49,536 - #20 a
INFO  23:16:49,536 - #41 ,
INFO  23:16:49,536 - #20 int
INFO  23:16:49,536 - #20 idx
INFO  23:16:49,536 - #44 )
INFO  23:16:49,537 - #47 {
INFO  23:16:49,537 - #20 this
INFO  23:16:49,537 - #42 .
ERROR 23:16:49,537 - 
Sintaksna greska na liniji 7, koloni 36 za simbol "."!
INFO  23:16:49,537 - #20 pos
INFO  23:16:49,538 - #45 [
INFO  23:16:49,538 - #20 idx
INFO  23:16:49,538 - #46 ]
INFO  23:16:49,539 - #37 =
INFO  23:16:49,539 - #20 a
INFO  23:16:49,539 - #40 ;
INFO  23:16:49,539 - #48 }
INFO  23:16:49,539 - #16 void
INFO  23:16:49,539 - #20 putn
INFO  23:16:49,539 - #43 (
INFO  23:16:49,539 - #20 int
INFO  23:16:49,539 - #20 a
INFO  23:16:49,539 - #41 ,
INFO  23:16:49,539 - #20 int
INFO  23:16:49,539 - #20 idx
INFO  23:16:49,539 - #44 )
ERROR 23:16:49,539 - Oporavak od greske u definiciji formalnih parametara funkcije na liniji 7, koloni 36 za simbol "."!
INFO  23:16:49,540 - #47 {
INFO  23:16:49,540 - #20 this
INFO  23:16:49,540 - #42 .
ERROR 23:16:49,540 - 
Sintaksna greska na liniji 8, koloni 36 za simbol "."!
INFO  23:16:49,540 - #20 neg
INFO  23:16:49,540 - #45 [
INFO  23:16:49,540 - #20 idx
INFO  23:16:49,541 - #46 ]
INFO  23:16:49,541 - #37 =
INFO  23:16:49,541 - #20 a
INFO  23:16:49,541 - #40 ;
INFO  23:16:49,541 - #48 }
INFO  23:16:49,541 - #20 int
INFO  23:16:49,541 - #20 getp
INFO  23:16:49,541 - #43 (
INFO  23:16:49,541 - #20 int
INFO  23:16:49,541 - #20 idx
INFO  23:16:49,541 - #44 )
INFO  23:16:49,541 - #47 {
INFO  23:16:49,541 - #15 return
INFO  23:16:49,542 - #20 pos
ERROR 23:16:49,542 - Oporavak od greske u definiciji formalnih parametara funkcije na liniji 8, koloni 36 za simbol "."!
INFO  23:16:49,542 - #45 [
INFO  23:16:49,542 - #20 idx
INFO  23:16:49,542 - #46 ]
INFO  23:16:49,543 - #40 ;
INFO  23:16:49,543 - #48 }
INFO  23:16:49,543 - #20 int
INFO  23:16:49,544 - #20 getn
INFO  23:16:49,544 - #43 (
INFO  23:16:49,544 - #20 int
INFO  23:16:49,544 - #20 idx
INFO  23:16:49,544 - #44 )
INFO  23:16:49,544 - #47 {
INFO  23:16:49,544 - #15 return
INFO  23:16:49,544 - #20 neg
INFO  23:16:49,544 - #45 [
INFO  23:16:49,544 - #20 idx
INFO  23:16:49,544 - #46 ]
INFO  23:16:49,545 - #40 ;
INFO  23:16:49,545 - #48 }
INFO  23:16:49,545 - #48 }
INFO  23:16:49,545 - #48 }
INFO  23:16:49,545 - #20 Table
INFO  23:16:49,546 - #20 val
INFO  23:16:49,546 - #40 ;
INFO  23:16:49,546 - #47 {
INFO  23:16:49,546 - #16 void
INFO  23:16:49,546 - #20 f
INFO  23:16:49,546 - #43 (
INFO  23:16:49,547 - #20 char
INFO  23:16:49,547 - #20 ch
INFO  23:16:49,547 - #41 ,
INFO  23:16:49,547 - #20 int
INFO  23:16:49,547 - #20 a
INFO  23:16:49,547 - #41 ,
INFO  23:16:49,547 - #20 int
INFO  23:16:49,547 - #20 arg
INFO  23:16:49,547 - #44 )
INFO  23:16:49,547 - #20 int
INFO  23:16:49,547 - #20 x
INFO  23:16:49,547 - #40 ;
INFO  23:16:49,547 - #47 {
INFO  23:16:49,547 - #20 x
INFO  23:16:49,548 - #37 =
INFO  23:16:49,548 - #20 arg
INFO  23:16:49,548 - #40 ;
INFO  23:16:49,548 - #48 }
INFO  23:16:49,548 - #16 void
INFO  23:16:49,548 - #20 main
INFO  23:16:49,548 - #43 (
INFO  23:16:49,548 - #44 )
INFO  23:16:49,548 - #20 int
INFO  23:16:49,548 - #20 x
INFO  23:16:49,549 - #41 ,
INFO  23:16:49,549 - #20 i
INFO  23:16:49,549 - #40 ;
INFO  23:16:49,549 - #20 char
INFO  23:16:49,549 - #20 c
INFO  23:16:49,549 - #40 ;
INFO  23:16:49,549 - #47 {
INFO  23:16:49,549 - #20 val
INFO  23:16:49,549 - #37 =
INFO  23:16:49,549 - #12 new
INFO  23:16:49,549 - #20 Table
INFO  23:16:49,549 - #40 ;
INFO  23:16:49,549 - #20 val
INFO  23:16:49,549 - #42 .
ERROR 23:16:49,550 - 
Sintaksna greska na liniji 24, koloni 6 za simbol "."!
INFO  23:16:49,550 - #20 pos
INFO  23:16:49,550 - #37 =
INFO  23:16:49,550 - #12 new
INFO  23:16:49,550 - #20 int
INFO  23:16:49,550 - #45 [
INFO  23:16:49,550 - #20 size
INFO  23:16:49,550 - #46 ]
INFO  23:16:49,550 - #40 ;
INFO  23:16:49,553 - #20 val
INFO  23:16:49,553 - #42 .
INFO  23:16:49,553 - #20 neg
INFO  23:16:49,553 - #37 =
INFO  23:16:49,553 - #12 new
INFO  23:16:49,553 - #20 int
INFO  23:16:49,553 - #45 [
INFO  23:16:49,553 - #20 size
INFO  23:16:49,553 - #46 ]
INFO  23:16:49,553 - #40 ;
INFO  23:16:49,553 - #20 i
INFO  23:16:49,553 - #37 =
INFO  23:16:49,553 - #21 0
INFO  23:16:49,553 - #40 ;
INFO  23:16:49,553 - #10 do
INFO  23:16:49,553 - #47 {
INFO  23:16:49,553 - #20 val
INFO  23:16:49,553 - #42 .
INFO  23:16:49,553 - #20 putp
INFO  23:16:49,553 - #43 (
INFO  23:16:49,553 - #21 0
INFO  23:16:49,553 - #41 ,
INFO  23:16:49,553 - #20 i
INFO  23:16:49,554 - #44 )
INFO  23:16:49,554 - #40 ;
INFO  23:16:49,554 - #20 val
INFO  23:16:49,554 - #42 .
INFO  23:16:49,554 - #20 putn
INFO  23:16:49,554 - #43 (
INFO  23:16:49,554 - #21 0
INFO  23:16:49,554 - #41 ,
INFO  23:16:49,554 - #20 i
INFO  23:16:49,554 - #44 )
INFO  23:16:49,554 - #40 ;
INFO  23:16:49,554 - #20 i
INFO  23:16:49,554 - #38 ++
INFO  23:16:49,554 - #40 ;
INFO  23:16:49,554 - #48 }
INFO  23:16:49,554 - #11 while
INFO  23:16:49,554 - #43 (
INFO  23:16:49,554 - #20 i
INFO  23:16:49,554 - #33 <
INFO  23:16:49,555 - #20 size
INFO  23:16:49,555 - #44 )
INFO  23:16:49,555 - #40 ;
INFO  23:16:49,555 - #20 f
INFO  23:16:49,555 - #43 (
INFO  23:16:49,555 - #20 c
INFO  23:16:49,555 - #41 ,
INFO  23:16:49,555 - #20 x
INFO  23:16:49,555 - #41 ,
INFO  23:16:49,555 - #20 i
INFO  23:16:49,555 - #44 )
INFO  23:16:49,555 - #40 ;
INFO  23:16:49,555 - #14 read
INFO  23:16:49,555 - #43 (
INFO  23:16:49,555 - #20 x
INFO  23:16:49,555 - #44 )
INFO  23:16:49,555 - #40 ;
INFO  23:16:49,555 - #10 do
INFO  23:16:49,555 - #47 {
INFO  23:16:49,555 - #8 if
INFO  23:16:49,555 - #43 (
INFO  23:16:49,556 - #20 x
INFO  23:16:49,556 - #34 <=
INFO  23:16:49,556 - #21 0
INFO  23:16:49,556 - #44 )
INFO  23:16:49,556 - #3 break
INFO  23:16:49,556 - #40 ;
INFO  23:16:49,556 - #8 if
INFO  23:16:49,556 - #43 (
INFO  23:16:49,556 - #21 0
INFO  23:16:49,556 - #34 <=
INFO  23:16:49,556 - #20 x
INFO  23:16:49,556 - #35 &&
INFO  23:16:49,556 - #20 x
INFO  23:16:49,556 - #33 <
INFO  23:16:49,556 - #20 size
INFO  23:16:49,556 - #44 )
INFO  23:16:49,556 - #47 {
INFO  23:16:49,556 - #20 val
INFO  23:16:49,556 - #42 .
ERROR 23:16:49,556 - Oporavak od greske u definiciji formalnih parametara funkcije na liniji 24, koloni 6 za simbol "."!
ERROR 23:16:49,556 - 
Sintaksna greska na liniji 40, koloni 8 za simbol "."!
INFO  23:16:49,557 - #20 putp
INFO  23:16:49,557 - #43 (
INFO  23:16:49,557 - #20 val
INFO  23:16:49,557 - #42 .
INFO  23:16:49,557 - #20 getp
INFO  23:16:49,557 - #43 (
INFO  23:16:49,557 - #20 x
INFO  23:16:49,557 - #44 )
INFO  23:16:49,557 - #24 +
INFO  23:16:49,557 - #21 1
INFO  23:16:49,557 - #44 )
INFO  23:16:49,557 - #40 ;
INFO  23:16:49,557 - #48 }
INFO  23:16:49,557 - #6 else
INFO  23:16:49,558 - #8 if
INFO  23:16:49,558 - #43 (
INFO  23:16:49,558 - #20 size
INFO  23:16:49,558 - #33 <
INFO  23:16:49,558 - #20 x
INFO  23:16:49,558 - #35 &&
INFO  23:16:49,558 - #20 x
INFO  23:16:49,558 - #33 <
INFO  23:16:49,558 - #21 0
INFO  23:16:49,558 - #44 )
INFO  23:16:49,558 - #47 {
INFO  23:16:49,558 - #20 val
INFO  23:16:49,558 - #42 .
ERROR 23:16:49,559 - Oporavak od greske u definiciji formalnih parametara funkcije na liniji 40, koloni 8 za simbol "."!
ERROR 23:16:49,559 - 
Sintaksna greska na liniji 44, koloni 8 za simbol "."!
INFO  23:16:49,559 - #20 putn
INFO  23:16:49,559 - #43 (
INFO  23:16:49,559 - #20 val
INFO  23:16:49,559 - #42 .
INFO  23:16:49,559 - #20 getn
INFO  23:16:49,559 - #43 (
INFO  23:16:49,559 - #20 x
INFO  23:16:49,559 - #44 )
INFO  23:16:49,559 - #24 +
INFO  23:16:49,559 - #21 1
INFO  23:16:49,559 - #44 )
INFO  23:16:49,559 - #40 ;
INFO  23:16:49,559 - #48 }
INFO  23:16:49,560 - #14 read
INFO  23:16:49,560 - #43 (
INFO  23:16:49,560 - #20 x
INFO  23:16:49,560 - #44 )
INFO  23:16:49,560 - #40 ;
INFO  23:16:49,560 - #48 }
INFO  23:16:49,560 - #11 while
INFO  23:16:49,560 - #43 (
INFO  23:16:49,560 - #23 true
INFO  23:16:49,560 - #44 )
INFO  23:16:49,560 - #40 ;
INFO  23:16:49,560 - #13 print
INFO  23:16:49,560 - #43 (
INFO  23:16:49,560 - #20 x
INFO  23:16:49,560 - #24 +
INFO  23:16:49,560 - #21 0
INFO  23:16:49,560 - #49 ?
INFO  23:16:49,560 - #22 -
INFO  23:16:49,561 - #50 :
INFO  23:16:49,561 - #22 +
INFO  23:16:49,561 - #44 )
INFO  23:16:49,561 - #40 ;
INFO  23:16:49,561 - #48 }
INFO  23:16:49,561 - #48 }
ERROR 23:16:49,561 - Fatalna greska, parsiranje se ne moze nastaviti na liniji 50, koloni 2!
INFO  23:16:57,000 - Kompajliranje ulaznog fajla C:\Users\Anja\Desktop\PP1 projekat\workspace\MJCompiler\test\program.mj
INFO  23:16:57,045 - #2 program
INFO  23:16:57,045 - #20 p
INFO  23:16:57,045 - #7 const
INFO  23:16:57,046 - #20 int
INFO  23:16:57,046 - #20 size
INFO  23:16:57,047 - #37 =
INFO  23:16:57,047 - #21 10
INFO  23:16:57,047 - #40 ;
INFO  23:16:57,047 - #4 class
INFO  23:16:57,047 - #20 Table
INFO  23:16:57,047 - #47 {
INFO  23:16:57,048 - #20 int
INFO  23:16:57,048 - #20 pos
INFO  23:16:57,048 - #45 [
INFO  23:16:57,048 - #46 ]
INFO  23:16:57,048 - #41 ,
INFO  23:16:57,048 - #20 neg
INFO  23:16:57,048 - #45 [
INFO  23:16:57,048 - #46 ]
INFO  23:16:57,048 - #40 ;
INFO  23:16:57,048 - #47 {
INFO  23:16:57,048 - #16 void
INFO  23:16:57,049 - #20 putp
INFO  23:16:57,049 - #43 (
INFO  23:16:57,049 - #20 int
INFO  23:16:57,049 - #20 a
INFO  23:16:57,049 - #41 ,
INFO  23:16:57,049 - #20 int
INFO  23:16:57,049 - #20 idx
INFO  23:16:57,049 - #44 )
INFO  23:16:57,049 - #47 {
INFO  23:16:57,049 - #20 this
INFO  23:16:57,050 - #42 .
ERROR 23:16:57,050 - 
Sintaksna greska na liniji 7, koloni 36 za simbol "."!
INFO  23:16:57,050 - #20 pos
INFO  23:16:57,050 - #45 [
INFO  23:16:57,050 - #20 idx
INFO  23:16:57,051 - #46 ]
INFO  23:16:57,051 - #37 =
INFO  23:16:57,051 - #20 a
INFO  23:16:57,051 - #40 ;
INFO  23:16:57,051 - #48 }
INFO  23:16:57,051 - #16 void
INFO  23:16:57,051 - #20 putn
INFO  23:16:57,051 - #43 (
INFO  23:16:57,051 - #20 int
INFO  23:16:57,051 - #20 a
INFO  23:16:57,052 - #41 ,
INFO  23:16:57,052 - #20 int
INFO  23:16:57,052 - #20 idx
INFO  23:16:57,052 - #44 )
ERROR 23:16:57,052 - Oporavak od greske u definiciji formalnih parametara funkcije na liniji 7, koloni 36 za simbol "."!
INFO  23:16:57,052 - #47 {
INFO  23:16:57,052 - #20 this
INFO  23:16:57,052 - #42 .
ERROR 23:16:57,053 - 
Sintaksna greska na liniji 8, koloni 36 za simbol "."!
INFO  23:16:57,053 - #20 neg
INFO  23:16:57,053 - #45 [
INFO  23:16:57,053 - #20 idx
INFO  23:16:57,053 - #46 ]
INFO  23:16:57,053 - #37 =
INFO  23:16:57,053 - #20 a
INFO  23:16:57,053 - #40 ;
INFO  23:16:57,053 - #48 }
INFO  23:16:57,053 - #20 int
INFO  23:16:57,053 - #20 getp
INFO  23:16:57,053 - #43 (
INFO  23:16:57,053 - #20 int
INFO  23:16:57,053 - #20 idx
INFO  23:16:57,053 - #44 )
INFO  23:16:57,053 - #47 {
INFO  23:16:57,054 - #15 return
INFO  23:16:57,054 - #20 pos
ERROR 23:16:57,054 - Oporavak od greske u definiciji formalnih parametara funkcije na liniji 8, koloni 36 za simbol "."!
INFO  23:16:57,054 - #45 [
INFO  23:16:57,054 - #20 idx
INFO  23:16:57,054 - #46 ]
INFO  23:16:57,054 - #40 ;
INFO  23:16:57,055 - #48 }
INFO  23:16:57,055 - #20 int
INFO  23:16:57,055 - #20 getn
INFO  23:16:57,055 - #43 (
INFO  23:16:57,056 - #20 int
INFO  23:16:57,056 - #20 idx
INFO  23:16:57,056 - #44 )
INFO  23:16:57,056 - #47 {
INFO  23:16:57,056 - #15 return
INFO  23:16:57,056 - #20 neg
INFO  23:16:57,056 - #45 [
INFO  23:16:57,056 - #20 idx
INFO  23:16:57,056 - #46 ]
INFO  23:16:57,056 - #40 ;
INFO  23:16:57,056 - #48 }
INFO  23:16:57,056 - #48 }
INFO  23:16:57,057 - #48 }
INFO  23:16:57,057 - #20 Table
INFO  23:16:57,057 - #20 val
INFO  23:16:57,057 - #40 ;
INFO  23:16:57,058 - #47 {
INFO  23:16:57,058 - #16 void
INFO  23:16:57,058 - #20 f
INFO  23:16:57,058 - #43 (
INFO  23:16:57,058 - #20 char
INFO  23:16:57,058 - #20 ch
INFO  23:16:57,058 - #41 ,
INFO  23:16:57,058 - #20 int
INFO  23:16:57,059 - #20 a
INFO  23:16:57,059 - #41 ,
INFO  23:16:57,059 - #20 int
INFO  23:16:57,059 - #20 arg
INFO  23:16:57,059 - #44 )
INFO  23:16:57,059 - #20 int
INFO  23:16:57,059 - #20 x
INFO  23:16:57,059 - #40 ;
INFO  23:16:57,059 - #47 {
INFO  23:16:57,059 - #20 x
INFO  23:16:57,059 - #37 =
INFO  23:16:57,059 - #20 arg
INFO  23:16:57,059 - #40 ;
INFO  23:16:57,060 - #48 }
INFO  23:16:57,060 - #16 void
INFO  23:16:57,060 - #20 main
INFO  23:16:57,060 - #43 (
INFO  23:16:57,060 - #44 )
INFO  23:16:57,060 - #20 int
INFO  23:16:57,060 - #20 x
INFO  23:16:57,060 - #41 ,
INFO  23:16:57,060 - #20 i
INFO  23:16:57,060 - #40 ;
INFO  23:16:57,060 - #20 char
INFO  23:16:57,061 - #20 c
INFO  23:16:57,061 - #40 ;
INFO  23:16:57,061 - #47 {
INFO  23:16:57,061 - #20 val
INFO  23:16:57,061 - #37 =
INFO  23:16:57,061 - #12 new
INFO  23:16:57,061 - #20 Table
INFO  23:16:57,061 - #40 ;
INFO  23:16:57,061 - #20 val
INFO  23:16:57,061 - #42 .
ERROR 23:16:57,061 - 
Sintaksna greska na liniji 24, koloni 6 za simbol "."!
INFO  23:16:57,061 - #20 pos
INFO  23:16:57,061 - #37 =
INFO  23:16:57,061 - #12 new
INFO  23:16:57,061 - #20 int
INFO  23:16:57,062 - #45 [
INFO  23:16:57,062 - #20 size
INFO  23:16:57,062 - #46 ]
INFO  23:16:57,062 - #40 ;
INFO  23:16:57,064 - #20 val
INFO  23:16:57,064 - #42 .
INFO  23:16:57,064 - #20 neg
INFO  23:16:57,064 - #37 =
INFO  23:16:57,064 - #12 new
INFO  23:16:57,064 - #20 int
INFO  23:16:57,064 - #45 [
INFO  23:16:57,064 - #20 size
INFO  23:16:57,064 - #46 ]
INFO  23:16:57,065 - #40 ;
INFO  23:16:57,065 - #20 i
INFO  23:16:57,065 - #37 =
INFO  23:16:57,065 - #21 0
INFO  23:16:57,065 - #40 ;
INFO  23:16:57,065 - #10 do
INFO  23:16:57,065 - #47 {
INFO  23:16:57,065 - #20 val
INFO  23:16:57,065 - #42 .
INFO  23:16:57,065 - #20 putp
INFO  23:16:57,065 - #43 (
INFO  23:16:57,065 - #21 0
INFO  23:16:57,065 - #41 ,
INFO  23:16:57,065 - #20 i
INFO  23:16:57,065 - #44 )
INFO  23:16:57,065 - #40 ;
INFO  23:16:57,065 - #20 val
INFO  23:16:57,065 - #42 .
INFO  23:16:57,065 - #20 putn
INFO  23:16:57,065 - #43 (
INFO  23:16:57,065 - #21 0
INFO  23:16:57,065 - #41 ,
INFO  23:16:57,065 - #20 i
INFO  23:16:57,065 - #44 )
INFO  23:16:57,065 - #40 ;
INFO  23:16:57,065 - #20 i
INFO  23:16:57,066 - #38 ++
INFO  23:16:57,066 - #40 ;
INFO  23:16:57,066 - #48 }
INFO  23:16:57,066 - #11 while
INFO  23:16:57,066 - #43 (
INFO  23:16:57,066 - #20 i
INFO  23:16:57,066 - #33 <
INFO  23:16:57,067 - #20 size
INFO  23:16:57,067 - #44 )
INFO  23:16:57,067 - #40 ;
INFO  23:16:57,067 - #20 f
INFO  23:16:57,067 - #43 (
INFO  23:16:57,067 - #20 c
INFO  23:16:57,067 - #41 ,
INFO  23:16:57,067 - #20 x
INFO  23:16:57,067 - #41 ,
INFO  23:16:57,067 - #20 i
INFO  23:16:57,067 - #44 )
INFO  23:16:57,067 - #40 ;
INFO  23:16:57,067 - #14 read
INFO  23:16:57,067 - #43 (
INFO  23:16:57,067 - #20 x
INFO  23:16:57,067 - #44 )
INFO  23:16:57,067 - #40 ;
INFO  23:16:57,068 - #10 do
INFO  23:16:57,068 - #47 {
INFO  23:16:57,068 - #8 if
INFO  23:16:57,068 - #43 (
INFO  23:16:57,068 - #20 x
INFO  23:16:57,068 - #34 <=
INFO  23:16:57,068 - #21 0
INFO  23:16:57,068 - #44 )
INFO  23:16:57,068 - #3 break
INFO  23:16:57,068 - #40 ;
INFO  23:16:57,068 - #8 if
INFO  23:16:57,068 - #43 (
INFO  23:16:57,068 - #21 0
INFO  23:16:57,068 - #34 <=
INFO  23:16:57,068 - #20 x
INFO  23:16:57,068 - #35 &&
INFO  23:16:57,068 - #20 x
INFO  23:16:57,068 - #33 <
INFO  23:16:57,068 - #20 size
INFO  23:16:57,068 - #44 )
INFO  23:16:57,068 - #47 {
INFO  23:16:57,068 - #20 val
INFO  23:16:57,068 - #42 .
ERROR 23:16:57,068 - Oporavak od greske u definiciji formalnih parametara funkcije na liniji 24, koloni 6 za simbol "."!
ERROR 23:16:57,068 - 
Sintaksna greska na liniji 40, koloni 8 za simbol "."!
INFO  23:16:57,068 - #20 putp
INFO  23:16:57,068 - #43 (
INFO  23:16:57,069 - #20 val
INFO  23:16:57,069 - #42 .
INFO  23:16:57,069 - #20 getp
INFO  23:16:57,069 - #43 (
INFO  23:16:57,069 - #20 x
INFO  23:16:57,069 - #44 )
INFO  23:16:57,069 - #24 +
INFO  23:16:57,069 - #21 1
INFO  23:16:57,069 - #44 )
INFO  23:16:57,069 - #40 ;
INFO  23:16:57,069 - #48 }
INFO  23:16:57,069 - #6 else
INFO  23:16:57,069 - #8 if
INFO  23:16:57,069 - #43 (
INFO  23:16:57,069 - #20 size
INFO  23:16:57,069 - #33 <
INFO  23:16:57,069 - #20 x
INFO  23:16:57,070 - #35 &&
INFO  23:16:57,070 - #20 x
INFO  23:16:57,070 - #33 <
INFO  23:16:57,070 - #21 0
INFO  23:16:57,070 - #44 )
INFO  23:16:57,070 - #47 {
INFO  23:16:57,070 - #20 val
INFO  23:16:57,070 - #42 .
ERROR 23:16:57,070 - Oporavak od greske u definiciji formalnih parametara funkcije na liniji 40, koloni 8 za simbol "."!
ERROR 23:16:57,070 - 
Sintaksna greska na liniji 44, koloni 8 za simbol "."!
INFO  23:16:57,070 - #20 putn
INFO  23:16:57,070 - #43 (
INFO  23:16:57,070 - #20 val
INFO  23:16:57,070 - #42 .
INFO  23:16:57,070 - #20 getn
INFO  23:16:57,071 - #43 (
INFO  23:16:57,071 - #20 x
INFO  23:16:57,071 - #44 )
INFO  23:16:57,071 - #24 +
INFO  23:16:57,071 - #21 1
INFO  23:16:57,071 - #44 )
INFO  23:16:57,071 - #40 ;
INFO  23:16:57,071 - #48 }
INFO  23:16:57,071 - #14 read
INFO  23:16:57,071 - #43 (
INFO  23:16:57,071 - #20 x
INFO  23:16:57,071 - #44 )
INFO  23:16:57,071 - #40 ;
INFO  23:16:57,071 - #48 }
INFO  23:16:57,071 - #11 while
INFO  23:16:57,071 - #43 (
INFO  23:16:57,071 - #23 true
INFO  23:16:57,072 - #44 )
INFO  23:16:57,072 - #40 ;
INFO  23:16:57,072 - #13 print
INFO  23:16:57,072 - #43 (
INFO  23:16:57,072 - #20 x
INFO  23:16:57,072 - #49 ?
INFO  23:16:57,072 - #22 -
INFO  23:16:57,072 - #50 :
INFO  23:16:57,072 - #22 +
INFO  23:16:57,072 - #44 )
INFO  23:16:57,072 - #40 ;
INFO  23:16:57,072 - #48 }
INFO  23:16:57,072 - #48 }
ERROR 23:16:57,072 - Fatalna greska, parsiranje se ne moze nastaviti na liniji 50, koloni 2!
INFO  23:17:01,613 - Kompajliranje ulaznog fajla C:\Users\Anja\Desktop\PP1 projekat\workspace\MJCompiler\test\program.mj
INFO  23:17:01,681 - #2 program
INFO  23:17:01,682 - #20 p
INFO  23:17:01,682 - #7 const
INFO  23:17:01,683 - #20 int
INFO  23:17:01,683 - #20 size
INFO  23:17:01,684 - #37 =
INFO  23:17:01,684 - #21 10
INFO  23:17:01,684 - #40 ;
INFO  23:17:01,685 - #4 class
INFO  23:17:01,685 - #20 Table
INFO  23:17:01,685 - #47 {
INFO  23:17:01,686 - #20 int
INFO  23:17:01,686 - #20 pos
INFO  23:17:01,686 - #45 [
INFO  23:17:01,686 - #46 ]
INFO  23:17:01,686 - #41 ,
INFO  23:17:01,686 - #20 neg
INFO  23:17:01,686 - #45 [
INFO  23:17:01,686 - #46 ]
INFO  23:17:01,686 - #40 ;
INFO  23:17:01,687 - #47 {
INFO  23:17:01,687 - #16 void
INFO  23:17:01,687 - #20 putp
INFO  23:17:01,687 - #43 (
INFO  23:17:01,687 - #20 int
INFO  23:17:01,687 - #20 a
INFO  23:17:01,688 - #41 ,
INFO  23:17:01,688 - #20 int
INFO  23:17:01,689 - #20 idx
INFO  23:17:01,689 - #44 )
INFO  23:17:01,689 - #47 {
INFO  23:17:01,689 - #20 this
INFO  23:17:01,690 - #42 .
ERROR 23:17:01,690 - 
Sintaksna greska na liniji 7, koloni 36 za simbol "."!
INFO  23:17:01,690 - #20 pos
INFO  23:17:01,690 - #45 [
INFO  23:17:01,690 - #20 idx
INFO  23:17:01,691 - #46 ]
INFO  23:17:01,691 - #37 =
INFO  23:17:01,692 - #20 a
INFO  23:17:01,692 - #40 ;
INFO  23:17:01,692 - #48 }
INFO  23:17:01,692 - #16 void
INFO  23:17:01,692 - #20 putn
INFO  23:17:01,692 - #43 (
INFO  23:17:01,692 - #20 int
INFO  23:17:01,692 - #20 a
INFO  23:17:01,692 - #41 ,
INFO  23:17:01,692 - #20 int
INFO  23:17:01,692 - #20 idx
INFO  23:17:01,692 - #44 )
ERROR 23:17:01,693 - Oporavak od greske u definiciji formalnih parametara funkcije na liniji 7, koloni 36 za simbol "."!
INFO  23:17:01,693 - #47 {
INFO  23:17:01,693 - #20 this
INFO  23:17:01,693 - #42 .
ERROR 23:17:01,693 - 
Sintaksna greska na liniji 8, koloni 36 za simbol "."!
INFO  23:17:01,693 - #20 neg
INFO  23:17:01,694 - #45 [
INFO  23:17:01,694 - #20 idx
INFO  23:17:01,694 - #46 ]
INFO  23:17:01,694 - #37 =
INFO  23:17:01,694 - #20 a
INFO  23:17:01,694 - #40 ;
INFO  23:17:01,694 - #48 }
INFO  23:17:01,694 - #20 int
INFO  23:17:01,694 - #20 getp
INFO  23:17:01,694 - #43 (
INFO  23:17:01,695 - #20 int
INFO  23:17:01,695 - #20 idx
INFO  23:17:01,695 - #44 )
INFO  23:17:01,695 - #47 {
INFO  23:17:01,695 - #15 return
INFO  23:17:01,695 - #20 pos
ERROR 23:17:01,695 - Oporavak od greske u definiciji formalnih parametara funkcije na liniji 8, koloni 36 za simbol "."!
INFO  23:17:01,695 - #45 [
INFO  23:17:01,695 - #20 idx
INFO  23:17:01,695 - #46 ]
INFO  23:17:01,696 - #40 ;
INFO  23:17:01,696 - #48 }
INFO  23:17:01,697 - #20 int
INFO  23:17:01,697 - #20 getn
INFO  23:17:01,697 - #43 (
INFO  23:17:01,697 - #20 int
INFO  23:17:01,698 - #20 idx
INFO  23:17:01,698 - #44 )
INFO  23:17:01,698 - #47 {
INFO  23:17:01,698 - #15 return
INFO  23:17:01,698 - #20 neg
INFO  23:17:01,698 - #45 [
INFO  23:17:01,698 - #20 idx
INFO  23:17:01,698 - #46 ]
INFO  23:17:01,698 - #40 ;
INFO  23:17:01,698 - #48 }
INFO  23:17:01,699 - #48 }
INFO  23:17:01,699 - #48 }
INFO  23:17:01,699 - #20 Table
INFO  23:17:01,699 - #20 val
INFO  23:17:01,700 - #40 ;
INFO  23:17:01,700 - #47 {
INFO  23:17:01,700 - #16 void
INFO  23:17:01,700 - #20 f
INFO  23:17:01,700 - #43 (
INFO  23:17:01,701 - #20 char
INFO  23:17:01,701 - #20 ch
INFO  23:17:01,701 - #41 ,
INFO  23:17:01,701 - #20 int
INFO  23:17:01,701 - #20 a
INFO  23:17:01,701 - #41 ,
INFO  23:17:01,701 - #20 int
INFO  23:17:01,701 - #20 arg
INFO  23:17:01,701 - #44 )
INFO  23:17:01,701 - #20 int
INFO  23:17:01,701 - #20 x
INFO  23:17:01,701 - #40 ;
INFO  23:17:01,702 - #47 {
INFO  23:17:01,702 - #20 x
INFO  23:17:01,702 - #37 =
INFO  23:17:01,702 - #20 arg
INFO  23:17:01,702 - #40 ;
INFO  23:17:01,702 - #48 }
INFO  23:17:01,702 - #16 void
INFO  23:17:01,703 - #20 main
INFO  23:17:01,703 - #43 (
INFO  23:17:01,703 - #44 )
INFO  23:17:01,703 - #20 int
INFO  23:17:01,703 - #20 x
INFO  23:17:01,703 - #41 ,
INFO  23:17:01,703 - #20 i
INFO  23:17:01,703 - #40 ;
INFO  23:17:01,703 - #20 char
INFO  23:17:01,703 - #20 c
INFO  23:17:01,704 - #40 ;
INFO  23:17:01,704 - #47 {
INFO  23:17:01,704 - #20 val
INFO  23:17:01,704 - #37 =
INFO  23:17:01,704 - #12 new
INFO  23:17:01,704 - #20 Table
INFO  23:17:01,704 - #40 ;
INFO  23:17:01,704 - #20 val
INFO  23:17:01,704 - #42 .
ERROR 23:17:01,704 - 
Sintaksna greska na liniji 24, koloni 6 za simbol "."!
INFO  23:17:01,705 - #20 pos
INFO  23:17:01,705 - #37 =
INFO  23:17:01,705 - #12 new
INFO  23:17:01,705 - #20 int
INFO  23:17:01,705 - #45 [
INFO  23:17:01,705 - #20 size
INFO  23:17:01,705 - #46 ]
INFO  23:17:01,705 - #40 ;
INFO  23:17:01,708 - #20 val
INFO  23:17:01,708 - #42 .
INFO  23:17:01,709 - #20 neg
INFO  23:17:01,709 - #37 =
INFO  23:17:01,709 - #12 new
INFO  23:17:01,709 - #20 int
INFO  23:17:01,709 - #45 [
INFO  23:17:01,709 - #20 size
INFO  23:17:01,709 - #46 ]
INFO  23:17:01,709 - #40 ;
INFO  23:17:01,709 - #20 i
INFO  23:17:01,709 - #37 =
INFO  23:17:01,709 - #21 0
INFO  23:17:01,709 - #40 ;
INFO  23:17:01,709 - #10 do
INFO  23:17:01,709 - #47 {
INFO  23:17:01,709 - #20 val
INFO  23:17:01,710 - #42 .
INFO  23:17:01,710 - #20 putp
INFO  23:17:01,710 - #43 (
INFO  23:17:01,710 - #21 0
INFO  23:17:01,710 - #41 ,
INFO  23:17:01,710 - #20 i
INFO  23:17:01,710 - #44 )
INFO  23:17:01,710 - #40 ;
INFO  23:17:01,710 - #20 val
INFO  23:17:01,710 - #42 .
INFO  23:17:01,710 - #20 putn
INFO  23:17:01,710 - #43 (
INFO  23:17:01,710 - #21 0
INFO  23:17:01,710 - #41 ,
INFO  23:17:01,710 - #20 i
INFO  23:17:01,710 - #44 )
INFO  23:17:01,710 - #40 ;
INFO  23:17:01,711 - #20 i
INFO  23:17:01,711 - #38 ++
INFO  23:17:01,711 - #40 ;
INFO  23:17:01,711 - #48 }
INFO  23:17:01,711 - #11 while
INFO  23:17:01,711 - #43 (
INFO  23:17:01,711 - #20 i
INFO  23:17:01,711 - #33 <
INFO  23:17:01,711 - #20 size
INFO  23:17:01,711 - #44 )
INFO  23:17:01,711 - #40 ;
INFO  23:17:01,711 - #20 f
INFO  23:17:01,711 - #43 (
INFO  23:17:01,711 - #20 c
INFO  23:17:01,711 - #41 ,
INFO  23:17:01,711 - #20 x
INFO  23:17:01,711 - #41 ,
INFO  23:17:01,711 - #20 i
INFO  23:17:01,711 - #44 )
INFO  23:17:01,711 - #40 ;
INFO  23:17:01,712 - #14 read
INFO  23:17:01,712 - #43 (
INFO  23:17:01,712 - #20 x
INFO  23:17:01,712 - #44 )
INFO  23:17:01,712 - #40 ;
INFO  23:17:01,712 - #10 do
INFO  23:17:01,712 - #47 {
INFO  23:17:01,712 - #8 if
INFO  23:17:01,712 - #43 (
INFO  23:17:01,712 - #20 x
INFO  23:17:01,712 - #34 <=
INFO  23:17:01,712 - #21 0
INFO  23:17:01,712 - #44 )
INFO  23:17:01,712 - #3 break
INFO  23:17:01,712 - #40 ;
INFO  23:17:01,712 - #8 if
INFO  23:17:01,712 - #43 (
INFO  23:17:01,712 - #21 0
INFO  23:17:01,712 - #34 <=
INFO  23:17:01,712 - #20 x
INFO  23:17:01,712 - #35 &&
INFO  23:17:01,712 - #20 x
INFO  23:17:01,712 - #33 <
INFO  23:17:01,712 - #20 size
INFO  23:17:01,712 - #44 )
INFO  23:17:01,713 - #47 {
INFO  23:17:01,713 - #20 val
INFO  23:17:01,713 - #42 .
ERROR 23:17:01,713 - Oporavak od greske u definiciji formalnih parametara funkcije na liniji 24, koloni 6 za simbol "."!
ERROR 23:17:01,713 - 
Sintaksna greska na liniji 40, koloni 8 za simbol "."!
INFO  23:17:01,713 - #20 putp
INFO  23:17:01,713 - #43 (
INFO  23:17:01,713 - #20 val
INFO  23:17:01,713 - #42 .
INFO  23:17:01,713 - #20 getp
INFO  23:17:01,713 - #43 (
INFO  23:17:01,713 - #20 x
INFO  23:17:01,713 - #44 )
INFO  23:17:01,713 - #24 +
INFO  23:17:01,713 - #21 1
INFO  23:17:01,713 - #44 )
INFO  23:17:01,713 - #40 ;
INFO  23:17:01,713 - #48 }
INFO  23:17:01,713 - #6 else
INFO  23:17:01,713 - #8 if
INFO  23:17:01,713 - #43 (
INFO  23:17:01,714 - #20 size
INFO  23:17:01,714 - #33 <
INFO  23:17:01,714 - #20 x
INFO  23:17:01,714 - #35 &&
INFO  23:17:01,714 - #20 x
INFO  23:17:01,714 - #33 <
INFO  23:17:01,714 - #21 0
INFO  23:17:01,715 - #44 )
INFO  23:17:01,715 - #47 {
INFO  23:17:01,715 - #20 val
INFO  23:17:01,715 - #42 .
ERROR 23:17:01,715 - Oporavak od greske u definiciji formalnih parametara funkcije na liniji 40, koloni 8 za simbol "."!
ERROR 23:17:01,715 - 
Sintaksna greska na liniji 44, koloni 8 za simbol "."!
INFO  23:17:01,715 - #20 putn
INFO  23:17:01,715 - #43 (
INFO  23:17:01,715 - #20 val
INFO  23:17:01,715 - #42 .
INFO  23:17:01,715 - #20 getn
INFO  23:17:01,715 - #43 (
INFO  23:17:01,716 - #20 x
INFO  23:17:01,716 - #44 )
INFO  23:17:01,716 - #24 +
INFO  23:17:01,716 - #21 1
INFO  23:17:01,716 - #44 )
INFO  23:17:01,716 - #40 ;
INFO  23:17:01,716 - #48 }
INFO  23:17:01,716 - #14 read
INFO  23:17:01,717 - #43 (
INFO  23:17:01,717 - #20 x
INFO  23:17:01,717 - #44 )
INFO  23:17:01,717 - #40 ;
INFO  23:17:01,717 - #48 }
INFO  23:17:01,717 - #11 while
INFO  23:17:01,717 - #43 (
INFO  23:17:01,717 - #23 true
INFO  23:17:01,718 - #44 )
INFO  23:17:01,718 - #40 ;
INFO  23:17:01,718 - #13 print
INFO  23:17:01,718 - #43 (
INFO  23:17:01,718 - #20 x
INFO  23:17:01,718 - #26 *
INFO  23:17:01,718 - #21 0
INFO  23:17:01,718 - #49 ?
INFO  23:17:01,718 - #22 -
INFO  23:17:01,718 - #50 :
INFO  23:17:01,719 - #22 +
INFO  23:17:01,719 - #44 )
INFO  23:17:01,719 - #40 ;
INFO  23:17:01,719 - #48 }
INFO  23:17:01,719 - #48 }
ERROR 23:17:01,719 - Fatalna greska, parsiranje se ne moze nastaviti na liniji 50, koloni 2!
INFO  23:17:08,499 - Kompajliranje ulaznog fajla C:\Users\Anja\Desktop\PP1 projekat\workspace\MJCompiler\test\program.mj
INFO  23:17:08,566 - #2 program
INFO  23:17:08,566 - #20 p
INFO  23:17:08,566 - #7 const
INFO  23:17:08,569 - #20 int
INFO  23:17:08,569 - #20 size
INFO  23:17:08,570 - #37 =
INFO  23:17:08,570 - #21 10
INFO  23:17:08,570 - #40 ;
INFO  23:17:08,572 - #4 class
INFO  23:17:08,572 - #20 Table
INFO  23:17:08,572 - #47 {
INFO  23:17:08,572 - #20 int
INFO  23:17:08,572 - #20 pos
INFO  23:17:08,573 - #45 [
INFO  23:17:08,573 - #46 ]
INFO  23:17:08,573 - #41 ,
INFO  23:17:08,574 - #20 neg
INFO  23:17:08,574 - #45 [
INFO  23:17:08,574 - #46 ]
INFO  23:17:08,574 - #40 ;
INFO  23:17:08,575 - #47 {
INFO  23:17:08,575 - #16 void
INFO  23:17:08,576 - #20 putp
INFO  23:17:08,576 - #43 (
INFO  23:17:08,576 - #20 int
INFO  23:17:08,577 - #20 a
INFO  23:17:08,577 - #41 ,
INFO  23:17:08,577 - #20 int
INFO  23:17:08,577 - #20 idx
INFO  23:17:08,577 - #44 )
INFO  23:17:08,578 - #47 {
INFO  23:17:08,578 - #20 this
INFO  23:17:08,578 - #42 .
ERROR 23:17:08,578 - 
Sintaksna greska na liniji 7, koloni 36 za simbol "."!
INFO  23:17:08,579 - #20 pos
INFO  23:17:08,579 - #45 [
INFO  23:17:08,579 - #20 idx
INFO  23:17:08,580 - #46 ]
INFO  23:17:08,580 - #37 =
INFO  23:17:08,581 - #20 a
INFO  23:17:08,581 - #40 ;
INFO  23:17:08,581 - #48 }
INFO  23:17:08,582 - #16 void
INFO  23:17:08,582 - #20 putn
INFO  23:17:08,582 - #43 (
INFO  23:17:08,582 - #20 int
INFO  23:17:08,583 - #20 a
INFO  23:17:08,583 - #41 ,
INFO  23:17:08,583 - #20 int
INFO  23:17:08,583 - #20 idx
INFO  23:17:08,583 - #44 )
ERROR 23:17:08,583 - Oporavak od greske u definiciji formalnih parametara funkcije na liniji 7, koloni 36 za simbol "."!
INFO  23:17:08,584 - #47 {
INFO  23:17:08,584 - #20 this
INFO  23:17:08,584 - #42 .
ERROR 23:17:08,585 - 
Sintaksna greska na liniji 8, koloni 36 za simbol "."!
INFO  23:17:08,585 - #20 neg
INFO  23:17:08,585 - #45 [
INFO  23:17:08,585 - #20 idx
INFO  23:17:08,585 - #46 ]
INFO  23:17:08,588 - #37 =
INFO  23:17:08,588 - #20 a
INFO  23:17:08,588 - #40 ;
INFO  23:17:08,588 - #48 }
INFO  23:17:08,588 - #20 int
INFO  23:17:08,589 - #20 getp
INFO  23:17:08,589 - #43 (
INFO  23:17:08,589 - #20 int
INFO  23:17:08,589 - #20 idx
INFO  23:17:08,589 - #44 )
INFO  23:17:08,589 - #47 {
INFO  23:17:08,590 - #15 return
INFO  23:17:08,590 - #20 pos
ERROR 23:17:08,591 - Oporavak od greske u definiciji formalnih parametara funkcije na liniji 8, koloni 36 za simbol "."!
INFO  23:17:08,591 - #45 [
INFO  23:17:08,591 - #20 idx
INFO  23:17:08,591 - #46 ]
INFO  23:17:08,593 - #40 ;
INFO  23:17:08,593 - #48 }
INFO  23:17:08,594 - #20 int
INFO  23:17:08,595 - #20 getn
INFO  23:17:08,595 - #43 (
INFO  23:17:08,595 - #20 int
INFO  23:17:08,596 - #20 idx
INFO  23:17:08,596 - #44 )
INFO  23:17:08,596 - #47 {
INFO  23:17:08,596 - #15 return
INFO  23:17:08,596 - #20 neg
INFO  23:17:08,596 - #45 [
INFO  23:17:08,596 - #20 idx
INFO  23:17:08,596 - #46 ]
INFO  23:17:08,596 - #40 ;
INFO  23:17:08,597 - #48 }
INFO  23:17:08,597 - #48 }
INFO  23:17:08,597 - #48 }
INFO  23:17:08,598 - #20 Table
INFO  23:17:08,598 - #20 val
INFO  23:17:08,598 - #40 ;
INFO  23:17:08,599 - #47 {
INFO  23:17:08,599 - #16 void
INFO  23:17:08,599 - #20 f
INFO  23:17:08,599 - #43 (
INFO  23:17:08,599 - #20 char
INFO  23:17:08,599 - #20 ch
INFO  23:17:08,599 - #41 ,
INFO  23:17:08,599 - #20 int
INFO  23:17:08,599 - #20 a
INFO  23:17:08,600 - #41 ,
INFO  23:17:08,600 - #20 int
INFO  23:17:08,600 - #20 arg
INFO  23:17:08,600 - #44 )
INFO  23:17:08,600 - #20 int
INFO  23:17:08,600 - #20 x
INFO  23:17:08,600 - #40 ;
INFO  23:17:08,600 - #47 {
INFO  23:17:08,601 - #20 x
INFO  23:17:08,601 - #37 =
INFO  23:17:08,601 - #20 arg
INFO  23:17:08,601 - #40 ;
INFO  23:17:08,601 - #48 }
INFO  23:17:08,601 - #16 void
INFO  23:17:08,602 - #20 main
INFO  23:17:08,603 - #43 (
INFO  23:17:08,603 - #44 )
INFO  23:17:08,603 - #20 int
INFO  23:17:08,603 - #20 x
INFO  23:17:08,603 - #41 ,
INFO  23:17:08,603 - #20 i
INFO  23:17:08,603 - #40 ;
INFO  23:17:08,603 - #20 char
INFO  23:17:08,604 - #20 c
INFO  23:17:08,604 - #40 ;
INFO  23:17:08,604 - #47 {
INFO  23:17:08,604 - #20 val
INFO  23:17:08,604 - #37 =
INFO  23:17:08,604 - #12 new
INFO  23:17:08,604 - #20 Table
INFO  23:17:08,604 - #40 ;
INFO  23:17:08,605 - #20 val
INFO  23:17:08,605 - #42 .
ERROR 23:17:08,605 - 
Sintaksna greska na liniji 24, koloni 6 za simbol "."!
INFO  23:17:08,605 - #20 pos
INFO  23:17:08,605 - #37 =
INFO  23:17:08,605 - #12 new
INFO  23:17:08,605 - #20 int
INFO  23:17:08,605 - #45 [
INFO  23:17:08,605 - #20 size
INFO  23:17:08,605 - #46 ]
INFO  23:17:08,605 - #40 ;
INFO  23:17:08,609 - #20 val
INFO  23:17:08,609 - #42 .
INFO  23:17:08,609 - #20 neg
INFO  23:17:08,609 - #37 =
INFO  23:17:08,609 - #12 new
INFO  23:17:08,610 - #20 int
INFO  23:17:08,610 - #45 [
INFO  23:17:08,610 - #20 size
INFO  23:17:08,610 - #46 ]
INFO  23:17:08,610 - #40 ;
INFO  23:17:08,610 - #20 i
INFO  23:17:08,610 - #37 =
INFO  23:17:08,610 - #21 0
INFO  23:17:08,610 - #40 ;
INFO  23:17:08,610 - #10 do
INFO  23:17:08,610 - #47 {
INFO  23:17:08,610 - #20 val
INFO  23:17:08,611 - #42 .
INFO  23:17:08,611 - #20 putp
INFO  23:17:08,611 - #43 (
INFO  23:17:08,611 - #21 0
INFO  23:17:08,611 - #41 ,
INFO  23:17:08,611 - #20 i
INFO  23:17:08,611 - #44 )
INFO  23:17:08,611 - #40 ;
INFO  23:17:08,611 - #20 val
INFO  23:17:08,611 - #42 .
INFO  23:17:08,611 - #20 putn
INFO  23:17:08,611 - #43 (
INFO  23:17:08,611 - #21 0
INFO  23:17:08,611 - #41 ,
INFO  23:17:08,612 - #20 i
INFO  23:17:08,612 - #44 )
INFO  23:17:08,612 - #40 ;
INFO  23:17:08,612 - #20 i
INFO  23:17:08,612 - #38 ++
INFO  23:17:08,612 - #40 ;
INFO  23:17:08,612 - #48 }
INFO  23:17:08,612 - #11 while
INFO  23:17:08,612 - #43 (
INFO  23:17:08,612 - #20 i
INFO  23:17:08,612 - #33 <
INFO  23:17:08,612 - #20 size
INFO  23:17:08,612 - #44 )
INFO  23:17:08,612 - #40 ;
INFO  23:17:08,612 - #20 f
INFO  23:17:08,612 - #43 (
INFO  23:17:08,612 - #20 c
INFO  23:17:08,612 - #41 ,
INFO  23:17:08,612 - #20 x
INFO  23:17:08,612 - #41 ,
INFO  23:17:08,612 - #20 i
INFO  23:17:08,613 - #44 )
INFO  23:17:08,613 - #40 ;
INFO  23:17:08,613 - #14 read
INFO  23:17:08,613 - #43 (
INFO  23:17:08,616 - #20 x
INFO  23:17:08,616 - #44 )
INFO  23:17:08,616 - #40 ;
INFO  23:17:08,616 - #10 do
INFO  23:17:08,616 - #47 {
INFO  23:17:08,616 - #8 if
INFO  23:17:08,616 - #43 (
INFO  23:17:08,616 - #20 x
INFO  23:17:08,617 - #34 <=
INFO  23:17:08,617 - #21 0
INFO  23:17:08,617 - #44 )
INFO  23:17:08,617 - #3 break
INFO  23:17:08,617 - #40 ;
INFO  23:17:08,617 - #8 if
INFO  23:17:08,617 - #43 (
INFO  23:17:08,617 - #21 0
INFO  23:17:08,617 - #34 <=
INFO  23:17:08,617 - #20 x
INFO  23:17:08,618 - #35 &&
INFO  23:17:08,618 - #20 x
INFO  23:17:08,618 - #33 <
INFO  23:17:08,618 - #20 size
INFO  23:17:08,619 - #44 )
INFO  23:17:08,619 - #47 {
INFO  23:17:08,619 - #20 val
INFO  23:17:08,619 - #42 .
ERROR 23:17:08,619 - Oporavak od greske u definiciji formalnih parametara funkcije na liniji 24, koloni 6 za simbol "."!
ERROR 23:17:08,619 - 
Sintaksna greska na liniji 40, koloni 8 za simbol "."!
INFO  23:17:08,619 - #20 putp
INFO  23:17:08,619 - #43 (
INFO  23:17:08,621 - #20 val
INFO  23:17:08,621 - #42 .
INFO  23:17:08,621 - #20 getp
INFO  23:17:08,621 - #43 (
INFO  23:17:08,621 - #20 x
INFO  23:17:08,621 - #44 )
INFO  23:17:08,621 - #24 +
INFO  23:17:08,621 - #21 1
INFO  23:17:08,621 - #44 )
INFO  23:17:08,622 - #40 ;
INFO  23:17:08,622 - #48 }
INFO  23:17:08,622 - #6 else
INFO  23:17:08,622 - #8 if
INFO  23:17:08,623 - #43 (
INFO  23:17:08,624 - #20 size
INFO  23:17:08,624 - #33 <
INFO  23:17:08,624 - #20 x
INFO  23:17:08,625 - #35 &&
INFO  23:17:08,625 - #20 x
INFO  23:17:08,625 - #33 <
INFO  23:17:08,625 - #21 0
INFO  23:17:08,626 - #44 )
INFO  23:17:08,626 - #47 {
INFO  23:17:08,626 - #20 val
INFO  23:17:08,626 - #42 .
ERROR 23:17:08,626 - Oporavak od greske u definiciji formalnih parametara funkcije na liniji 40, koloni 8 za simbol "."!
ERROR 23:17:08,626 - 
Sintaksna greska na liniji 44, koloni 8 za simbol "."!
INFO  23:17:08,626 - #20 putn
INFO  23:17:08,626 - #43 (
INFO  23:17:08,626 - #20 val
INFO  23:17:08,627 - #42 .
INFO  23:17:08,627 - #20 getn
INFO  23:17:08,627 - #43 (
INFO  23:17:08,627 - #20 x
INFO  23:17:08,627 - #44 )
INFO  23:17:08,627 - #24 +
INFO  23:17:08,627 - #21 1
INFO  23:17:08,627 - #44 )
INFO  23:17:08,627 - #40 ;
INFO  23:17:08,627 - #48 }
INFO  23:17:08,627 - #14 read
INFO  23:17:08,627 - #43 (
INFO  23:17:08,627 - #20 x
INFO  23:17:08,627 - #44 )
INFO  23:17:08,627 - #40 ;
INFO  23:17:08,628 - #48 }
INFO  23:17:08,628 - #11 while
INFO  23:17:08,628 - #43 (
INFO  23:17:08,628 - #23 true
INFO  23:17:08,628 - #44 )
INFO  23:17:08,628 - #40 ;
INFO  23:17:08,628 - #48 }
INFO  23:17:08,628 - #48 }
ERROR 23:17:08,629 - Fatalna greska, parsiranje se ne moze nastaviti na liniji 49, koloni 2!
INFO  23:17:22,291 - Kompajliranje ulaznog fajla C:\Users\Anja\Desktop\PP1 projekat\workspace\MJCompiler\test\program.mj
INFO  23:17:22,339 - #2 program
INFO  23:17:22,339 - #20 p
INFO  23:17:22,340 - #7 const
INFO  23:17:22,340 - #20 int
INFO  23:17:22,340 - #20 size
INFO  23:17:22,341 - #37 =
INFO  23:17:22,341 - #21 10
INFO  23:17:22,341 - #40 ;
INFO  23:17:22,341 - #4 class
INFO  23:17:22,341 - #20 Table
INFO  23:17:22,342 - #47 {
INFO  23:17:22,342 - #20 int
INFO  23:17:22,342 - #20 pos
INFO  23:17:22,342 - #45 [
INFO  23:17:22,342 - #46 ]
INFO  23:17:22,342 - #41 ,
INFO  23:17:22,342 - #20 neg
INFO  23:17:22,342 - #45 [
INFO  23:17:22,342 - #46 ]
INFO  23:17:22,342 - #40 ;
INFO  23:17:22,342 - #47 {
INFO  23:17:22,343 - #16 void
INFO  23:17:22,343 - #20 putp
INFO  23:17:22,343 - #43 (
INFO  23:17:22,343 - #20 int
INFO  23:17:22,343 - #20 a
INFO  23:17:22,343 - #41 ,
INFO  23:17:22,343 - #20 int
INFO  23:17:22,343 - #20 idx
INFO  23:17:22,343 - #44 )
INFO  23:17:22,344 - #47 {
INFO  23:17:22,344 - #20 this
INFO  23:17:22,344 - #42 .
ERROR 23:17:22,344 - 
Sintaksna greska na liniji 7, koloni 36 za simbol "."!
INFO  23:17:22,344 - #20 pos
INFO  23:17:22,344 - #45 [
INFO  23:17:22,344 - #20 idx
INFO  23:17:22,345 - #46 ]
INFO  23:17:22,345 - #37 =
INFO  23:17:22,345 - #20 a
INFO  23:17:22,345 - #40 ;
INFO  23:17:22,345 - #48 }
INFO  23:17:22,345 - #16 void
INFO  23:17:22,345 - #20 putn
INFO  23:17:22,345 - #43 (
INFO  23:17:22,345 - #20 int
INFO  23:17:22,345 - #20 a
INFO  23:17:22,345 - #41 ,
INFO  23:17:22,345 - #20 int
INFO  23:17:22,346 - #20 idx
INFO  23:17:22,346 - #44 )
ERROR 23:17:22,346 - Oporavak od greske u definiciji formalnih parametara funkcije na liniji 7, koloni 36 za simbol "."!
INFO  23:17:22,346 - #47 {
INFO  23:17:22,346 - #20 this
INFO  23:17:22,346 - #42 .
ERROR 23:17:22,347 - 
Sintaksna greska na liniji 8, koloni 36 za simbol "."!
INFO  23:17:22,347 - #20 neg
INFO  23:17:22,347 - #45 [
INFO  23:17:22,347 - #20 idx
INFO  23:17:22,347 - #46 ]
INFO  23:17:22,347 - #37 =
INFO  23:17:22,347 - #20 a
INFO  23:17:22,347 - #40 ;
INFO  23:17:22,347 - #48 }
INFO  23:17:22,347 - #20 int
INFO  23:17:22,347 - #20 getp
INFO  23:17:22,347 - #43 (
INFO  23:17:22,348 - #20 int
INFO  23:17:22,348 - #20 idx
INFO  23:17:22,348 - #44 )
INFO  23:17:22,348 - #47 {
INFO  23:17:22,348 - #15 return
INFO  23:17:22,348 - #20 pos
ERROR 23:17:22,348 - Oporavak od greske u definiciji formalnih parametara funkcije na liniji 8, koloni 36 za simbol "."!
INFO  23:17:22,348 - #45 [
INFO  23:17:22,348 - #20 idx
INFO  23:17:22,348 - #46 ]
INFO  23:17:22,349 - #40 ;
INFO  23:17:22,350 - #48 }
INFO  23:17:22,350 - #20 int
INFO  23:17:22,351 - #20 getn
INFO  23:17:22,351 - #43 (
INFO  23:17:22,351 - #20 int
INFO  23:17:22,351 - #20 idx
INFO  23:17:22,351 - #44 )
INFO  23:17:22,354 - #47 {
INFO  23:17:22,354 - #15 return
INFO  23:17:22,354 - #20 neg
INFO  23:17:22,354 - #45 [
INFO  23:17:22,354 - #20 idx
INFO  23:17:22,354 - #46 ]
INFO  23:17:22,354 - #40 ;
INFO  23:17:22,355 - #48 }
INFO  23:17:22,355 - #48 }
INFO  23:17:22,355 - #48 }
INFO  23:17:22,355 - #20 Table
INFO  23:17:22,356 - #20 val
INFO  23:17:22,356 - #40 ;
INFO  23:17:22,356 - #47 {
INFO  23:17:22,356 - #16 void
INFO  23:17:22,356 - #20 f
INFO  23:17:22,356 - #43 (
INFO  23:17:22,356 - #20 char
INFO  23:17:22,356 - #20 ch
INFO  23:17:22,356 - #41 ,
INFO  23:17:22,356 - #20 int
INFO  23:17:22,356 - #20 a
INFO  23:17:22,356 - #41 ,
INFO  23:17:22,356 - #20 int
INFO  23:17:22,356 - #20 arg
INFO  23:17:22,357 - #44 )
INFO  23:17:22,357 - #20 int
INFO  23:17:22,357 - #20 x
INFO  23:17:22,357 - #40 ;
INFO  23:17:22,357 - #47 {
INFO  23:17:22,357 - #20 x
INFO  23:17:22,357 - #37 =
INFO  23:17:22,357 - #20 arg
INFO  23:17:22,357 - #40 ;
INFO  23:17:22,357 - #48 }
INFO  23:17:22,357 - #16 void
INFO  23:17:22,357 - #20 main
INFO  23:17:22,357 - #43 (
INFO  23:17:22,357 - #44 )
INFO  23:17:22,357 - #20 int
INFO  23:17:22,357 - #20 x
INFO  23:17:22,358 - #41 ,
INFO  23:17:22,358 - #20 i
INFO  23:17:22,358 - #40 ;
INFO  23:17:22,358 - #20 char
INFO  23:17:22,358 - #20 c
INFO  23:17:22,358 - #40 ;
INFO  23:17:22,358 - #47 {
INFO  23:17:22,358 - #20 val
INFO  23:17:22,358 - #37 =
INFO  23:17:22,358 - #12 new
INFO  23:17:22,358 - #20 Table
INFO  23:17:22,358 - #40 ;
INFO  23:17:22,358 - #20 val
INFO  23:17:22,358 - #42 .
ERROR 23:17:22,358 - 
Sintaksna greska na liniji 24, koloni 6 za simbol "."!
INFO  23:17:22,358 - #20 pos
INFO  23:17:22,358 - #37 =
INFO  23:17:22,358 - #12 new
INFO  23:17:22,358 - #20 int
INFO  23:17:22,358 - #45 [
INFO  23:17:22,359 - #20 size
INFO  23:17:22,359 - #46 ]
INFO  23:17:22,359 - #40 ;
INFO  23:17:22,359 - #20 val
INFO  23:17:22,359 - #42 .
INFO  23:17:22,359 - #20 neg
INFO  23:17:22,359 - #37 =
INFO  23:17:22,359 - #12 new
INFO  23:17:22,359 - #20 int
INFO  23:17:22,359 - #45 [
INFO  23:17:22,359 - #20 size
INFO  23:17:22,359 - #46 ]
INFO  23:17:22,359 - #40 ;
INFO  23:17:22,359 - #20 i
INFO  23:17:22,359 - #37 =
INFO  23:17:22,359 - #21 0
INFO  23:17:22,359 - #40 ;
INFO  23:17:22,359 - #10 do
INFO  23:17:22,359 - #47 {
INFO  23:17:22,359 - #20 val
INFO  23:17:22,359 - #42 .
INFO  23:17:22,359 - #20 putp
INFO  23:17:22,359 - #43 (
INFO  23:17:22,359 - #21 0
INFO  23:17:22,359 - #41 ,
INFO  23:17:22,360 - #20 i
INFO  23:17:22,360 - #44 )
INFO  23:17:22,360 - #40 ;
INFO  23:17:22,360 - #20 val
INFO  23:17:22,360 - #42 .
INFO  23:17:22,360 - #20 putn
INFO  23:17:22,360 - #43 (
INFO  23:17:22,360 - #21 0
INFO  23:17:22,360 - #41 ,
INFO  23:17:22,360 - #20 i
INFO  23:17:22,360 - #44 )
INFO  23:17:22,360 - #40 ;
INFO  23:17:22,360 - #20 i
INFO  23:17:22,360 - #38 ++
INFO  23:17:22,360 - #40 ;
INFO  23:17:22,360 - #48 }
INFO  23:17:22,360 - #11 while
INFO  23:17:22,360 - #43 (
INFO  23:17:22,360 - #20 i
INFO  23:17:22,361 - #33 <
INFO  23:17:22,361 - #20 size
INFO  23:17:22,361 - #44 )
INFO  23:17:22,361 - #40 ;
INFO  23:17:22,361 - #20 f
INFO  23:17:22,361 - #43 (
INFO  23:17:22,361 - #20 c
INFO  23:17:22,361 - #41 ,
INFO  23:17:22,361 - #20 x
INFO  23:17:22,361 - #41 ,
INFO  23:17:22,361 - #20 i
INFO  23:17:22,361 - #44 )
INFO  23:17:22,361 - #40 ;
INFO  23:17:22,362 - #14 read
INFO  23:17:22,362 - #43 (
INFO  23:17:22,362 - #20 x
INFO  23:17:22,362 - #44 )
INFO  23:17:22,362 - #40 ;
INFO  23:17:22,362 - #48 }
INFO  23:17:22,362 - #48 }
ERROR 23:17:22,362 - Fatalna greska, parsiranje se ne moze nastaviti na liniji 38, koloni 2!
INFO  23:17:31,083 - Kompajliranje ulaznog fajla C:\Users\Anja\Desktop\PP1 projekat\workspace\MJCompiler\test\program.mj
INFO  23:17:31,134 - #2 program
INFO  23:17:31,134 - #20 p
INFO  23:17:31,134 - #7 const
INFO  23:17:31,135 - #20 int
INFO  23:17:31,135 - #20 size
INFO  23:17:31,135 - #37 =
INFO  23:17:31,135 - #21 10
INFO  23:17:31,135 - #40 ;
INFO  23:17:31,136 - #4 class
INFO  23:17:31,136 - #20 Table
INFO  23:17:31,136 - #47 {
INFO  23:17:31,136 - #20 int
INFO  23:17:31,136 - #20 pos
INFO  23:17:31,136 - #45 [
INFO  23:17:31,136 - #46 ]
INFO  23:17:31,137 - #41 ,
INFO  23:17:31,137 - #20 neg
INFO  23:17:31,137 - #45 [
INFO  23:17:31,137 - #46 ]
INFO  23:17:31,137 - #40 ;
INFO  23:17:31,137 - #47 {
INFO  23:17:31,137 - #16 void
INFO  23:17:31,138 - #20 putp
INFO  23:17:31,138 - #43 (
INFO  23:17:31,138 - #20 int
INFO  23:17:31,138 - #20 a
INFO  23:17:31,138 - #41 ,
INFO  23:17:31,138 - #20 int
INFO  23:17:31,138 - #20 idx
INFO  23:17:31,138 - #44 )
INFO  23:17:31,138 - #47 {
INFO  23:17:31,139 - #20 this
INFO  23:17:31,139 - #42 .
ERROR 23:17:31,139 - 
Sintaksna greska na liniji 7, koloni 36 za simbol "."!
INFO  23:17:31,139 - #20 pos
INFO  23:17:31,139 - #45 [
INFO  23:17:31,139 - #20 idx
INFO  23:17:31,140 - #46 ]
INFO  23:17:31,140 - #37 =
INFO  23:17:31,140 - #20 a
INFO  23:17:31,140 - #40 ;
INFO  23:17:31,140 - #48 }
INFO  23:17:31,140 - #16 void
INFO  23:17:31,140 - #20 putn
INFO  23:17:31,140 - #43 (
INFO  23:17:31,140 - #20 int
INFO  23:17:31,140 - #20 a
INFO  23:17:31,140 - #41 ,
INFO  23:17:31,140 - #20 int
INFO  23:17:31,140 - #20 idx
INFO  23:17:31,140 - #44 )
ERROR 23:17:31,141 - Oporavak od greske u definiciji formalnih parametara funkcije na liniji 7, koloni 36 za simbol "."!
INFO  23:17:31,141 - #47 {
INFO  23:17:31,141 - #20 this
INFO  23:17:31,141 - #42 .
ERROR 23:17:31,141 - 
Sintaksna greska na liniji 8, koloni 36 za simbol "."!
INFO  23:17:31,141 - #20 neg
INFO  23:17:31,141 - #45 [
INFO  23:17:31,141 - #20 idx
INFO  23:17:31,141 - #46 ]
INFO  23:17:31,141 - #37 =
INFO  23:17:31,141 - #20 a
INFO  23:17:31,142 - #40 ;
INFO  23:17:31,142 - #48 }
INFO  23:17:31,142 - #20 int
INFO  23:17:31,142 - #20 getp
INFO  23:17:31,142 - #43 (
INFO  23:17:31,142 - #20 int
INFO  23:17:31,142 - #20 idx
INFO  23:17:31,142 - #44 )
INFO  23:17:31,142 - #47 {
INFO  23:17:31,142 - #15 return
INFO  23:17:31,142 - #20 pos
ERROR 23:17:31,142 - Oporavak od greske u definiciji formalnih parametara funkcije na liniji 8, koloni 36 za simbol "."!
INFO  23:17:31,142 - #45 [
INFO  23:17:31,142 - #20 idx
INFO  23:17:31,142 - #46 ]
INFO  23:17:31,143 - #40 ;
INFO  23:17:31,143 - #48 }
INFO  23:17:31,144 - #20 int
INFO  23:17:31,144 - #20 getn
INFO  23:17:31,144 - #43 (
INFO  23:17:31,144 - #20 int
INFO  23:17:31,144 - #20 idx
INFO  23:17:31,144 - #44 )
INFO  23:17:31,144 - #47 {
INFO  23:17:31,144 - #15 return
INFO  23:17:31,144 - #20 neg
INFO  23:17:31,145 - #45 [
INFO  23:17:31,145 - #20 idx
INFO  23:17:31,145 - #46 ]
INFO  23:17:31,145 - #40 ;
INFO  23:17:31,145 - #48 }
INFO  23:17:31,145 - #48 }
INFO  23:17:31,145 - #48 }
INFO  23:17:31,145 - #20 Table
INFO  23:17:31,146 - #20 val
INFO  23:17:31,146 - #40 ;
INFO  23:17:31,146 - #47 {
INFO  23:17:31,146 - #16 void
INFO  23:17:31,147 - #20 f
INFO  23:17:31,147 - #43 (
INFO  23:17:31,147 - #20 char
INFO  23:17:31,147 - #20 ch
INFO  23:17:31,147 - #41 ,
INFO  23:17:31,147 - #20 int
INFO  23:17:31,147 - #20 a
INFO  23:17:31,147 - #41 ,
INFO  23:17:31,147 - #20 int
INFO  23:17:31,147 - #20 arg
INFO  23:17:31,147 - #44 )
INFO  23:17:31,147 - #20 int
INFO  23:17:31,147 - #20 x
INFO  23:17:31,147 - #40 ;
INFO  23:17:31,148 - #47 {
INFO  23:17:31,148 - #20 x
INFO  23:17:31,148 - #37 =
INFO  23:17:31,148 - #20 arg
INFO  23:17:31,148 - #40 ;
INFO  23:17:31,148 - #48 }
INFO  23:17:31,149 - #16 void
INFO  23:17:31,149 - #20 main
INFO  23:17:31,149 - #43 (
INFO  23:17:31,149 - #44 )
INFO  23:17:31,149 - #20 int
INFO  23:17:31,150 - #20 x
INFO  23:17:31,150 - #41 ,
INFO  23:17:31,150 - #20 i
INFO  23:17:31,150 - #40 ;
INFO  23:17:31,150 - #20 char
INFO  23:17:31,150 - #20 c
INFO  23:17:31,150 - #40 ;
INFO  23:17:31,150 - #47 {
INFO  23:17:31,150 - #20 val
INFO  23:17:31,150 - #37 =
INFO  23:17:31,150 - #12 new
INFO  23:17:31,150 - #20 Table
INFO  23:17:31,150 - #40 ;
INFO  23:17:31,150 - #48 }
INFO  23:17:31,150 - #48 }
INFO  23:17:31,152 - 

================SINTAKSNO STABLO====================


INFO  23:17:31,153 - Program(
  ProgName(
   p
  ) [ProgName]
  ProgramDeclMulti(
    ProgramDeclMulti(
      ProgramDeclMulti(
        ProgramDeclEps(
        ) [ProgramDeclEps]
        PartConstDeclaration(
          ConstDeclaration(
            Type(
             int
            ) [Type]
            ConstSingle(
              ConstPart(
               size
                NumConst(
                 10
                ) [NumConst]
              ) [ConstPart]
            ) [ConstSingle]
          ) [ConstDeclaration]
        ) [PartConstDeclaration]
      ) [ProgramDeclMulti]
      PartClassDeclaration(
        ClassDecl1(
         Table
          VarDeclSingle(
            VarDeclaration(
              Type(
               int
              ) [Type]
              VarMulti(
                VarSingle(
                  VarArray(
                   pos
                  ) [VarArray]
                ) [VarSingle]
                VarArray(
                 neg
                ) [VarArray]
              ) [VarMulti]
            ) [VarDeclaration]
          ) [VarDeclSingle]
          MethodDecMulti(
            MethodDeclSingle(
              MethodVoidDeclaration(
                MethodVoid2(
                  MethodVoidName(
                   putp
                  ) [MethodVoidName]
                  ParamSingle(
                    ParamError(
                    ) [ParamError]
                  ) [ParamSingle]
                  StatementSingle(
                    StmtReturnExpr(
                      ExprOne(
                        ExprSingle(
                          TermSingle(
                            FactorDesignator(
                              DesignatorArray(
                               pos
                                ExprOne(
                                  ExprSingle(
                                    TermSingle(
                                      FactorDesignator(
                                        DesignatorSimple(
                                         idx
                                        ) [DesignatorSimple]
                                      ) [FactorDesignator]
                                    ) [TermSingle]
                                  ) [ExprSingle]
                                ) [ExprOne]
                              ) [DesignatorArray]
                            ) [FactorDesignator]
                          ) [TermSingle]
                        ) [ExprSingle]
                      ) [ExprOne]
                    ) [StmtReturnExpr]
                  ) [StatementSingle]
                ) [MethodVoid2]
              ) [MethodVoidDeclaration]
            ) [MethodDeclSingle]
            MethodTypeDeclaration(
              MethodType2(
                MethodTypeName(
                  Type(
                   int
                  ) [Type]
                 getn
                ) [MethodTypeName]
                ParamSingle(
                  ParamNormal(
                    Type(
                     int
                    ) [Type]
                   idx
                  ) [ParamNormal]
                ) [ParamSingle]
                StatementSingle(
                  StmtReturnExpr(
                    ExprOne(
                      ExprSingle(
                        TermSingle(
                          FactorDesignator(
                            DesignatorArray(
                             neg
                              ExprOne(
                                ExprSingle(
                                  TermSingle(
                                    FactorDesignator(
                                      DesignatorSimple(
                                       idx
                                      ) [DesignatorSimple]
                                    ) [FactorDesignator]
                                  ) [TermSingle]
                                ) [ExprSingle]
                              ) [ExprOne]
                            ) [DesignatorArray]
                          ) [FactorDesignator]
                        ) [TermSingle]
                      ) [ExprSingle]
                    ) [ExprOne]
                  ) [StmtReturnExpr]
                ) [StatementSingle]
              ) [MethodType2]
            ) [MethodTypeDeclaration]
          ) [MethodDecMulti]
        ) [ClassDecl1]
      ) [PartClassDeclaration]
    ) [ProgramDeclMulti]
    PartVarDeclaration(
      GlobalVarDeclaration(
        Type(
         Table
        ) [Type]
        GlobalVarSingle(
          GlobalVarNormal(
           val
          ) [GlobalVarNormal]
        ) [GlobalVarSingle]
      ) [GlobalVarDeclaration]
    ) [PartVarDeclaration]
  ) [ProgramDeclMulti]
  MethodDecMulti(
    MethodDeclSingle(
      MethodVoidDeclaration(
        MethodVoid0(
          MethodVoidName(
           f
          ) [MethodVoidName]
          ParamMulti(
            ParamMulti(
              ParamSingle(
                ParamNormal(
                  Type(
                   char
                  ) [Type]
                 ch
                ) [ParamNormal]
              ) [ParamSingle]
              ParamNormal(
                Type(
                 int
                ) [Type]
               a
              ) [ParamNormal]
            ) [ParamMulti]
            ParamNormal(
              Type(
               int
              ) [Type]
             arg
            ) [ParamNormal]
          ) [ParamMulti]
          VarDeclSingle(
            VarDeclaration(
              Type(
               int
              ) [Type]
              VarSingle(
                VarNormal(
                 x
                ) [VarNormal]
              ) [VarSingle]
            ) [VarDeclaration]
          ) [VarDeclSingle]
          StatementSingle(
            StmtDesign(
              DesignatorAssignment(
                DesignatorSimple(
                 x
                ) [DesignatorSimple]
                AssignmentExpr(
                  ExprOne(
                    ExprSingle(
                      TermSingle(
                        FactorDesignator(
                          DesignatorSimple(
                           arg
                          ) [DesignatorSimple]
                        ) [FactorDesignator]
                      ) [TermSingle]
                    ) [ExprSingle]
                  ) [ExprOne]
                ) [AssignmentExpr]
              ) [DesignatorAssignment]
            ) [StmtDesign]
          ) [StatementSingle]
        ) [MethodVoid0]
      ) [MethodVoidDeclaration]
    ) [MethodDeclSingle]
    MethodVoidDeclaration(
      MethodVoid4(
        MethodVoidName(
         main
        ) [MethodVoidName]
        VarDeclMulti(
          VarDeclSingle(
            VarDeclaration(
              Type(
               int
              ) [Type]
              VarMulti(
                VarSingle(
                  VarNormal(
                   x
                  ) [VarNormal]
                ) [VarSingle]
                VarNormal(
                 i
                ) [VarNormal]
              ) [VarMulti]
            ) [VarDeclaration]
          ) [VarDeclSingle]
          VarDeclaration(
            Type(
             char
            ) [Type]
            VarSingle(
              VarNormal(
               c
              ) [VarNormal]
            ) [VarSingle]
          ) [VarDeclaration]
        ) [VarDeclMulti]
        StatementSingle(
          StmtDesign(
            DesignatorAssignment(
              DesignatorSimple(
               val
              ) [DesignatorSimple]
              AssignmentExpr(
                ExprOne(
                  ExprSingle(
                    TermSingle(
                      FactorNew(
                        Type(
                         Table
                        ) [Type]
                      ) [FactorNew]
                    ) [TermSingle]
                  ) [ExprSingle]
                ) [ExprOne]
              ) [AssignmentExpr]
            ) [DesignatorAssignment]
          ) [StmtDesign]
        ) [StatementSingle]
      ) [MethodVoid4]
    ) [MethodVoidDeclaration]
  ) [MethodDecMulti]
) [Program]
INFO  23:17:31,153 - 

================SEMANTICKA OBRADA====================


INFO  23:17:31,165 - Deklarisana konstanta 'size' na liniji 2
INFO  23:17:31,165 - Deklarisan niz 'pos' na liniji 5
INFO  23:17:31,166 - Deklarisan niz 'neg' na liniji 5
ERROR 23:17:31,166 - Semanticka greska - 'idx' nije deklarisano na liniji 9
ERROR 23:17:31,166 - Semanticka greska - nevalidan pristup elementu niza na liniji 9
INFO  23:17:31,168 - Pristup elementu niza 'pos' na liniji 9
ERROR 23:17:31,168 - Semanticka greska - return naredba u funkciji koja nema povratnu vrednost na liniji 9
INFO  23:17:31,169 - Formalni parametar funkcije getn: 'idx' na liniji 10
INFO  23:17:31,169 - Pristup elementu niza 'neg' na liniji 10
ERROR 23:17:31,169 - Semanticka greska - nije pronadjen tip 'Table' u tabeli simbola!
INFO  23:17:31,169 - Deklarisana globalna promenljiva 'val' na liniji 14
INFO  23:17:31,169 - Formalni parametar funkcije f: 'ch' na liniji 16
INFO  23:17:31,169 - Formalni parametar funkcije f: 'a' na liniji 16
INFO  23:17:31,169 - Formalni parametar funkcije f: 'arg' na liniji 16
INFO  23:17:31,169 - Deklarisana promenljiva 'x' na liniji 17
INFO  23:17:31,169 - Deklarisana promenljiva 'x' na liniji 21
INFO  23:17:31,169 - Deklarisana promenljiva 'i' na liniji 21
INFO  23:17:31,169 - Deklarisana promenljiva 'c' na liniji 21
ERROR 23:17:31,169 - Semanticka greska - nije pronadjen tip 'Table' u tabeli simbola!
INFO  23:17:31,170 - ===================================
ERROR 23:17:31,170 - Parsiranje nije uspesno zavrseno!
INFO  23:17:56,793 - Kompajliranje ulaznog fajla C:\Users\Anja\Desktop\PP1 projekat\workspace\MJCompiler\test\program.mj
INFO  23:17:56,841 - #2 program
INFO  23:17:56,841 - #20 p
INFO  23:17:56,841 - #7 const
INFO  23:17:56,842 - #20 int
INFO  23:17:56,842 - #20 size
INFO  23:17:56,842 - #37 =
INFO  23:17:56,842 - #21 10
INFO  23:17:56,842 - #40 ;
INFO  23:17:56,843 - #4 class
INFO  23:17:56,843 - #20 Table
INFO  23:17:56,843 - #47 {
INFO  23:17:56,843 - #20 int
INFO  23:17:56,843 - #20 pos
INFO  23:17:56,843 - #45 [
INFO  23:17:56,843 - #46 ]
INFO  23:17:56,843 - #41 ,
INFO  23:17:56,843 - #20 neg
INFO  23:17:56,844 - #45 [
INFO  23:17:56,844 - #46 ]
INFO  23:17:56,844 - #40 ;
INFO  23:17:56,844 - #47 {
INFO  23:17:56,844 - #16 void
INFO  23:17:56,844 - #20 putp
INFO  23:17:56,844 - #43 (
INFO  23:17:56,844 - #20 int
INFO  23:17:56,844 - #20 a
INFO  23:17:56,844 - #41 ,
INFO  23:17:56,845 - #20 int
INFO  23:17:56,845 - #20 idx
INFO  23:17:56,845 - #44 )
INFO  23:17:56,846 - #47 {
INFO  23:17:56,846 - #20 this
INFO  23:17:56,846 - #42 .
ERROR 23:17:56,846 - 
Sintaksna greska na liniji 7, koloni 36 za simbol "."!
INFO  23:17:56,846 - #20 pos
INFO  23:17:56,846 - #45 [
INFO  23:17:56,846 - #20 idx
INFO  23:17:56,847 - #46 ]
INFO  23:17:56,847 - #37 =
INFO  23:17:56,847 - #20 a
INFO  23:17:56,847 - #40 ;
INFO  23:17:56,847 - #48 }
INFO  23:17:56,847 - #16 void
INFO  23:17:56,847 - #20 putn
INFO  23:17:56,848 - #43 (
INFO  23:17:56,848 - #20 int
INFO  23:17:56,848 - #20 a
INFO  23:17:56,848 - #41 ,
INFO  23:17:56,848 - #20 int
INFO  23:17:56,848 - #20 idx
INFO  23:17:56,848 - #44 )
ERROR 23:17:56,848 - Oporavak od greske u definiciji formalnih parametara funkcije na liniji 7, koloni 36 za simbol "."!
INFO  23:17:56,849 - #47 {
INFO  23:17:56,849 - #20 this
INFO  23:17:56,849 - #42 .
ERROR 23:17:56,849 - 
Sintaksna greska na liniji 8, koloni 36 za simbol "."!
INFO  23:17:56,849 - #20 neg
INFO  23:17:56,849 - #45 [
INFO  23:17:56,849 - #20 idx
INFO  23:17:56,849 - #46 ]
INFO  23:17:56,850 - #37 =
INFO  23:17:56,850 - #20 a
INFO  23:17:56,850 - #40 ;
INFO  23:17:56,850 - #48 }
INFO  23:17:56,850 - #20 int
INFO  23:17:56,850 - #20 getp
INFO  23:17:56,850 - #43 (
INFO  23:17:56,851 - #20 int
INFO  23:17:56,851 - #20 idx
INFO  23:17:56,851 - #44 )
INFO  23:17:56,851 - #47 {
INFO  23:17:56,851 - #15 return
INFO  23:17:56,851 - #20 pos
ERROR 23:17:56,851 - Oporavak od greske u definiciji formalnih parametara funkcije na liniji 8, koloni 36 za simbol "."!
INFO  23:17:56,851 - #45 [
INFO  23:17:56,851 - #20 idx
INFO  23:17:56,851 - #46 ]
INFO  23:17:56,852 - #40 ;
INFO  23:17:56,852 - #48 }
INFO  23:17:56,852 - #20 int
INFO  23:17:56,853 - #20 getn
INFO  23:17:56,853 - #43 (
INFO  23:17:56,853 - #20 int
INFO  23:17:56,853 - #20 idx
INFO  23:17:56,853 - #44 )
INFO  23:17:56,853 - #47 {
INFO  23:17:56,853 - #15 return
INFO  23:17:56,853 - #20 neg
INFO  23:17:56,853 - #45 [
INFO  23:17:56,853 - #20 idx
INFO  23:17:56,853 - #46 ]
INFO  23:17:56,853 - #40 ;
INFO  23:17:56,854 - #48 }
INFO  23:17:56,854 - #48 }
INFO  23:17:56,854 - #48 }
INFO  23:17:56,854 - #20 Table
INFO  23:17:56,854 - #20 val
INFO  23:17:56,854 - #40 ;
INFO  23:17:56,854 - #47 {
INFO  23:17:56,855 - #16 void
INFO  23:17:56,855 - #20 f
INFO  23:17:56,855 - #43 (
INFO  23:17:56,855 - #20 char
INFO  23:17:56,855 - #20 ch
INFO  23:17:56,855 - #41 ,
INFO  23:17:56,855 - #20 int
INFO  23:17:56,855 - #20 a
INFO  23:17:56,855 - #41 ,
INFO  23:17:56,855 - #20 int
INFO  23:17:56,855 - #20 arg
INFO  23:17:56,855 - #44 )
INFO  23:17:56,855 - #20 int
INFO  23:17:56,855 - #20 x
INFO  23:17:56,855 - #40 ;
INFO  23:17:56,856 - #47 {
INFO  23:17:56,856 - #20 x
INFO  23:17:56,856 - #37 =
INFO  23:17:56,856 - #20 arg
INFO  23:17:56,856 - #40 ;
INFO  23:17:56,856 - #48 }
INFO  23:17:56,856 - #16 void
INFO  23:17:56,857 - #20 main
INFO  23:17:56,857 - #43 (
INFO  23:17:56,857 - #44 )
INFO  23:17:56,857 - #20 int
INFO  23:17:56,857 - #20 x
INFO  23:17:56,857 - #41 ,
INFO  23:17:56,857 - #20 i
INFO  23:17:56,857 - #40 ;
INFO  23:17:56,857 - #20 char
INFO  23:17:56,857 - #20 c
INFO  23:17:56,857 - #40 ;
INFO  23:17:56,857 - #47 {
INFO  23:17:56,857 - #20 val
INFO  23:17:56,858 - #37 =
INFO  23:17:56,858 - #12 new
INFO  23:17:56,858 - #20 Table
INFO  23:17:56,858 - #40 ;
INFO  23:17:56,858 - #20 f
INFO  23:17:56,858 - #43 (
INFO  23:17:56,858 - #20 c
INFO  23:17:56,858 - #41 ,
INFO  23:17:56,858 - #20 x
INFO  23:17:56,858 - #41 ,
INFO  23:17:56,858 - #20 i
INFO  23:17:56,858 - #44 )
INFO  23:17:56,858 - #40 ;
INFO  23:17:56,859 - #14 read
INFO  23:17:56,859 - #43 (
INFO  23:17:56,861 - #20 x
INFO  23:17:56,861 - #44 )
INFO  23:17:56,861 - #40 ;
INFO  23:17:56,861 - #48 }
INFO  23:17:56,862 - #48 }
INFO  23:17:56,862 - 

================SINTAKSNO STABLO====================


INFO  23:17:56,863 - Program(
  ProgName(
   p
  ) [ProgName]
  ProgramDeclMulti(
    ProgramDeclMulti(
      ProgramDeclMulti(
        ProgramDeclEps(
        ) [ProgramDeclEps]
        PartConstDeclaration(
          ConstDeclaration(
            Type(
             int
            ) [Type]
            ConstSingle(
              ConstPart(
               size
                NumConst(
                 10
                ) [NumConst]
              ) [ConstPart]
            ) [ConstSingle]
          ) [ConstDeclaration]
        ) [PartConstDeclaration]
      ) [ProgramDeclMulti]
      PartClassDeclaration(
        ClassDecl1(
         Table
          VarDeclSingle(
            VarDeclaration(
              Type(
               int
              ) [Type]
              VarMulti(
                VarSingle(
                  VarArray(
                   pos
                  ) [VarArray]
                ) [VarSingle]
                VarArray(
                 neg
                ) [VarArray]
              ) [VarMulti]
            ) [VarDeclaration]
          ) [VarDeclSingle]
          MethodDecMulti(
            MethodDeclSingle(
              MethodVoidDeclaration(
                MethodVoid2(
                  MethodVoidName(
                   putp
                  ) [MethodVoidName]
                  ParamSingle(
                    ParamError(
                    ) [ParamError]
                  ) [ParamSingle]
                  StatementSingle(
                    StmtReturnExpr(
                      ExprOne(
                        ExprSingle(
                          TermSingle(
                            FactorDesignator(
                              DesignatorArray(
                               pos
                                ExprOne(
                                  ExprSingle(
                                    TermSingle(
                                      FactorDesignator(
                                        DesignatorSimple(
                                         idx
                                        ) [DesignatorSimple]
                                      ) [FactorDesignator]
                                    ) [TermSingle]
                                  ) [ExprSingle]
                                ) [ExprOne]
                              ) [DesignatorArray]
                            ) [FactorDesignator]
                          ) [TermSingle]
                        ) [ExprSingle]
                      ) [ExprOne]
                    ) [StmtReturnExpr]
                  ) [StatementSingle]
                ) [MethodVoid2]
              ) [MethodVoidDeclaration]
            ) [MethodDeclSingle]
            MethodTypeDeclaration(
              MethodType2(
                MethodTypeName(
                  Type(
                   int
                  ) [Type]
                 getn
                ) [MethodTypeName]
                ParamSingle(
                  ParamNormal(
                    Type(
                     int
                    ) [Type]
                   idx
                  ) [ParamNormal]
                ) [ParamSingle]
                StatementSingle(
                  StmtReturnExpr(
                    ExprOne(
                      ExprSingle(
                        TermSingle(
                          FactorDesignator(
                            DesignatorArray(
                             neg
                              ExprOne(
                                ExprSingle(
                                  TermSingle(
                                    FactorDesignator(
                                      DesignatorSimple(
                                       idx
                                      ) [DesignatorSimple]
                                    ) [FactorDesignator]
                                  ) [TermSingle]
                                ) [ExprSingle]
                              ) [ExprOne]
                            ) [DesignatorArray]
                          ) [FactorDesignator]
                        ) [TermSingle]
                      ) [ExprSingle]
                    ) [ExprOne]
                  ) [StmtReturnExpr]
                ) [StatementSingle]
              ) [MethodType2]
            ) [MethodTypeDeclaration]
          ) [MethodDecMulti]
        ) [ClassDecl1]
      ) [PartClassDeclaration]
    ) [ProgramDeclMulti]
    PartVarDeclaration(
      GlobalVarDeclaration(
        Type(
         Table
        ) [Type]
        GlobalVarSingle(
          GlobalVarNormal(
           val
          ) [GlobalVarNormal]
        ) [GlobalVarSingle]
      ) [GlobalVarDeclaration]
    ) [PartVarDeclaration]
  ) [ProgramDeclMulti]
  MethodDecMulti(
    MethodDeclSingle(
      MethodVoidDeclaration(
        MethodVoid0(
          MethodVoidName(
           f
          ) [MethodVoidName]
          ParamMulti(
            ParamMulti(
              ParamSingle(
                ParamNormal(
                  Type(
                   char
                  ) [Type]
                 ch
                ) [ParamNormal]
              ) [ParamSingle]
              ParamNormal(
                Type(
                 int
                ) [Type]
               a
              ) [ParamNormal]
            ) [ParamMulti]
            ParamNormal(
              Type(
               int
              ) [Type]
             arg
            ) [ParamNormal]
          ) [ParamMulti]
          VarDeclSingle(
            VarDeclaration(
              Type(
               int
              ) [Type]
              VarSingle(
                VarNormal(
                 x
                ) [VarNormal]
              ) [VarSingle]
            ) [VarDeclaration]
          ) [VarDeclSingle]
          StatementSingle(
            StmtDesign(
              DesignatorAssignment(
                DesignatorSimple(
                 x
                ) [DesignatorSimple]
                AssignmentExpr(
                  ExprOne(
                    ExprSingle(
                      TermSingle(
                        FactorDesignator(
                          DesignatorSimple(
                           arg
                          ) [DesignatorSimple]
                        ) [FactorDesignator]
                      ) [TermSingle]
                    ) [ExprSingle]
                  ) [ExprOne]
                ) [AssignmentExpr]
              ) [DesignatorAssignment]
            ) [StmtDesign]
          ) [StatementSingle]
        ) [MethodVoid0]
      ) [MethodVoidDeclaration]
    ) [MethodDeclSingle]
    MethodVoidDeclaration(
      MethodVoid4(
        MethodVoidName(
         main
        ) [MethodVoidName]
        VarDeclMulti(
          VarDeclSingle(
            VarDeclaration(
              Type(
               int
              ) [Type]
              VarMulti(
                VarSingle(
                  VarNormal(
                   x
                  ) [VarNormal]
                ) [VarSingle]
                VarNormal(
                 i
                ) [VarNormal]
              ) [VarMulti]
            ) [VarDeclaration]
          ) [VarDeclSingle]
          VarDeclaration(
            Type(
             char
            ) [Type]
            VarSingle(
              VarNormal(
               c
              ) [VarNormal]
            ) [VarSingle]
          ) [VarDeclaration]
        ) [VarDeclMulti]
        StatementMulti(
          StatementMulti(
            StatementSingle(
              StmtDesign(
                DesignatorAssignment(
                  DesignatorSimple(
                   val
                  ) [DesignatorSimple]
                  AssignmentExpr(
                    ExprOne(
                      ExprSingle(
                        TermSingle(
                          FactorNew(
                            Type(
                             Table
                            ) [Type]
                          ) [FactorNew]
                        ) [TermSingle]
                      ) [ExprSingle]
                    ) [ExprOne]
                  ) [AssignmentExpr]
                ) [DesignatorAssignment]
              ) [StmtDesign]
            ) [StatementSingle]
            StmtDesign(
              DesignatorMethodCallParams(
                DesignatorSimple(
                 f
                ) [DesignatorSimple]
                ActParsMulti(
                  ActParsMulti(
                    ActParsSingle(
                      ExprOne(
                        ExprSingle(
                          TermSingle(
                            FactorDesignator(
                              DesignatorSimple(
                               c
                              ) [DesignatorSimple]
                            ) [FactorDesignator]
                          ) [TermSingle]
                        ) [ExprSingle]
                      ) [ExprOne]
                    ) [ActParsSingle]
                    ExprOne(
                      ExprSingle(
                        TermSingle(
                          FactorDesignator(
                            DesignatorSimple(
                             x
                            ) [DesignatorSimple]
                          ) [FactorDesignator]
                        ) [TermSingle]
                      ) [ExprSingle]
                    ) [ExprOne]
                  ) [ActParsMulti]
                  ExprOne(
                    ExprSingle(
                      TermSingle(
                        FactorDesignator(
                          DesignatorSimple(
                           i
                          ) [DesignatorSimple]
                        ) [FactorDesignator]
                      ) [TermSingle]
                    ) [ExprSingle]
                  ) [ExprOne]
                ) [ActParsMulti]
              ) [DesignatorMethodCallParams]
            ) [StmtDesign]
          ) [StatementMulti]
          StmtRead(
            DesignatorSimple(
             x
            ) [DesignatorSimple]
          ) [StmtRead]
        ) [StatementMulti]
      ) [MethodVoid4]
    ) [MethodVoidDeclaration]
  ) [MethodDecMulti]
) [Program]
INFO  23:17:56,864 - 

================SEMANTICKA OBRADA====================


INFO  23:17:56,877 - Deklarisana konstanta 'size' na liniji 2
INFO  23:17:56,877 - Deklarisan niz 'pos' na liniji 5
INFO  23:17:56,878 - Deklarisan niz 'neg' na liniji 5
ERROR 23:17:56,878 - Semanticka greska - 'idx' nije deklarisano na liniji 9
ERROR 23:17:56,878 - Semanticka greska - nevalidan pristup elementu niza na liniji 9
INFO  23:17:56,878 - Pristup elementu niza 'pos' na liniji 9
ERROR 23:17:56,878 - Semanticka greska - return naredba u funkciji koja nema povratnu vrednost na liniji 9
INFO  23:17:56,878 - Formalni parametar funkcije getn: 'idx' na liniji 10
INFO  23:17:56,878 - Pristup elementu niza 'neg' na liniji 10
ERROR 23:17:56,878 - Semanticka greska - nije pronadjen tip 'Table' u tabeli simbola!
INFO  23:17:56,878 - Deklarisana globalna promenljiva 'val' na liniji 14
INFO  23:17:56,879 - Formalni parametar funkcije f: 'ch' na liniji 16
INFO  23:17:56,879 - Formalni parametar funkcije f: 'a' na liniji 16
INFO  23:17:56,879 - Formalni parametar funkcije f: 'arg' na liniji 16
INFO  23:17:56,879 - Deklarisana promenljiva 'x' na liniji 17
INFO  23:17:56,879 - Deklarisana promenljiva 'x' na liniji 21
INFO  23:17:56,879 - Deklarisana promenljiva 'i' na liniji 21
INFO  23:17:56,879 - Deklarisana promenljiva 'c' na liniji 21
ERROR 23:17:56,879 - Semanticka greska - nije pronadjen tip 'Table' u tabeli simbola!
INFO  23:17:56,879 - Pronadjen poziv funkcije 'f' na liniji 26
INFO  23:17:56,880 - ===================================
ERROR 23:17:56,880 - Parsiranje nije uspesno zavrseno!
INFO  23:18:02,561 - Kompajliranje ulaznog fajla C:\Users\Anja\Desktop\PP1 projekat\workspace\MJCompiler\test\program.mj
INFO  23:18:02,615 - #2 program
INFO  23:18:02,616 - #20 p
INFO  23:18:02,616 - #7 const
INFO  23:18:02,617 - #20 int
INFO  23:18:02,617 - #20 size
INFO  23:18:02,618 - #37 =
INFO  23:18:02,618 - #21 10
INFO  23:18:02,618 - #40 ;
INFO  23:18:02,618 - #4 class
INFO  23:18:02,619 - #20 Table
INFO  23:18:02,619 - #47 {
INFO  23:18:02,619 - #20 int
INFO  23:18:02,619 - #20 pos
INFO  23:18:02,619 - #45 [
INFO  23:18:02,619 - #46 ]
INFO  23:18:02,619 - #41 ,
INFO  23:18:02,619 - #20 neg
INFO  23:18:02,619 - #45 [
INFO  23:18:02,619 - #46 ]
INFO  23:18:02,619 - #40 ;
INFO  23:18:02,620 - #47 {
INFO  23:18:02,620 - #16 void
INFO  23:18:02,620 - #20 putp
INFO  23:18:02,620 - #43 (
INFO  23:18:02,620 - #20 int
INFO  23:18:02,620 - #20 a
INFO  23:18:02,620 - #41 ,
INFO  23:18:02,621 - #20 int
INFO  23:18:02,621 - #20 idx
INFO  23:18:02,621 - #44 )
INFO  23:18:02,621 - #47 {
INFO  23:18:02,621 - #20 this
INFO  23:18:02,621 - #42 .
ERROR 23:18:02,621 - 
Sintaksna greska na liniji 7, koloni 36 za simbol "."!
INFO  23:18:02,622 - #20 pos
INFO  23:18:02,622 - #45 [
INFO  23:18:02,622 - #20 idx
INFO  23:18:02,622 - #46 ]
INFO  23:18:02,622 - #37 =
INFO  23:18:02,622 - #20 a
INFO  23:18:02,622 - #40 ;
INFO  23:18:02,622 - #48 }
INFO  23:18:02,623 - #16 void
INFO  23:18:02,623 - #20 putn
INFO  23:18:02,623 - #43 (
INFO  23:18:02,623 - #20 int
INFO  23:18:02,623 - #20 a
INFO  23:18:02,623 - #41 ,
INFO  23:18:02,623 - #20 int
INFO  23:18:02,623 - #20 idx
INFO  23:18:02,623 - #44 )
ERROR 23:18:02,623 - Oporavak od greske u definiciji formalnih parametara funkcije na liniji 7, koloni 36 za simbol "."!
INFO  23:18:02,624 - #47 {
INFO  23:18:02,624 - #20 this
INFO  23:18:02,624 - #42 .
ERROR 23:18:02,624 - 
Sintaksna greska na liniji 8, koloni 36 za simbol "."!
INFO  23:18:02,624 - #20 neg
INFO  23:18:02,624 - #45 [
INFO  23:18:02,624 - #20 idx
INFO  23:18:02,624 - #46 ]
INFO  23:18:02,624 - #37 =
INFO  23:18:02,624 - #20 a
INFO  23:18:02,624 - #40 ;
INFO  23:18:02,625 - #48 }
INFO  23:18:02,625 - #20 int
INFO  23:18:02,625 - #20 getp
INFO  23:18:02,625 - #43 (
INFO  23:18:02,625 - #20 int
INFO  23:18:02,625 - #20 idx
INFO  23:18:02,625 - #44 )
INFO  23:18:02,625 - #47 {
INFO  23:18:02,625 - #15 return
INFO  23:18:02,625 - #20 pos
ERROR 23:18:02,625 - Oporavak od greske u definiciji formalnih parametara funkcije na liniji 8, koloni 36 za simbol "."!
INFO  23:18:02,625 - #45 [
INFO  23:18:02,625 - #20 idx
INFO  23:18:02,625 - #46 ]
INFO  23:18:02,626 - #40 ;
INFO  23:18:02,626 - #48 }
INFO  23:18:02,626 - #20 int
INFO  23:18:02,628 - #20 getn
INFO  23:18:02,628 - #43 (
INFO  23:18:02,628 - #20 int
INFO  23:18:02,628 - #20 idx
INFO  23:18:02,628 - #44 )
INFO  23:18:02,628 - #47 {
INFO  23:18:02,628 - #15 return
INFO  23:18:02,629 - #20 neg
INFO  23:18:02,629 - #45 [
INFO  23:18:02,629 - #20 idx
INFO  23:18:02,629 - #46 ]
INFO  23:18:02,629 - #40 ;
INFO  23:18:02,629 - #48 }
INFO  23:18:02,629 - #48 }
INFO  23:18:02,630 - #48 }
INFO  23:18:02,630 - #20 Table
INFO  23:18:02,630 - #20 val
INFO  23:18:02,630 - #40 ;
INFO  23:18:02,630 - #47 {
INFO  23:18:02,631 - #16 void
INFO  23:18:02,631 - #20 f
INFO  23:18:02,631 - #43 (
INFO  23:18:02,631 - #20 char
INFO  23:18:02,631 - #20 ch
INFO  23:18:02,631 - #41 ,
INFO  23:18:02,631 - #20 int
INFO  23:18:02,631 - #20 a
INFO  23:18:02,631 - #41 ,
INFO  23:18:02,631 - #20 int
INFO  23:18:02,631 - #20 arg
INFO  23:18:02,631 - #44 )
INFO  23:18:02,632 - #20 int
INFO  23:18:02,632 - #20 x
INFO  23:18:02,632 - #40 ;
INFO  23:18:02,632 - #47 {
INFO  23:18:02,632 - #20 x
INFO  23:18:02,632 - #37 =
INFO  23:18:02,632 - #20 arg
INFO  23:18:02,632 - #40 ;
INFO  23:18:02,632 - #48 }
INFO  23:18:02,633 - #16 void
INFO  23:18:02,633 - #20 main
INFO  23:18:02,633 - #43 (
INFO  23:18:02,633 - #44 )
INFO  23:18:02,634 - #20 int
INFO  23:18:02,634 - #20 x
INFO  23:18:02,634 - #41 ,
INFO  23:18:02,634 - #20 i
INFO  23:18:02,634 - #40 ;
INFO  23:18:02,634 - #20 char
INFO  23:18:02,634 - #20 c
INFO  23:18:02,634 - #40 ;
INFO  23:18:02,634 - #47 {
INFO  23:18:02,635 - #20 val
INFO  23:18:02,635 - #37 =
INFO  23:18:02,635 - #12 new
INFO  23:18:02,635 - #20 Table
INFO  23:18:02,635 - #40 ;
INFO  23:18:02,635 - #20 val
INFO  23:18:02,635 - #42 .
ERROR 23:18:02,635 - 
Sintaksna greska na liniji 24, koloni 6 za simbol "."!
INFO  23:18:02,635 - #20 pos
INFO  23:18:02,635 - #37 =
INFO  23:18:02,635 - #12 new
INFO  23:18:02,635 - #20 int
INFO  23:18:02,635 - #45 [
INFO  23:18:02,635 - #20 size
INFO  23:18:02,635 - #46 ]
INFO  23:18:02,635 - #40 ;
INFO  23:18:02,638 - #20 val
INFO  23:18:02,638 - #42 .
INFO  23:18:02,638 - #20 neg
INFO  23:18:02,638 - #37 =
INFO  23:18:02,638 - #12 new
INFO  23:18:02,638 - #20 int
INFO  23:18:02,638 - #45 [
INFO  23:18:02,638 - #20 size
INFO  23:18:02,638 - #46 ]
INFO  23:18:02,638 - #40 ;
INFO  23:18:02,638 - #20 f
INFO  23:18:02,638 - #43 (
INFO  23:18:02,638 - #20 c
INFO  23:18:02,638 - #41 ,
INFO  23:18:02,638 - #20 x
INFO  23:18:02,639 - #41 ,
INFO  23:18:02,639 - #20 i
INFO  23:18:02,639 - #44 )
INFO  23:18:02,639 - #40 ;
INFO  23:18:02,639 - #14 read
INFO  23:18:02,639 - #43 (
INFO  23:18:02,639 - #20 x
INFO  23:18:02,639 - #44 )
INFO  23:18:02,639 - #40 ;
INFO  23:18:02,639 - #48 }
INFO  23:18:02,639 - #48 }
ERROR 23:18:02,639 - Fatalna greska, parsiranje se ne moze nastaviti na liniji 32, koloni 2!
INFO  23:18:12,833 - Kompajliranje ulaznog fajla C:\Users\Anja\Desktop\PP1 projekat\workspace\MJCompiler\test\program.mj
INFO  23:18:12,906 - #2 program
INFO  23:18:12,906 - #20 p
INFO  23:18:12,906 - #7 const
INFO  23:18:12,907 - #20 int
INFO  23:18:12,907 - #20 size
INFO  23:18:12,908 - #37 =
INFO  23:18:12,908 - #21 10
INFO  23:18:12,908 - #40 ;
INFO  23:18:12,909 - #4 class
INFO  23:18:12,910 - #20 Table
INFO  23:18:12,910 - #47 {
INFO  23:18:12,910 - #20 int
INFO  23:18:12,910 - #20 pos
INFO  23:18:12,911 - #45 [
INFO  23:18:12,911 - #46 ]
INFO  23:18:12,911 - #41 ,
INFO  23:18:12,911 - #20 neg
INFO  23:18:12,911 - #45 [
INFO  23:18:12,911 - #46 ]
INFO  23:18:12,911 - #40 ;
INFO  23:18:12,911 - #47 {
INFO  23:18:12,912 - #16 void
INFO  23:18:12,912 - #20 putp
INFO  23:18:12,912 - #43 (
INFO  23:18:12,913 - #20 int
INFO  23:18:12,913 - #20 a
INFO  23:18:12,913 - #41 ,
INFO  23:18:12,913 - #20 int
INFO  23:18:12,913 - #20 idx
INFO  23:18:12,913 - #44 )
INFO  23:18:12,915 - #47 {
INFO  23:18:12,915 - #20 this
INFO  23:18:12,916 - #42 .
ERROR 23:18:12,916 - 
Sintaksna greska na liniji 7, koloni 36 za simbol "."!
INFO  23:18:12,916 - #20 pos
INFO  23:18:12,916 - #45 [
INFO  23:18:12,916 - #20 idx
INFO  23:18:12,917 - #46 ]
INFO  23:18:12,917 - #37 =
INFO  23:18:12,917 - #20 a
INFO  23:18:12,917 - #40 ;
INFO  23:18:12,918 - #48 }
INFO  23:18:12,918 - #16 void
INFO  23:18:12,918 - #20 putn
INFO  23:18:12,918 - #43 (
INFO  23:18:12,918 - #20 int
INFO  23:18:12,918 - #20 a
INFO  23:18:12,918 - #41 ,
INFO  23:18:12,918 - #20 int
INFO  23:18:12,918 - #20 idx
INFO  23:18:12,918 - #44 )
ERROR 23:18:12,919 - Oporavak od greske u definiciji formalnih parametara funkcije na liniji 7, koloni 36 za simbol "."!
INFO  23:18:12,919 - #47 {
INFO  23:18:12,919 - #20 this
INFO  23:18:12,920 - #42 .
ERROR 23:18:12,920 - 
Sintaksna greska na liniji 8, koloni 36 za simbol "."!
INFO  23:18:12,920 - #20 neg
INFO  23:18:12,920 - #45 [
INFO  23:18:12,920 - #20 idx
INFO  23:18:12,920 - #46 ]
INFO  23:18:12,920 - #37 =
INFO  23:18:12,921 - #20 a
INFO  23:18:12,921 - #40 ;
INFO  23:18:12,921 - #48 }
INFO  23:18:12,921 - #20 int
INFO  23:18:12,921 - #20 getp
INFO  23:18:12,921 - #43 (
INFO  23:18:12,921 - #20 int
INFO  23:18:12,922 - #20 idx
INFO  23:18:12,922 - #44 )
INFO  23:18:12,923 - #47 {
INFO  23:18:12,923 - #15 return
INFO  23:18:12,923 - #20 pos
ERROR 23:18:12,923 - Oporavak od greske u definiciji formalnih parametara funkcije na liniji 8, koloni 36 za simbol "."!
INFO  23:18:12,923 - #45 [
INFO  23:18:12,924 - #20 idx
INFO  23:18:12,924 - #46 ]
INFO  23:18:12,925 - #40 ;
INFO  23:18:12,925 - #48 }
INFO  23:18:12,925 - #20 int
INFO  23:18:12,926 - #20 getn
INFO  23:18:12,926 - #43 (
INFO  23:18:12,926 - #20 int
INFO  23:18:12,926 - #20 idx
INFO  23:18:12,926 - #44 )
INFO  23:18:12,927 - #47 {
INFO  23:18:12,927 - #15 return
INFO  23:18:12,927 - #20 neg
INFO  23:18:12,927 - #45 [
INFO  23:18:12,927 - #20 idx
INFO  23:18:12,927 - #46 ]
INFO  23:18:12,927 - #40 ;
INFO  23:18:12,927 - #48 }
INFO  23:18:12,927 - #48 }
INFO  23:18:12,928 - #48 }
INFO  23:18:12,928 - #20 Table
INFO  23:18:12,928 - #20 val
INFO  23:18:12,928 - #40 ;
INFO  23:18:12,929 - #47 {
INFO  23:18:12,929 - #16 void
INFO  23:18:12,929 - #20 f
INFO  23:18:12,929 - #43 (
INFO  23:18:12,929 - #20 char
INFO  23:18:12,929 - #20 ch
INFO  23:18:12,929 - #41 ,
INFO  23:18:12,930 - #20 int
INFO  23:18:12,930 - #20 a
INFO  23:18:12,930 - #41 ,
INFO  23:18:12,930 - #20 int
INFO  23:18:12,930 - #20 arg
INFO  23:18:12,930 - #44 )
INFO  23:18:12,930 - #20 int
INFO  23:18:12,930 - #20 x
INFO  23:18:12,930 - #40 ;
INFO  23:18:12,930 - #47 {
INFO  23:18:12,931 - #20 x
INFO  23:18:12,931 - #37 =
INFO  23:18:12,931 - #20 arg
INFO  23:18:12,931 - #40 ;
INFO  23:18:12,931 - #48 }
INFO  23:18:12,931 - #16 void
INFO  23:18:12,932 - #20 main
INFO  23:18:12,932 - #43 (
INFO  23:18:12,932 - #44 )
INFO  23:18:12,932 - #20 int
INFO  23:18:12,932 - #20 x
INFO  23:18:12,932 - #41 ,
INFO  23:18:12,932 - #20 i
INFO  23:18:12,932 - #40 ;
INFO  23:18:12,933 - #20 char
INFO  23:18:12,933 - #20 c
INFO  23:18:12,933 - #40 ;
INFO  23:18:12,933 - #47 {
INFO  23:18:12,933 - #20 val
INFO  23:18:12,933 - #37 =
INFO  23:18:12,933 - #12 new
INFO  23:18:12,933 - #20 Table
INFO  23:18:12,933 - #40 ;
INFO  23:18:12,934 - #20 val
INFO  23:18:12,934 - #37 =
INFO  23:18:12,934 - #12 new
INFO  23:18:12,934 - #20 int
INFO  23:18:12,934 - #45 [
INFO  23:18:12,934 - #20 size
INFO  23:18:12,934 - #46 ]
INFO  23:18:12,935 - #40 ;
INFO  23:18:12,935 - #20 val
INFO  23:18:12,935 - #37 =
INFO  23:18:12,935 - #12 new
INFO  23:18:12,939 - #20 int
INFO  23:18:12,939 - #45 [
INFO  23:18:12,939 - #20 size
INFO  23:18:12,939 - #46 ]
INFO  23:18:12,939 - #40 ;
INFO  23:18:12,939 - #20 f
INFO  23:18:12,939 - #43 (
INFO  23:18:12,940 - #20 c
INFO  23:18:12,940 - #41 ,
INFO  23:18:12,940 - #20 x
INFO  23:18:12,940 - #41 ,
INFO  23:18:12,940 - #20 i
INFO  23:18:12,940 - #44 )
INFO  23:18:12,940 - #40 ;
INFO  23:18:12,940 - #14 read
INFO  23:18:12,940 - #43 (
INFO  23:18:12,940 - #20 x
INFO  23:18:12,940 - #44 )
INFO  23:18:12,940 - #40 ;
INFO  23:18:12,940 - #48 }
INFO  23:18:12,941 - #48 }
INFO  23:18:12,942 - 

================SINTAKSNO STABLO====================


INFO  23:18:12,944 - Program(
  ProgName(
   p
  ) [ProgName]
  ProgramDeclMulti(
    ProgramDeclMulti(
      ProgramDeclMulti(
        ProgramDeclEps(
        ) [ProgramDeclEps]
        PartConstDeclaration(
          ConstDeclaration(
            Type(
             int
            ) [Type]
            ConstSingle(
              ConstPart(
               size
                NumConst(
                 10
                ) [NumConst]
              ) [ConstPart]
            ) [ConstSingle]
          ) [ConstDeclaration]
        ) [PartConstDeclaration]
      ) [ProgramDeclMulti]
      PartClassDeclaration(
        ClassDecl1(
         Table
          VarDeclSingle(
            VarDeclaration(
              Type(
               int
              ) [Type]
              VarMulti(
                VarSingle(
                  VarArray(
                   pos
                  ) [VarArray]
                ) [VarSingle]
                VarArray(
                 neg
                ) [VarArray]
              ) [VarMulti]
            ) [VarDeclaration]
          ) [VarDeclSingle]
          MethodDecMulti(
            MethodDeclSingle(
              MethodVoidDeclaration(
                MethodVoid2(
                  MethodVoidName(
                   putp
                  ) [MethodVoidName]
                  ParamSingle(
                    ParamError(
                    ) [ParamError]
                  ) [ParamSingle]
                  StatementSingle(
                    StmtReturnExpr(
                      ExprOne(
                        ExprSingle(
                          TermSingle(
                            FactorDesignator(
                              DesignatorArray(
                               pos
                                ExprOne(
                                  ExprSingle(
                                    TermSingle(
                                      FactorDesignator(
                                        DesignatorSimple(
                                         idx
                                        ) [DesignatorSimple]
                                      ) [FactorDesignator]
                                    ) [TermSingle]
                                  ) [ExprSingle]
                                ) [ExprOne]
                              ) [DesignatorArray]
                            ) [FactorDesignator]
                          ) [TermSingle]
                        ) [ExprSingle]
                      ) [ExprOne]
                    ) [StmtReturnExpr]
                  ) [StatementSingle]
                ) [MethodVoid2]
              ) [MethodVoidDeclaration]
            ) [MethodDeclSingle]
            MethodTypeDeclaration(
              MethodType2(
                MethodTypeName(
                  Type(
                   int
                  ) [Type]
                 getn
                ) [MethodTypeName]
                ParamSingle(
                  ParamNormal(
                    Type(
                     int
                    ) [Type]
                   idx
                  ) [ParamNormal]
                ) [ParamSingle]
                StatementSingle(
                  StmtReturnExpr(
                    ExprOne(
                      ExprSingle(
                        TermSingle(
                          FactorDesignator(
                            DesignatorArray(
                             neg
                              ExprOne(
                                ExprSingle(
                                  TermSingle(
                                    FactorDesignator(
                                      DesignatorSimple(
                                       idx
                                      ) [DesignatorSimple]
                                    ) [FactorDesignator]
                                  ) [TermSingle]
                                ) [ExprSingle]
                              ) [ExprOne]
                            ) [DesignatorArray]
                          ) [FactorDesignator]
                        ) [TermSingle]
                      ) [ExprSingle]
                    ) [ExprOne]
                  ) [StmtReturnExpr]
                ) [StatementSingle]
              ) [MethodType2]
            ) [MethodTypeDeclaration]
          ) [MethodDecMulti]
        ) [ClassDecl1]
      ) [PartClassDeclaration]
    ) [ProgramDeclMulti]
    PartVarDeclaration(
      GlobalVarDeclaration(
        Type(
         Table
        ) [Type]
        GlobalVarSingle(
          GlobalVarNormal(
           val
          ) [GlobalVarNormal]
        ) [GlobalVarSingle]
      ) [GlobalVarDeclaration]
    ) [PartVarDeclaration]
  ) [ProgramDeclMulti]
  MethodDecMulti(
    MethodDeclSingle(
      MethodVoidDeclaration(
        MethodVoid0(
          MethodVoidName(
           f
          ) [MethodVoidName]
          ParamMulti(
            ParamMulti(
              ParamSingle(
                ParamNormal(
                  Type(
                   char
                  ) [Type]
                 ch
                ) [ParamNormal]
              ) [ParamSingle]
              ParamNormal(
                Type(
                 int
                ) [Type]
               a
              ) [ParamNormal]
            ) [ParamMulti]
            ParamNormal(
              Type(
               int
              ) [Type]
             arg
            ) [ParamNormal]
          ) [ParamMulti]
          VarDeclSingle(
            VarDeclaration(
              Type(
               int
              ) [Type]
              VarSingle(
                VarNormal(
                 x
                ) [VarNormal]
              ) [VarSingle]
            ) [VarDeclaration]
          ) [VarDeclSingle]
          StatementSingle(
            StmtDesign(
              DesignatorAssignment(
                DesignatorSimple(
                 x
                ) [DesignatorSimple]
                AssignmentExpr(
                  ExprOne(
                    ExprSingle(
                      TermSingle(
                        FactorDesignator(
                          DesignatorSimple(
                           arg
                          ) [DesignatorSimple]
                        ) [FactorDesignator]
                      ) [TermSingle]
                    ) [ExprSingle]
                  ) [ExprOne]
                ) [AssignmentExpr]
              ) [DesignatorAssignment]
            ) [StmtDesign]
          ) [StatementSingle]
        ) [MethodVoid0]
      ) [MethodVoidDeclaration]
    ) [MethodDeclSingle]
    MethodVoidDeclaration(
      MethodVoid4(
        MethodVoidName(
         main
        ) [MethodVoidName]
        VarDeclMulti(
          VarDeclSingle(
            VarDeclaration(
              Type(
               int
              ) [Type]
              VarMulti(
                VarSingle(
                  VarNormal(
                   x
                  ) [VarNormal]
                ) [VarSingle]
                VarNormal(
                 i
                ) [VarNormal]
              ) [VarMulti]
            ) [VarDeclaration]
          ) [VarDeclSingle]
          VarDeclaration(
            Type(
             char
            ) [Type]
            VarSingle(
              VarNormal(
               c
              ) [VarNormal]
            ) [VarSingle]
          ) [VarDeclaration]
        ) [VarDeclMulti]
        StatementMulti(
          StatementMulti(
            StatementMulti(
              StatementMulti(
                StatementSingle(
                  StmtDesign(
                    DesignatorAssignment(
                      DesignatorSimple(
                       val
                      ) [DesignatorSimple]
                      AssignmentExpr(
                        ExprOne(
                          ExprSingle(
                            TermSingle(
                              FactorNew(
                                Type(
                                 Table
                                ) [Type]
                              ) [FactorNew]
                            ) [TermSingle]
                          ) [ExprSingle]
                        ) [ExprOne]
                      ) [AssignmentExpr]
                    ) [DesignatorAssignment]
                  ) [StmtDesign]
                ) [StatementSingle]
                StmtDesign(
                  DesignatorAssignment(
                    DesignatorSimple(
                     val
                    ) [DesignatorSimple]
                    AssignmentExpr(
                      ExprOne(
                        ExprSingle(
                          TermSingle(
                            FactorNewArray(
                              Type(
                               int
                              ) [Type]
                              ExprOne(
                                ExprSingle(
                                  TermSingle(
                                    FactorDesignator(
                                      DesignatorSimple(
                                       size
                                      ) [DesignatorSimple]
                                    ) [FactorDesignator]
                                  ) [TermSingle]
                                ) [ExprSingle]
                              ) [ExprOne]
                            ) [FactorNewArray]
                          ) [TermSingle]
                        ) [ExprSingle]
                      ) [ExprOne]
                    ) [AssignmentExpr]
                  ) [DesignatorAssignment]
                ) [StmtDesign]
              ) [StatementMulti]
              StmtDesign(
                DesignatorAssignment(
                  DesignatorSimple(
                   val
                  ) [DesignatorSimple]
                  AssignmentExpr(
                    ExprOne(
                      ExprSingle(
                        TermSingle(
                          FactorNewArray(
                            Type(
                             int
                            ) [Type]
                            ExprOne(
                              ExprSingle(
                                TermSingle(
                                  FactorDesignator(
                                    DesignatorSimple(
                                     size
                                    ) [DesignatorSimple]
                                  ) [FactorDesignator]
                                ) [TermSingle]
                              ) [ExprSingle]
                            ) [ExprOne]
                          ) [FactorNewArray]
                        ) [TermSingle]
                      ) [ExprSingle]
                    ) [ExprOne]
                  ) [AssignmentExpr]
                ) [DesignatorAssignment]
              ) [StmtDesign]
            ) [StatementMulti]
            StmtDesign(
              DesignatorMethodCallParams(
                DesignatorSimple(
                 f
                ) [DesignatorSimple]
                ActParsMulti(
                  ActParsMulti(
                    ActParsSingle(
                      ExprOne(
                        ExprSingle(
                          TermSingle(
                            FactorDesignator(
                              DesignatorSimple(
                               c
                              ) [DesignatorSimple]
                            ) [FactorDesignator]
                          ) [TermSingle]
                        ) [ExprSingle]
                      ) [ExprOne]
                    ) [ActParsSingle]
                    ExprOne(
                      ExprSingle(
                        TermSingle(
                          FactorDesignator(
                            DesignatorSimple(
                             x
                            ) [DesignatorSimple]
                          ) [FactorDesignator]
                        ) [TermSingle]
                      ) [ExprSingle]
                    ) [ExprOne]
                  ) [ActParsMulti]
                  ExprOne(
                    ExprSingle(
                      TermSingle(
                        FactorDesignator(
                          DesignatorSimple(
                           i
                          ) [DesignatorSimple]
                        ) [FactorDesignator]
                      ) [TermSingle]
                    ) [ExprSingle]
                  ) [ExprOne]
                ) [ActParsMulti]
              ) [DesignatorMethodCallParams]
            ) [StmtDesign]
          ) [StatementMulti]
          StmtRead(
            DesignatorSimple(
             x
            ) [DesignatorSimple]
          ) [StmtRead]
        ) [StatementMulti]
      ) [MethodVoid4]
    ) [MethodVoidDeclaration]
  ) [MethodDecMulti]
) [Program]
INFO  23:18:12,945 - 

================SEMANTICKA OBRADA====================


INFO  23:18:12,959 - Deklarisana konstanta 'size' na liniji 2
INFO  23:18:12,959 - Deklarisan niz 'pos' na liniji 5
INFO  23:18:12,959 - Deklarisan niz 'neg' na liniji 5
ERROR 23:18:12,960 - Semanticka greska - 'idx' nije deklarisano na liniji 9
ERROR 23:18:12,960 - Semanticka greska - nevalidan pristup elementu niza na liniji 9
INFO  23:18:12,960 - Pristup elementu niza 'pos' na liniji 9
ERROR 23:18:12,960 - Semanticka greska - return naredba u funkciji koja nema povratnu vrednost na liniji 9
INFO  23:18:12,960 - Formalni parametar funkcije getn: 'idx' na liniji 10
INFO  23:18:12,960 - Pristup elementu niza 'neg' na liniji 10
ERROR 23:18:12,960 - Semanticka greska - nije pronadjen tip 'Table' u tabeli simbola!
INFO  23:18:12,960 - Deklarisana globalna promenljiva 'val' na liniji 14
INFO  23:18:12,961 - Formalni parametar funkcije f: 'ch' na liniji 16
INFO  23:18:12,961 - Formalni parametar funkcije f: 'a' na liniji 16
INFO  23:18:12,961 - Formalni parametar funkcije f: 'arg' na liniji 16
INFO  23:18:12,961 - Deklarisana promenljiva 'x' na liniji 17
INFO  23:18:12,961 - Deklarisana promenljiva 'x' na liniji 21
INFO  23:18:12,961 - Deklarisana promenljiva 'i' na liniji 21
INFO  23:18:12,961 - Deklarisana promenljiva 'c' na liniji 21
ERROR 23:18:12,961 - Semanticka greska - nije pronadjen tip 'Table' u tabeli simbola!
ERROR 23:18:12,962 - Semanticka greska - nekompatibilni tipovi za dodelu vrednosti na liniji 24
ERROR 23:18:12,962 - Semanticka greska - nekompatibilni tipovi za dodelu vrednosti na liniji 25
INFO  23:18:12,962 - Pronadjen poziv funkcije 'f' na liniji 27
INFO  23:18:12,963 - ===================================
ERROR 23:18:12,963 - Parsiranje nije uspesno zavrseno!
INFO  23:18:43,781 - Kompajliranje ulaznog fajla C:\Users\Anja\Desktop\PP1 projekat\workspace\MJCompiler\test\program.mj
INFO  23:18:43,827 - #2 program
INFO  23:18:43,827 - #20 p
INFO  23:18:43,827 - #7 const
INFO  23:18:43,828 - #20 int
INFO  23:18:43,828 - #20 size
INFO  23:18:43,829 - #37 =
INFO  23:18:43,829 - #21 10
INFO  23:18:43,829 - #40 ;
INFO  23:18:43,829 - #4 class
INFO  23:18:43,830 - #20 Table
INFO  23:18:43,830 - #47 {
INFO  23:18:43,830 - #20 int
INFO  23:18:43,830 - #20 pos
INFO  23:18:43,830 - #45 [
INFO  23:18:43,830 - #46 ]
INFO  23:18:43,831 - #41 ,
INFO  23:18:43,831 - #20 neg
INFO  23:18:43,831 - #45 [
INFO  23:18:43,831 - #46 ]
INFO  23:18:43,831 - #40 ;
INFO  23:18:43,831 - #47 {
INFO  23:18:43,831 - #16 void
INFO  23:18:43,832 - #20 putp
INFO  23:18:43,832 - #43 (
INFO  23:18:43,832 - #20 int
INFO  23:18:43,832 - #20 a
INFO  23:18:43,832 - #41 ,
INFO  23:18:43,832 - #20 int
INFO  23:18:43,832 - #20 idx
INFO  23:18:43,832 - #44 )
INFO  23:18:43,833 - #47 {
INFO  23:18:43,833 - #20 this
INFO  23:18:43,833 - #42 .
ERROR 23:18:43,833 - 
Sintaksna greska na liniji 7, koloni 36 za simbol "."!
INFO  23:18:43,833 - #20 pos
INFO  23:18:43,833 - #45 [
INFO  23:18:43,833 - #20 idx
INFO  23:18:43,834 - #46 ]
INFO  23:18:43,834 - #37 =
INFO  23:18:43,834 - #20 a
INFO  23:18:43,834 - #40 ;
INFO  23:18:43,834 - #48 }
INFO  23:18:43,834 - #16 void
INFO  23:18:43,834 - #20 putn
INFO  23:18:43,834 - #43 (
INFO  23:18:43,834 - #20 int
INFO  23:18:43,834 - #20 a
INFO  23:18:43,834 - #41 ,
INFO  23:18:43,834 - #20 int
INFO  23:18:43,834 - #20 idx
INFO  23:18:43,834 - #44 )
ERROR 23:18:43,835 - Oporavak od greske u definiciji formalnih parametara funkcije na liniji 7, koloni 36 za simbol "."!
INFO  23:18:43,835 - #47 {
INFO  23:18:43,835 - #20 this
INFO  23:18:43,835 - #42 .
ERROR 23:18:43,835 - 
Sintaksna greska na liniji 8, koloni 36 za simbol "."!
INFO  23:18:43,835 - #20 neg
INFO  23:18:43,835 - #45 [
INFO  23:18:43,835 - #20 idx
INFO  23:18:43,835 - #46 ]
INFO  23:18:43,835 - #37 =
INFO  23:18:43,836 - #20 a
INFO  23:18:43,836 - #40 ;
INFO  23:18:43,836 - #48 }
INFO  23:18:43,836 - #20 int
INFO  23:18:43,836 - #20 getp
INFO  23:18:43,836 - #43 (
INFO  23:18:43,836 - #20 int
INFO  23:18:43,836 - #20 idx
INFO  23:18:43,836 - #44 )
INFO  23:18:43,836 - #47 {
INFO  23:18:43,836 - #15 return
INFO  23:18:43,836 - #20 pos
ERROR 23:18:43,836 - Oporavak od greske u definiciji formalnih parametara funkcije na liniji 8, koloni 36 za simbol "."!
INFO  23:18:43,836 - #45 [
INFO  23:18:43,836 - #20 idx
INFO  23:18:43,837 - #46 ]
INFO  23:18:43,837 - #40 ;
INFO  23:18:43,837 - #48 }
INFO  23:18:43,838 - #20 int
INFO  23:18:43,838 - #20 getn
INFO  23:18:43,838 - #43 (
INFO  23:18:43,838 - #20 int
INFO  23:18:43,839 - #20 idx
INFO  23:18:43,839 - #44 )
INFO  23:18:43,842 - #47 {
INFO  23:18:43,842 - #15 return
INFO  23:18:43,842 - #20 neg
INFO  23:18:43,842 - #45 [
INFO  23:18:43,842 - #20 idx
INFO  23:18:43,842 - #46 ]
INFO  23:18:43,842 - #40 ;
INFO  23:18:43,842 - #48 }
INFO  23:18:43,842 - #48 }
INFO  23:18:43,842 - #48 }
INFO  23:18:43,842 - #20 Table
INFO  23:18:43,843 - #20 val
INFO  23:18:43,843 - #40 ;
INFO  23:18:43,843 - #47 {
INFO  23:18:43,843 - #16 void
INFO  23:18:43,843 - #20 f
INFO  23:18:43,843 - #43 (
INFO  23:18:43,843 - #20 char
INFO  23:18:43,843 - #20 ch
INFO  23:18:43,843 - #41 ,
INFO  23:18:43,843 - #20 int
INFO  23:18:43,843 - #20 a
INFO  23:18:43,843 - #41 ,
INFO  23:18:43,843 - #20 int
INFO  23:18:43,844 - #20 arg
INFO  23:18:43,844 - #44 )
INFO  23:18:43,844 - #20 int
INFO  23:18:43,844 - #20 x
INFO  23:18:43,844 - #40 ;
INFO  23:18:43,844 - #47 {
INFO  23:18:43,844 - #20 x
INFO  23:18:43,844 - #37 =
INFO  23:18:43,844 - #20 arg
INFO  23:18:43,844 - #40 ;
INFO  23:18:43,844 - #48 }
INFO  23:18:43,845 - #16 void
INFO  23:18:43,845 - #20 main
INFO  23:18:43,845 - #43 (
INFO  23:18:43,845 - #44 )
INFO  23:18:43,845 - #20 int
INFO  23:18:43,845 - #20 x
INFO  23:18:43,845 - #41 ,
INFO  23:18:43,845 - #20 i
INFO  23:18:43,845 - #40 ;
INFO  23:18:43,845 - #20 char
INFO  23:18:43,845 - #20 c
INFO  23:18:43,845 - #40 ;
INFO  23:18:43,846 - #47 {
INFO  23:18:43,846 - #20 val
INFO  23:18:43,846 - #37 =
INFO  23:18:43,846 - #12 new
INFO  23:18:43,846 - #20 Table
INFO  23:18:43,846 - #40 ;
INFO  23:18:43,846 - #20 val
INFO  23:18:43,846 - #37 =
INFO  23:18:43,846 - #12 new
INFO  23:18:43,846 - #20 int
INFO  23:18:43,846 - #45 [
INFO  23:18:43,846 - #20 size
INFO  23:18:43,846 - #46 ]
INFO  23:18:43,846 - #40 ;
INFO  23:18:43,846 - #20 val
INFO  23:18:43,847 - #37 =
INFO  23:18:43,847 - #12 new
INFO  23:18:43,847 - #20 int
INFO  23:18:43,847 - #45 [
INFO  23:18:43,847 - #20 size
INFO  23:18:43,847 - #46 ]
INFO  23:18:43,847 - #40 ;
INFO  23:18:43,847 - #20 i
INFO  23:18:43,847 - #37 =
INFO  23:18:43,847 - #21 0
INFO  23:18:43,847 - #40 ;
INFO  23:18:43,847 - #10 do
INFO  23:18:43,847 - #47 {
INFO  23:18:43,848 - #20 val
INFO  23:18:43,848 - #42 .
ERROR 23:18:43,848 - 
Sintaksna greska na liniji 28, koloni 7 za simbol "."!
INFO  23:18:43,848 - #20 putp
INFO  23:18:43,848 - #43 (
INFO  23:18:43,848 - #21 0
INFO  23:18:43,848 - #41 ,
INFO  23:18:43,848 - #20 i
INFO  23:18:43,848 - #44 )
INFO  23:18:43,848 - #40 ;
INFO  23:18:43,848 - #20 val
INFO  23:18:43,848 - #42 .
INFO  23:18:43,848 - #20 putn
INFO  23:18:43,848 - #43 (
INFO  23:18:43,848 - #21 0
INFO  23:18:43,848 - #41 ,
INFO  23:18:43,848 - #20 i
INFO  23:18:43,848 - #44 )
INFO  23:18:43,848 - #40 ;
INFO  23:18:43,849 - #20 i
INFO  23:18:43,849 - #38 ++
INFO  23:18:43,849 - #40 ;
INFO  23:18:43,849 - #48 }
INFO  23:18:43,849 - #11 while
INFO  23:18:43,849 - #43 (
INFO  23:18:43,849 - #20 i
INFO  23:18:43,849 - #33 <
INFO  23:18:43,849 - #20 size
INFO  23:18:43,849 - #44 )
INFO  23:18:43,849 - #40 ;
INFO  23:18:43,849 - #20 f
INFO  23:18:43,849 - #43 (
INFO  23:18:43,849 - #20 c
INFO  23:18:43,849 - #41 ,
INFO  23:18:43,849 - #20 x
INFO  23:18:43,849 - #41 ,
INFO  23:18:43,849 - #20 i
INFO  23:18:43,849 - #44 )
INFO  23:18:43,849 - #40 ;
INFO  23:18:43,849 - #14 read
INFO  23:18:43,850 - #43 (
INFO  23:18:43,850 - #20 x
INFO  23:18:43,850 - #44 )
INFO  23:18:43,850 - #40 ;
INFO  23:18:43,850 - #48 }
INFO  23:18:43,850 - #48 }
ERROR 23:18:43,850 - Fatalna greska, parsiranje se ne moze nastaviti na liniji 38, koloni 2!
INFO  23:18:49,568 - Kompajliranje ulaznog fajla C:\Users\Anja\Desktop\PP1 projekat\workspace\MJCompiler\test\program.mj
INFO  23:18:49,613 - #2 program
INFO  23:18:49,613 - #20 p
INFO  23:18:49,613 - #7 const
INFO  23:18:49,614 - #20 int
INFO  23:18:49,614 - #20 size
INFO  23:18:49,615 - #37 =
INFO  23:18:49,615 - #21 10
INFO  23:18:49,615 - #40 ;
INFO  23:18:49,615 - #4 class
INFO  23:18:49,615 - #20 Table
INFO  23:18:49,616 - #47 {
INFO  23:18:49,616 - #20 int
INFO  23:18:49,616 - #20 pos
INFO  23:18:49,616 - #45 [
INFO  23:18:49,616 - #46 ]
INFO  23:18:49,616 - #41 ,
INFO  23:18:49,616 - #20 neg
INFO  23:18:49,616 - #45 [
INFO  23:18:49,616 - #46 ]
INFO  23:18:49,616 - #40 ;
INFO  23:18:49,617 - #47 {
INFO  23:18:49,617 - #16 void
INFO  23:18:49,617 - #20 putp
INFO  23:18:49,617 - #43 (
INFO  23:18:49,617 - #20 int
INFO  23:18:49,617 - #20 a
INFO  23:18:49,617 - #41 ,
INFO  23:18:49,618 - #20 int
INFO  23:18:49,618 - #20 idx
INFO  23:18:49,618 - #44 )
INFO  23:18:49,618 - #47 {
INFO  23:18:49,618 - #20 this
INFO  23:18:49,618 - #42 .
ERROR 23:18:49,618 - 
Sintaksna greska na liniji 7, koloni 36 za simbol "."!
INFO  23:18:49,618 - #20 pos
INFO  23:18:49,618 - #45 [
INFO  23:18:49,618 - #20 idx
INFO  23:18:49,619 - #46 ]
INFO  23:18:49,619 - #37 =
INFO  23:18:49,619 - #20 a
INFO  23:18:49,619 - #40 ;
INFO  23:18:49,619 - #48 }
INFO  23:18:49,619 - #16 void
INFO  23:18:49,619 - #20 putn
INFO  23:18:49,619 - #43 (
INFO  23:18:49,619 - #20 int
INFO  23:18:49,619 - #20 a
INFO  23:18:49,619 - #41 ,
INFO  23:18:49,620 - #20 int
INFO  23:18:49,620 - #20 idx
INFO  23:18:49,620 - #44 )
ERROR 23:18:49,620 - Oporavak od greske u definiciji formalnih parametara funkcije na liniji 7, koloni 36 za simbol "."!
INFO  23:18:49,620 - #47 {
INFO  23:18:49,620 - #20 this
INFO  23:18:49,620 - #42 .
ERROR 23:18:49,621 - 
Sintaksna greska na liniji 8, koloni 36 za simbol "."!
INFO  23:18:49,621 - #20 neg
INFO  23:18:49,621 - #45 [
INFO  23:18:49,621 - #20 idx
INFO  23:18:49,621 - #46 ]
INFO  23:18:49,621 - #37 =
INFO  23:18:49,621 - #20 a
INFO  23:18:49,621 - #40 ;
INFO  23:18:49,621 - #48 }
INFO  23:18:49,621 - #20 int
INFO  23:18:49,621 - #20 getp
INFO  23:18:49,621 - #43 (
INFO  23:18:49,621 - #20 int
INFO  23:18:49,621 - #20 idx
INFO  23:18:49,621 - #44 )
INFO  23:18:49,621 - #47 {
INFO  23:18:49,622 - #15 return
INFO  23:18:49,622 - #20 pos
ERROR 23:18:49,622 - Oporavak od greske u definiciji formalnih parametara funkcije na liniji 8, koloni 36 za simbol "."!
INFO  23:18:49,622 - #45 [
INFO  23:18:49,622 - #20 idx
INFO  23:18:49,622 - #46 ]
INFO  23:18:49,623 - #40 ;
INFO  23:18:49,623 - #48 }
INFO  23:18:49,623 - #20 int
INFO  23:18:49,623 - #20 getn
INFO  23:18:49,623 - #43 (
INFO  23:18:49,624 - #20 int
INFO  23:18:49,624 - #20 idx
INFO  23:18:49,624 - #44 )
INFO  23:18:49,624 - #47 {
INFO  23:18:49,624 - #15 return
INFO  23:18:49,624 - #20 neg
INFO  23:18:49,624 - #45 [
INFO  23:18:49,624 - #20 idx
INFO  23:18:49,624 - #46 ]
INFO  23:18:49,624 - #40 ;
INFO  23:18:49,624 - #48 }
INFO  23:18:49,624 - #48 }
INFO  23:18:49,625 - #48 }
INFO  23:18:49,625 - #20 Table
INFO  23:18:49,625 - #20 val
INFO  23:18:49,625 - #40 ;
INFO  23:18:49,625 - #47 {
INFO  23:18:49,626 - #16 void
INFO  23:18:49,626 - #20 f
INFO  23:18:49,626 - #43 (
INFO  23:18:49,626 - #20 char
INFO  23:18:49,626 - #20 ch
INFO  23:18:49,626 - #41 ,
INFO  23:18:49,626 - #20 int
INFO  23:18:49,626 - #20 a
INFO  23:18:49,627 - #41 ,
INFO  23:18:49,627 - #20 int
INFO  23:18:49,627 - #20 arg
INFO  23:18:49,627 - #44 )
INFO  23:18:49,627 - #20 int
INFO  23:18:49,627 - #20 x
INFO  23:18:49,627 - #40 ;
INFO  23:18:49,627 - #47 {
INFO  23:18:49,627 - #20 x
INFO  23:18:49,627 - #37 =
INFO  23:18:49,627 - #20 arg
INFO  23:18:49,627 - #40 ;
INFO  23:18:49,628 - #48 }
INFO  23:18:49,628 - #16 void
INFO  23:18:49,628 - #20 main
INFO  23:18:49,628 - #43 (
INFO  23:18:49,628 - #44 )
INFO  23:18:49,628 - #20 int
INFO  23:18:49,629 - #20 x
INFO  23:18:49,629 - #41 ,
INFO  23:18:49,629 - #20 i
INFO  23:18:49,629 - #40 ;
INFO  23:18:49,629 - #20 char
INFO  23:18:49,629 - #20 c
INFO  23:18:49,629 - #40 ;
INFO  23:18:49,629 - #47 {
INFO  23:18:49,630 - #20 val
INFO  23:18:49,630 - #37 =
INFO  23:18:49,630 - #12 new
INFO  23:18:49,630 - #20 Table
INFO  23:18:49,630 - #40 ;
INFO  23:18:49,630 - #20 val
INFO  23:18:49,630 - #37 =
INFO  23:18:49,630 - #12 new
INFO  23:18:49,630 - #20 int
INFO  23:18:49,630 - #45 [
INFO  23:18:49,630 - #20 size
INFO  23:18:49,630 - #46 ]
INFO  23:18:49,631 - #40 ;
INFO  23:18:49,631 - #20 val
INFO  23:18:49,631 - #37 =
INFO  23:18:49,631 - #12 new
INFO  23:18:49,633 - #20 int
INFO  23:18:49,633 - #45 [
INFO  23:18:49,633 - #20 size
INFO  23:18:49,633 - #46 ]
INFO  23:18:49,634 - #40 ;
INFO  23:18:49,634 - #20 i
INFO  23:18:49,634 - #37 =
INFO  23:18:49,634 - #21 0
INFO  23:18:49,634 - #40 ;
INFO  23:18:49,634 - #10 do
INFO  23:18:49,634 - #47 {
INFO  23:18:49,634 - #20 putp
INFO  23:18:49,634 - #43 (
INFO  23:18:49,635 - #21 0
INFO  23:18:49,635 - #41 ,
INFO  23:18:49,635 - #20 i
INFO  23:18:49,635 - #44 )
INFO  23:18:49,635 - #40 ;
INFO  23:18:49,635 - #20 putn
INFO  23:18:49,635 - #43 (
INFO  23:18:49,635 - #21 0
INFO  23:18:49,635 - #41 ,
INFO  23:18:49,635 - #20 i
INFO  23:18:49,635 - #44 )
INFO  23:18:49,635 - #40 ;
INFO  23:18:49,636 - #20 i
INFO  23:18:49,636 - #38 ++
INFO  23:18:49,636 - #40 ;
INFO  23:18:49,636 - #48 }
INFO  23:18:49,636 - #11 while
INFO  23:18:49,636 - #43 (
INFO  23:18:49,636 - #20 i
INFO  23:18:49,636 - #33 <
INFO  23:18:49,636 - #20 size
INFO  23:18:49,637 - #44 )
INFO  23:18:49,637 - #40 ;
INFO  23:18:49,637 - #20 f
INFO  23:18:49,638 - #43 (
INFO  23:18:49,638 - #20 c
INFO  23:18:49,638 - #41 ,
INFO  23:18:49,638 - #20 x
INFO  23:18:49,638 - #41 ,
INFO  23:18:49,638 - #20 i
INFO  23:18:49,638 - #44 )
INFO  23:18:49,638 - #40 ;
INFO  23:18:49,638 - #14 read
INFO  23:18:49,638 - #43 (
INFO  23:18:49,638 - #20 x
INFO  23:18:49,638 - #44 )
INFO  23:18:49,638 - #40 ;
INFO  23:18:49,638 - #48 }
INFO  23:18:49,638 - #48 }
INFO  23:18:49,639 - 

================SINTAKSNO STABLO====================


INFO  23:18:49,641 - Program(
  ProgName(
   p
  ) [ProgName]
  ProgramDeclMulti(
    ProgramDeclMulti(
      ProgramDeclMulti(
        ProgramDeclEps(
        ) [ProgramDeclEps]
        PartConstDeclaration(
          ConstDeclaration(
            Type(
             int
            ) [Type]
            ConstSingle(
              ConstPart(
               size
                NumConst(
                 10
                ) [NumConst]
              ) [ConstPart]
            ) [ConstSingle]
          ) [ConstDeclaration]
        ) [PartConstDeclaration]
      ) [ProgramDeclMulti]
      PartClassDeclaration(
        ClassDecl1(
         Table
          VarDeclSingle(
            VarDeclaration(
              Type(
               int
              ) [Type]
              VarMulti(
                VarSingle(
                  VarArray(
                   pos
                  ) [VarArray]
                ) [VarSingle]
                VarArray(
                 neg
                ) [VarArray]
              ) [VarMulti]
            ) [VarDeclaration]
          ) [VarDeclSingle]
          MethodDecMulti(
            MethodDeclSingle(
              MethodVoidDeclaration(
                MethodVoid2(
                  MethodVoidName(
                   putp
                  ) [MethodVoidName]
                  ParamSingle(
                    ParamError(
                    ) [ParamError]
                  ) [ParamSingle]
                  StatementSingle(
                    StmtReturnExpr(
                      ExprOne(
                        ExprSingle(
                          TermSingle(
                            FactorDesignator(
                              DesignatorArray(
                               pos
                                ExprOne(
                                  ExprSingle(
                                    TermSingle(
                                      FactorDesignator(
                                        DesignatorSimple(
                                         idx
                                        ) [DesignatorSimple]
                                      ) [FactorDesignator]
                                    ) [TermSingle]
                                  ) [ExprSingle]
                                ) [ExprOne]
                              ) [DesignatorArray]
                            ) [FactorDesignator]
                          ) [TermSingle]
                        ) [ExprSingle]
                      ) [ExprOne]
                    ) [StmtReturnExpr]
                  ) [StatementSingle]
                ) [MethodVoid2]
              ) [MethodVoidDeclaration]
            ) [MethodDeclSingle]
            MethodTypeDeclaration(
              MethodType2(
                MethodTypeName(
                  Type(
                   int
                  ) [Type]
                 getn
                ) [MethodTypeName]
                ParamSingle(
                  ParamNormal(
                    Type(
                     int
                    ) [Type]
                   idx
                  ) [ParamNormal]
                ) [ParamSingle]
                StatementSingle(
                  StmtReturnExpr(
                    ExprOne(
                      ExprSingle(
                        TermSingle(
                          FactorDesignator(
                            DesignatorArray(
                             neg
                              ExprOne(
                                ExprSingle(
                                  TermSingle(
                                    FactorDesignator(
                                      DesignatorSimple(
                                       idx
                                      ) [DesignatorSimple]
                                    ) [FactorDesignator]
                                  ) [TermSingle]
                                ) [ExprSingle]
                              ) [ExprOne]
                            ) [DesignatorArray]
                          ) [FactorDesignator]
                        ) [TermSingle]
                      ) [ExprSingle]
                    ) [ExprOne]
                  ) [StmtReturnExpr]
                ) [StatementSingle]
              ) [MethodType2]
            ) [MethodTypeDeclaration]
          ) [MethodDecMulti]
        ) [ClassDecl1]
      ) [PartClassDeclaration]
    ) [ProgramDeclMulti]
    PartVarDeclaration(
      GlobalVarDeclaration(
        Type(
         Table
        ) [Type]
        GlobalVarSingle(
          GlobalVarNormal(
           val
          ) [GlobalVarNormal]
        ) [GlobalVarSingle]
      ) [GlobalVarDeclaration]
    ) [PartVarDeclaration]
  ) [ProgramDeclMulti]
  MethodDecMulti(
    MethodDeclSingle(
      MethodVoidDeclaration(
        MethodVoid0(
          MethodVoidName(
           f
          ) [MethodVoidName]
          ParamMulti(
            ParamMulti(
              ParamSingle(
                ParamNormal(
                  Type(
                   char
                  ) [Type]
                 ch
                ) [ParamNormal]
              ) [ParamSingle]
              ParamNormal(
                Type(
                 int
                ) [Type]
               a
              ) [ParamNormal]
            ) [ParamMulti]
            ParamNormal(
              Type(
               int
              ) [Type]
             arg
            ) [ParamNormal]
          ) [ParamMulti]
          VarDeclSingle(
            VarDeclaration(
              Type(
               int
              ) [Type]
              VarSingle(
                VarNormal(
                 x
                ) [VarNormal]
              ) [VarSingle]
            ) [VarDeclaration]
          ) [VarDeclSingle]
          StatementSingle(
            StmtDesign(
              DesignatorAssignment(
                DesignatorSimple(
                 x
                ) [DesignatorSimple]
                AssignmentExpr(
                  ExprOne(
                    ExprSingle(
                      TermSingle(
                        FactorDesignator(
                          DesignatorSimple(
                           arg
                          ) [DesignatorSimple]
                        ) [FactorDesignator]
                      ) [TermSingle]
                    ) [ExprSingle]
                  ) [ExprOne]
                ) [AssignmentExpr]
              ) [DesignatorAssignment]
            ) [StmtDesign]
          ) [StatementSingle]
        ) [MethodVoid0]
      ) [MethodVoidDeclaration]
    ) [MethodDeclSingle]
    MethodVoidDeclaration(
      MethodVoid4(
        MethodVoidName(
         main
        ) [MethodVoidName]
        VarDeclMulti(
          VarDeclSingle(
            VarDeclaration(
              Type(
               int
              ) [Type]
              VarMulti(
                VarSingle(
                  VarNormal(
                   x
                  ) [VarNormal]
                ) [VarSingle]
                VarNormal(
                 i
                ) [VarNormal]
              ) [VarMulti]
            ) [VarDeclaration]
          ) [VarDeclSingle]
          VarDeclaration(
            Type(
             char
            ) [Type]
            VarSingle(
              VarNormal(
               c
              ) [VarNormal]
            ) [VarSingle]
          ) [VarDeclaration]
        ) [VarDeclMulti]
        StatementMulti(
          StatementMulti(
            StatementMulti(
              StatementMulti(
                StatementMulti(
                  StatementMulti(
                    StatementSingle(
                      StmtDesign(
                        DesignatorAssignment(
                          DesignatorSimple(
                           val
                          ) [DesignatorSimple]
                          AssignmentExpr(
                            ExprOne(
                              ExprSingle(
                                TermSingle(
                                  FactorNew(
                                    Type(
                                     Table
                                    ) [Type]
                                  ) [FactorNew]
                                ) [TermSingle]
                              ) [ExprSingle]
                            ) [ExprOne]
                          ) [AssignmentExpr]
                        ) [DesignatorAssignment]
                      ) [StmtDesign]
                    ) [StatementSingle]
                    StmtDesign(
                      DesignatorAssignment(
                        DesignatorSimple(
                         val
                        ) [DesignatorSimple]
                        AssignmentExpr(
                          ExprOne(
                            ExprSingle(
                              TermSingle(
                                FactorNewArray(
                                  Type(
                                   int
                                  ) [Type]
                                  ExprOne(
                                    ExprSingle(
                                      TermSingle(
                                        FactorDesignator(
                                          DesignatorSimple(
                                           size
                                          ) [DesignatorSimple]
                                        ) [FactorDesignator]
                                      ) [TermSingle]
                                    ) [ExprSingle]
                                  ) [ExprOne]
                                ) [FactorNewArray]
                              ) [TermSingle]
                            ) [ExprSingle]
                          ) [ExprOne]
                        ) [AssignmentExpr]
                      ) [DesignatorAssignment]
                    ) [StmtDesign]
                  ) [StatementMulti]
                  StmtDesign(
                    DesignatorAssignment(
                      DesignatorSimple(
                       val
                      ) [DesignatorSimple]
                      AssignmentExpr(
                        ExprOne(
                          ExprSingle(
                            TermSingle(
                              FactorNewArray(
                                Type(
                                 int
                                ) [Type]
                                ExprOne(
                                  ExprSingle(
                                    TermSingle(
                                      FactorDesignator(
                                        DesignatorSimple(
                                         size
                                        ) [DesignatorSimple]
                                      ) [FactorDesignator]
                                    ) [TermSingle]
                                  ) [ExprSingle]
                                ) [ExprOne]
                              ) [FactorNewArray]
                            ) [TermSingle]
                          ) [ExprSingle]
                        ) [ExprOne]
                      ) [AssignmentExpr]
                    ) [DesignatorAssignment]
                  ) [StmtDesign]
                ) [StatementMulti]
                StmtDesign(
                  DesignatorAssignment(
                    DesignatorSimple(
                     i
                    ) [DesignatorSimple]
                    AssignmentExpr(
                      ExprOne(
                        ExprSingle(
                          TermSingle(
                            FactorNumConst(
                             0
                            ) [FactorNumConst]
                          ) [TermSingle]
                        ) [ExprSingle]
                      ) [ExprOne]
                    ) [AssignmentExpr]
                  ) [DesignatorAssignment]
                ) [StmtDesign]
              ) [StatementMulti]
              StmtDoWhile(
                DoHead(
                ) [DoHead]
                Stmt(
                  StatementMulti(
                    StatementMulti(
                      StatementSingle(
                        StmtDesign(
                          DesignatorMethodCallParams(
                            DesignatorSimple(
                             putp
                            ) [DesignatorSimple]
                            ActParsMulti(
                              ActParsSingle(
                                ExprOne(
                                  ExprSingle(
                                    TermSingle(
                                      FactorNumConst(
                                       0
                                      ) [FactorNumConst]
                                    ) [TermSingle]
                                  ) [ExprSingle]
                                ) [ExprOne]
                              ) [ActParsSingle]
                              ExprOne(
                                ExprSingle(
                                  TermSingle(
                                    FactorDesignator(
                                      DesignatorSimple(
                                       i
                                      ) [DesignatorSimple]
                                    ) [FactorDesignator]
                                  ) [TermSingle]
                                ) [ExprSingle]
                              ) [ExprOne]
                            ) [ActParsMulti]
                          ) [DesignatorMethodCallParams]
                        ) [StmtDesign]
                      ) [StatementSingle]
                      StmtDesign(
                        DesignatorMethodCallParams(
                          DesignatorSimple(
                           putn
                          ) [DesignatorSimple]
                          ActParsMulti(
                            ActParsSingle(
                              ExprOne(
                                ExprSingle(
                                  TermSingle(
                                    FactorNumConst(
                                     0
                                    ) [FactorNumConst]
                                  ) [TermSingle]
                                ) [ExprSingle]
                              ) [ExprOne]
                            ) [ActParsSingle]
                            ExprOne(
                              ExprSingle(
                                TermSingle(
                                  FactorDesignator(
                                    DesignatorSimple(
                                     i
                                    ) [DesignatorSimple]
                                  ) [FactorDesignator]
                                ) [TermSingle]
                              ) [ExprSingle]
                            ) [ExprOne]
                          ) [ActParsMulti]
                        ) [DesignatorMethodCallParams]
                      ) [StmtDesign]
                    ) [StatementMulti]
                    StmtDesign(
                      DesignatorIncrement(
                        DesignatorSimple(
                         i
                        ) [DesignatorSimple]
                      ) [DesignatorIncrement]
                    ) [StmtDesign]
                  ) [StatementMulti]
                ) [Stmt]
                CondOne(
                  CondTermOne(
                    CondFactTwo(
                      ExprOne(
                        ExprSingle(
                          TermSingle(
                            FactorDesignator(
                              DesignatorSimple(
                               i
                              ) [DesignatorSimple]
                            ) [FactorDesignator]
                          ) [TermSingle]
                        ) [ExprSingle]
                      ) [ExprOne]
                      RelopLT(
                      ) [RelopLT]
                      ExprOne(
                        ExprSingle(
                          TermSingle(
                            FactorDesignator(
                              DesignatorSimple(
                               size
                              ) [DesignatorSimple]
                            ) [FactorDesignator]
                          ) [TermSingle]
                        ) [ExprSingle]
                      ) [ExprOne]
                    ) [CondFactTwo]
                  ) [CondTermOne]
                ) [CondOne]
              ) [StmtDoWhile]
            ) [StatementMulti]
            StmtDesign(
              DesignatorMethodCallParams(
                DesignatorSimple(
                 f
                ) [DesignatorSimple]
                ActParsMulti(
                  ActParsMulti(
                    ActParsSingle(
                      ExprOne(
                        ExprSingle(
                          TermSingle(
                            FactorDesignator(
                              DesignatorSimple(
                               c
                              ) [DesignatorSimple]
                            ) [FactorDesignator]
                          ) [TermSingle]
                        ) [ExprSingle]
                      ) [ExprOne]
                    ) [ActParsSingle]
                    ExprOne(
                      ExprSingle(
                        TermSingle(
                          FactorDesignator(
                            DesignatorSimple(
                             x
                            ) [DesignatorSimple]
                          ) [FactorDesignator]
                        ) [TermSingle]
                      ) [ExprSingle]
                    ) [ExprOne]
                  ) [ActParsMulti]
                  ExprOne(
                    ExprSingle(
                      TermSingle(
                        FactorDesignator(
                          DesignatorSimple(
                           i
                          ) [DesignatorSimple]
                        ) [FactorDesignator]
                      ) [TermSingle]
                    ) [ExprSingle]
                  ) [ExprOne]
                ) [ActParsMulti]
              ) [DesignatorMethodCallParams]
            ) [StmtDesign]
          ) [StatementMulti]
          StmtRead(
            DesignatorSimple(
             x
            ) [DesignatorSimple]
          ) [StmtRead]
        ) [StatementMulti]
      ) [MethodVoid4]
    ) [MethodVoidDeclaration]
  ) [MethodDecMulti]
) [Program]
INFO  23:18:49,642 - 

================SEMANTICKA OBRADA====================


INFO  23:18:49,657 - Deklarisana konstanta 'size' na liniji 2
INFO  23:18:49,657 - Deklarisan niz 'pos' na liniji 5
INFO  23:18:49,657 - Deklarisan niz 'neg' na liniji 5
ERROR 23:18:49,658 - Semanticka greska - 'idx' nije deklarisano na liniji 9
ERROR 23:18:49,658 - Semanticka greska - nevalidan pristup elementu niza na liniji 9
INFO  23:18:49,658 - Pristup elementu niza 'pos' na liniji 9
ERROR 23:18:49,658 - Semanticka greska - return naredba u funkciji koja nema povratnu vrednost na liniji 9
INFO  23:18:49,658 - Formalni parametar funkcije getn: 'idx' na liniji 10
INFO  23:18:49,658 - Pristup elementu niza 'neg' na liniji 10
ERROR 23:18:49,658 - Semanticka greska - nije pronadjen tip 'Table' u tabeli simbola!
INFO  23:18:49,658 - Deklarisana globalna promenljiva 'val' na liniji 14
INFO  23:18:49,658 - Formalni parametar funkcije f: 'ch' na liniji 16
INFO  23:18:49,658 - Formalni parametar funkcije f: 'a' na liniji 16
INFO  23:18:49,658 - Formalni parametar funkcije f: 'arg' na liniji 16
INFO  23:18:49,658 - Deklarisana promenljiva 'x' na liniji 17
INFO  23:18:49,659 - Deklarisana promenljiva 'x' na liniji 21
INFO  23:18:49,659 - Deklarisana promenljiva 'i' na liniji 21
INFO  23:18:49,659 - Deklarisana promenljiva 'c' na liniji 21
ERROR 23:18:49,659 - Semanticka greska - nije pronadjen tip 'Table' u tabeli simbola!
ERROR 23:18:49,659 - Semanticka greska - nekompatibilni tipovi za dodelu vrednosti na liniji 24
ERROR 23:18:49,659 - Semanticka greska - nekompatibilni tipovi za dodelu vrednosti na liniji 25
INFO  23:18:49,659 - Pronadjen poziv funkcije 'putp' na liniji 28
ERROR 23:18:49,659 - Semanticka greska - argumenti funkcije nisu odgovarajuci na liniji 28
ERROR 23:18:49,659 - Semanticka greska - 'putn' nije deklarisano na liniji 29
ERROR 23:18:49,659 - Semanticka greska - ime 'noObj' nije funkcija na liniji 29
INFO  23:18:49,659 - Pronadjen poziv funkcije 'f' na liniji 33
INFO  23:18:49,661 - ===================================
ERROR 23:18:49,661 - Parsiranje nije uspesno zavrseno!
INFO  23:19:11,929 - Kompajliranje ulaznog fajla C:\Users\Anja\Desktop\PP1 projekat\workspace\MJCompiler\test\program.mj
INFO  23:19:11,974 - #2 program
INFO  23:19:11,974 - #20 p
INFO  23:19:11,974 - #7 const
INFO  23:19:11,975 - #20 int
INFO  23:19:11,975 - #20 size
INFO  23:19:11,975 - #37 =
INFO  23:19:11,975 - #21 10
INFO  23:19:11,975 - #40 ;
INFO  23:19:11,976 - #4 class
INFO  23:19:11,977 - #20 Table
INFO  23:19:11,977 - #47 {
INFO  23:19:11,977 - #20 int
INFO  23:19:11,977 - #20 pos
INFO  23:19:11,977 - #45 [
INFO  23:19:11,977 - #46 ]
INFO  23:19:11,977 - #41 ,
INFO  23:19:11,978 - #20 neg
INFO  23:19:11,978 - #45 [
INFO  23:19:11,978 - #46 ]
INFO  23:19:11,978 - #40 ;
INFO  23:19:11,978 - #47 {
INFO  23:19:11,978 - #16 void
INFO  23:19:11,978 - #20 putp
INFO  23:19:11,978 - #43 (
INFO  23:19:11,978 - #20 int
INFO  23:19:11,979 - #20 a
INFO  23:19:11,979 - #41 ,
INFO  23:19:11,979 - #20 int
INFO  23:19:11,979 - #20 idx
INFO  23:19:11,979 - #44 )
INFO  23:19:11,979 - #47 {
INFO  23:19:11,979 - #20 this
INFO  23:19:11,980 - #42 .
ERROR 23:19:11,980 - 
Sintaksna greska na liniji 7, koloni 36 za simbol "."!
INFO  23:19:11,980 - #20 pos
INFO  23:19:11,980 - #45 [
INFO  23:19:11,980 - #20 idx
INFO  23:19:11,981 - #46 ]
INFO  23:19:11,982 - #37 =
INFO  23:19:11,982 - #20 a
INFO  23:19:11,982 - #40 ;
INFO  23:19:11,982 - #48 }
INFO  23:19:11,982 - #16 void
INFO  23:19:11,982 - #20 putn
INFO  23:19:11,982 - #43 (
INFO  23:19:11,982 - #20 int
INFO  23:19:11,982 - #20 a
INFO  23:19:11,982 - #41 ,
INFO  23:19:11,982 - #20 int
INFO  23:19:11,983 - #20 idx
INFO  23:19:11,983 - #44 )
ERROR 23:19:11,983 - Oporavak od greske u definiciji formalnih parametara funkcije na liniji 7, koloni 36 za simbol "."!
INFO  23:19:11,983 - #47 {
INFO  23:19:11,983 - #20 this
INFO  23:19:11,984 - #42 .
ERROR 23:19:11,984 - 
Sintaksna greska na liniji 8, koloni 36 za simbol "."!
INFO  23:19:11,984 - #20 neg
INFO  23:19:11,984 - #45 [
INFO  23:19:11,984 - #20 idx
INFO  23:19:11,984 - #46 ]
INFO  23:19:11,984 - #37 =
INFO  23:19:11,984 - #20 a
INFO  23:19:11,984 - #40 ;
INFO  23:19:11,984 - #48 }
INFO  23:19:11,985 - #20 int
INFO  23:19:11,985 - #20 getp
INFO  23:19:11,985 - #43 (
INFO  23:19:11,985 - #20 int
INFO  23:19:11,985 - #20 idx
INFO  23:19:11,985 - #44 )
INFO  23:19:11,985 - #47 {
INFO  23:19:11,985 - #15 return
INFO  23:19:11,985 - #20 pos
ERROR 23:19:11,985 - Oporavak od greske u definiciji formalnih parametara funkcije na liniji 8, koloni 36 za simbol "."!
INFO  23:19:11,986 - #45 [
INFO  23:19:11,986 - #20 idx
INFO  23:19:11,986 - #46 ]
INFO  23:19:11,986 - #40 ;
INFO  23:19:11,987 - #48 }
INFO  23:19:11,987 - #20 int
INFO  23:19:11,987 - #20 getn
INFO  23:19:11,987 - #43 (
INFO  23:19:11,987 - #20 int
INFO  23:19:11,988 - #20 idx
INFO  23:19:11,988 - #44 )
INFO  23:19:11,988 - #47 {
INFO  23:19:11,988 - #15 return
INFO  23:19:11,988 - #20 neg
INFO  23:19:11,988 - #45 [
INFO  23:19:11,988 - #20 idx
INFO  23:19:11,988 - #46 ]
INFO  23:19:11,988 - #40 ;
INFO  23:19:11,988 - #48 }
INFO  23:19:11,988 - #48 }
INFO  23:19:11,989 - #48 }
INFO  23:19:11,989 - #20 Table
INFO  23:19:11,989 - #20 val
INFO  23:19:11,989 - #40 ;
INFO  23:19:11,989 - #47 {
INFO  23:19:11,989 - #16 void
INFO  23:19:11,989 - #20 f
INFO  23:19:11,989 - #43 (
INFO  23:19:11,989 - #20 char
INFO  23:19:11,990 - #20 ch
INFO  23:19:11,990 - #41 ,
INFO  23:19:11,990 - #20 int
INFO  23:19:11,990 - #20 a
INFO  23:19:11,990 - #41 ,
INFO  23:19:11,990 - #20 int
INFO  23:19:11,990 - #20 arg
INFO  23:19:11,990 - #44 )
INFO  23:19:11,990 - #20 int
INFO  23:19:11,990 - #20 x
INFO  23:19:11,990 - #40 ;
INFO  23:19:11,990 - #47 {
INFO  23:19:11,990 - #20 x
INFO  23:19:11,991 - #37 =
INFO  23:19:11,991 - #20 arg
INFO  23:19:11,991 - #40 ;
INFO  23:19:11,991 - #48 }
INFO  23:19:11,991 - #16 void
INFO  23:19:11,992 - #20 main
INFO  23:19:11,992 - #43 (
INFO  23:19:11,992 - #44 )
INFO  23:19:11,992 - #20 int
INFO  23:19:11,992 - #20 x
INFO  23:19:11,992 - #41 ,
INFO  23:19:11,992 - #20 i
INFO  23:19:11,992 - #40 ;
INFO  23:19:11,992 - #20 char
INFO  23:19:11,992 - #20 c
INFO  23:19:11,992 - #40 ;
INFO  23:19:11,992 - #47 {
INFO  23:19:11,993 - #20 val
INFO  23:19:11,993 - #37 =
INFO  23:19:11,993 - #12 new
INFO  23:19:11,993 - #20 Table
INFO  23:19:11,993 - #40 ;
INFO  23:19:11,993 - #20 val
INFO  23:19:11,993 - #37 =
INFO  23:19:11,993 - #12 new
INFO  23:19:11,993 - #20 int
INFO  23:19:11,993 - #45 [
INFO  23:19:11,993 - #20 size
INFO  23:19:11,993 - #46 ]
INFO  23:19:11,993 - #40 ;
INFO  23:19:11,993 - #20 val
INFO  23:19:11,994 - #37 =
INFO  23:19:11,994 - #12 new
INFO  23:19:11,996 - #20 int
INFO  23:19:11,996 - #45 [
INFO  23:19:11,996 - #20 size
INFO  23:19:11,996 - #46 ]
INFO  23:19:11,996 - #40 ;
INFO  23:19:11,996 - #20 i
INFO  23:19:11,996 - #37 =
INFO  23:19:11,996 - #21 0
INFO  23:19:11,996 - #40 ;
INFO  23:19:11,997 - #10 do
INFO  23:19:11,997 - #47 {
INFO  23:19:11,997 - #20 putp
INFO  23:19:11,997 - #43 (
INFO  23:19:11,997 - #21 0
INFO  23:19:11,997 - #41 ,
INFO  23:19:11,998 - #20 i
INFO  23:19:11,998 - #44 )
INFO  23:19:11,998 - #40 ;
INFO  23:19:11,998 - #20 putn
INFO  23:19:11,998 - #43 (
INFO  23:19:11,998 - #21 0
INFO  23:19:11,998 - #41 ,
INFO  23:19:11,998 - #20 i
INFO  23:19:11,998 - #44 )
INFO  23:19:11,998 - #40 ;
INFO  23:19:11,998 - #20 i
INFO  23:19:11,998 - #38 ++
INFO  23:19:11,998 - #40 ;
INFO  23:19:11,999 - #48 }
INFO  23:19:11,999 - #11 while
INFO  23:19:11,999 - #43 (
INFO  23:19:11,999 - #20 i
INFO  23:19:11,999 - #33 <
INFO  23:19:11,999 - #20 size
INFO  23:19:12,000 - #44 )
INFO  23:19:12,000 - #40 ;
INFO  23:19:12,000 - #20 f
INFO  23:19:12,001 - #43 (
INFO  23:19:12,001 - #20 c
INFO  23:19:12,001 - #41 ,
INFO  23:19:12,001 - #20 x
INFO  23:19:12,001 - #41 ,
INFO  23:19:12,001 - #20 i
INFO  23:19:12,001 - #44 )
INFO  23:19:12,001 - #40 ;
INFO  23:19:12,001 - #14 read
INFO  23:19:12,001 - #43 (
INFO  23:19:12,001 - #20 x
INFO  23:19:12,002 - #44 )
INFO  23:19:12,002 - #40 ;
INFO  23:19:12,002 - #10 do
INFO  23:19:12,002 - #47 {
INFO  23:19:12,002 - #8 if
INFO  23:19:12,002 - #43 (
INFO  23:19:12,002 - #20 x
INFO  23:19:12,002 - #34 <=
INFO  23:19:12,002 - #21 0
INFO  23:19:12,003 - #44 )
INFO  23:19:12,003 - #3 break
INFO  23:19:12,003 - #40 ;
INFO  23:19:12,003 - #8 if
INFO  23:19:12,004 - #43 (
INFO  23:19:12,004 - #21 0
INFO  23:19:12,004 - #34 <=
INFO  23:19:12,004 - #20 x
INFO  23:19:12,004 - #35 &&
INFO  23:19:12,004 - #20 x
INFO  23:19:12,004 - #33 <
INFO  23:19:12,004 - #20 size
INFO  23:19:12,004 - #44 )
INFO  23:19:12,004 - #47 {
INFO  23:19:12,004 - #20 putp
INFO  23:19:12,004 - #43 (
INFO  23:19:12,004 - #20 getp
INFO  23:19:12,004 - #43 (
INFO  23:19:12,005 - #20 x
INFO  23:19:12,005 - #44 )
INFO  23:19:12,005 - #24 +
INFO  23:19:12,005 - #21 1
INFO  23:19:12,005 - #44 )
INFO  23:19:12,006 - #40 ;
INFO  23:19:12,006 - #48 }
INFO  23:19:12,006 - #6 else
INFO  23:19:12,006 - #8 if
INFO  23:19:12,006 - #43 (
INFO  23:19:12,006 - #20 size
INFO  23:19:12,006 - #33 <
INFO  23:19:12,006 - #20 x
INFO  23:19:12,006 - #35 &&
INFO  23:19:12,006 - #20 x
INFO  23:19:12,006 - #33 <
INFO  23:19:12,006 - #21 0
INFO  23:19:12,006 - #44 )
INFO  23:19:12,006 - #47 {
INFO  23:19:12,006 - #20 putn
INFO  23:19:12,006 - #43 (
INFO  23:19:12,006 - #20 getn
INFO  23:19:12,006 - #43 (
INFO  23:19:12,007 - #20 x
INFO  23:19:12,007 - #44 )
INFO  23:19:12,007 - #24 +
INFO  23:19:12,007 - #21 1
INFO  23:19:12,007 - #44 )
INFO  23:19:12,007 - #40 ;
INFO  23:19:12,007 - #48 }
INFO  23:19:12,007 - #14 read
INFO  23:19:12,008 - #43 (
INFO  23:19:12,008 - #20 x
INFO  23:19:12,008 - #44 )
INFO  23:19:12,008 - #40 ;
INFO  23:19:12,008 - #48 }
INFO  23:19:12,008 - #11 while
INFO  23:19:12,008 - #43 (
INFO  23:19:12,008 - #23 true
INFO  23:19:12,008 - #44 )
INFO  23:19:12,008 - #40 ;
INFO  23:19:12,008 - #13 print
INFO  23:19:12,008 - #43 (
INFO  23:19:12,008 - #20 x
INFO  23:19:12,008 - #26 *
INFO  23:19:12,009 - #21 0
INFO  23:19:12,009 - #49 ?
INFO  23:19:12,010 - #22 -
INFO  23:19:12,010 - #50 :
INFO  23:19:12,010 - #22 +
INFO  23:19:12,010 - #44 )
INFO  23:19:12,010 - #40 ;
INFO  23:19:12,010 - #48 }
INFO  23:19:12,010 - #48 }
INFO  23:19:12,011 - 

================SINTAKSNO STABLO====================


INFO  23:19:12,016 - Program(
  ProgName(
   p
  ) [ProgName]
  ProgramDeclMulti(
    ProgramDeclMulti(
      ProgramDeclMulti(
        ProgramDeclEps(
        ) [ProgramDeclEps]
        PartConstDeclaration(
          ConstDeclaration(
            Type(
             int
            ) [Type]
            ConstSingle(
              ConstPart(
               size
                NumConst(
                 10
                ) [NumConst]
              ) [ConstPart]
            ) [ConstSingle]
          ) [ConstDeclaration]
        ) [PartConstDeclaration]
      ) [ProgramDeclMulti]
      PartClassDeclaration(
        ClassDecl1(
         Table
          VarDeclSingle(
            VarDeclaration(
              Type(
               int
              ) [Type]
              VarMulti(
                VarSingle(
                  VarArray(
                   pos
                  ) [VarArray]
                ) [VarSingle]
                VarArray(
                 neg
                ) [VarArray]
              ) [VarMulti]
            ) [VarDeclaration]
          ) [VarDeclSingle]
          MethodDecMulti(
            MethodDeclSingle(
              MethodVoidDeclaration(
                MethodVoid2(
                  MethodVoidName(
                   putp
                  ) [MethodVoidName]
                  ParamSingle(
                    ParamError(
                    ) [ParamError]
                  ) [ParamSingle]
                  StatementSingle(
                    StmtReturnExpr(
                      ExprOne(
                        ExprSingle(
                          TermSingle(
                            FactorDesignator(
                              DesignatorArray(
                               pos
                                ExprOne(
                                  ExprSingle(
                                    TermSingle(
                                      FactorDesignator(
                                        DesignatorSimple(
                                         idx
                                        ) [DesignatorSimple]
                                      ) [FactorDesignator]
                                    ) [TermSingle]
                                  ) [ExprSingle]
                                ) [ExprOne]
                              ) [DesignatorArray]
                            ) [FactorDesignator]
                          ) [TermSingle]
                        ) [ExprSingle]
                      ) [ExprOne]
                    ) [StmtReturnExpr]
                  ) [StatementSingle]
                ) [MethodVoid2]
              ) [MethodVoidDeclaration]
            ) [MethodDeclSingle]
            MethodTypeDeclaration(
              MethodType2(
                MethodTypeName(
                  Type(
                   int
                  ) [Type]
                 getn
                ) [MethodTypeName]
                ParamSingle(
                  ParamNormal(
                    Type(
                     int
                    ) [Type]
                   idx
                  ) [ParamNormal]
                ) [ParamSingle]
                StatementSingle(
                  StmtReturnExpr(
                    ExprOne(
                      ExprSingle(
                        TermSingle(
                          FactorDesignator(
                            DesignatorArray(
                             neg
                              ExprOne(
                                ExprSingle(
                                  TermSingle(
                                    FactorDesignator(
                                      DesignatorSimple(
                                       idx
                                      ) [DesignatorSimple]
                                    ) [FactorDesignator]
                                  ) [TermSingle]
                                ) [ExprSingle]
                              ) [ExprOne]
                            ) [DesignatorArray]
                          ) [FactorDesignator]
                        ) [TermSingle]
                      ) [ExprSingle]
                    ) [ExprOne]
                  ) [StmtReturnExpr]
                ) [StatementSingle]
              ) [MethodType2]
            ) [MethodTypeDeclaration]
          ) [MethodDecMulti]
        ) [ClassDecl1]
      ) [PartClassDeclaration]
    ) [ProgramDeclMulti]
    PartVarDeclaration(
      GlobalVarDeclaration(
        Type(
         Table
        ) [Type]
        GlobalVarSingle(
          GlobalVarNormal(
           val
          ) [GlobalVarNormal]
        ) [GlobalVarSingle]
      ) [GlobalVarDeclaration]
    ) [PartVarDeclaration]
  ) [ProgramDeclMulti]
  MethodDecMulti(
    MethodDeclSingle(
      MethodVoidDeclaration(
        MethodVoid0(
          MethodVoidName(
           f
          ) [MethodVoidName]
          ParamMulti(
            ParamMulti(
              ParamSingle(
                ParamNormal(
                  Type(
                   char
                  ) [Type]
                 ch
                ) [ParamNormal]
              ) [ParamSingle]
              ParamNormal(
                Type(
                 int
                ) [Type]
               a
              ) [ParamNormal]
            ) [ParamMulti]
            ParamNormal(
              Type(
               int
              ) [Type]
             arg
            ) [ParamNormal]
          ) [ParamMulti]
          VarDeclSingle(
            VarDeclaration(
              Type(
               int
              ) [Type]
              VarSingle(
                VarNormal(
                 x
                ) [VarNormal]
              ) [VarSingle]
            ) [VarDeclaration]
          ) [VarDeclSingle]
          StatementSingle(
            StmtDesign(
              DesignatorAssignment(
                DesignatorSimple(
                 x
                ) [DesignatorSimple]
                AssignmentExpr(
                  ExprOne(
                    ExprSingle(
                      TermSingle(
                        FactorDesignator(
                          DesignatorSimple(
                           arg
                          ) [DesignatorSimple]
                        ) [FactorDesignator]
                      ) [TermSingle]
                    ) [ExprSingle]
                  ) [ExprOne]
                ) [AssignmentExpr]
              ) [DesignatorAssignment]
            ) [StmtDesign]
          ) [StatementSingle]
        ) [MethodVoid0]
      ) [MethodVoidDeclaration]
    ) [MethodDeclSingle]
    MethodVoidDeclaration(
      MethodVoid4(
        MethodVoidName(
         main
        ) [MethodVoidName]
        VarDeclMulti(
          VarDeclSingle(
            VarDeclaration(
              Type(
               int
              ) [Type]
              VarMulti(
                VarSingle(
                  VarNormal(
                   x
                  ) [VarNormal]
                ) [VarSingle]
                VarNormal(
                 i
                ) [VarNormal]
              ) [VarMulti]
            ) [VarDeclaration]
          ) [VarDeclSingle]
          VarDeclaration(
            Type(
             char
            ) [Type]
            VarSingle(
              VarNormal(
               c
              ) [VarNormal]
            ) [VarSingle]
          ) [VarDeclaration]
        ) [VarDeclMulti]
        StatementMulti(
          StatementMulti(
            StatementMulti(
              StatementMulti(
                StatementMulti(
                  StatementMulti(
                    StatementMulti(
                      StatementMulti(
                        StatementSingle(
                          StmtDesign(
                            DesignatorAssignment(
                              DesignatorSimple(
                               val
                              ) [DesignatorSimple]
                              AssignmentExpr(
                                ExprOne(
                                  ExprSingle(
                                    TermSingle(
                                      FactorNew(
                                        Type(
                                         Table
                                        ) [Type]
                                      ) [FactorNew]
                                    ) [TermSingle]
                                  ) [ExprSingle]
                                ) [ExprOne]
                              ) [AssignmentExpr]
                            ) [DesignatorAssignment]
                          ) [StmtDesign]
                        ) [StatementSingle]
                        StmtDesign(
                          DesignatorAssignment(
                            DesignatorSimple(
                             val
                            ) [DesignatorSimple]
                            AssignmentExpr(
                              ExprOne(
                                ExprSingle(
                                  TermSingle(
                                    FactorNewArray(
                                      Type(
                                       int
                                      ) [Type]
                                      ExprOne(
                                        ExprSingle(
                                          TermSingle(
                                            FactorDesignator(
                                              DesignatorSimple(
                                               size
                                              ) [DesignatorSimple]
                                            ) [FactorDesignator]
                                          ) [TermSingle]
                                        ) [ExprSingle]
                                      ) [ExprOne]
                                    ) [FactorNewArray]
                                  ) [TermSingle]
                                ) [ExprSingle]
                              ) [ExprOne]
                            ) [AssignmentExpr]
                          ) [DesignatorAssignment]
                        ) [StmtDesign]
                      ) [StatementMulti]
                      StmtDesign(
                        DesignatorAssignment(
                          DesignatorSimple(
                           val
                          ) [DesignatorSimple]
                          AssignmentExpr(
                            ExprOne(
                              ExprSingle(
                                TermSingle(
                                  FactorNewArray(
                                    Type(
                                     int
                                    ) [Type]
                                    ExprOne(
                                      ExprSingle(
                                        TermSingle(
                                          FactorDesignator(
                                            DesignatorSimple(
                                             size
                                            ) [DesignatorSimple]
                                          ) [FactorDesignator]
                                        ) [TermSingle]
                                      ) [ExprSingle]
                                    ) [ExprOne]
                                  ) [FactorNewArray]
                                ) [TermSingle]
                              ) [ExprSingle]
                            ) [ExprOne]
                          ) [AssignmentExpr]
                        ) [DesignatorAssignment]
                      ) [StmtDesign]
                    ) [StatementMulti]
                    StmtDesign(
                      DesignatorAssignment(
                        DesignatorSimple(
                         i
                        ) [DesignatorSimple]
                        AssignmentExpr(
                          ExprOne(
                            ExprSingle(
                              TermSingle(
                                FactorNumConst(
                                 0
                                ) [FactorNumConst]
                              ) [TermSingle]
                            ) [ExprSingle]
                          ) [ExprOne]
                        ) [AssignmentExpr]
                      ) [DesignatorAssignment]
                    ) [StmtDesign]
                  ) [StatementMulti]
                  StmtDoWhile(
                    DoHead(
                    ) [DoHead]
                    Stmt(
                      StatementMulti(
                        StatementMulti(
                          StatementSingle(
                            StmtDesign(
                              DesignatorMethodCallParams(
                                DesignatorSimple(
                                 putp
                                ) [DesignatorSimple]
                                ActParsMulti(
                                  ActParsSingle(
                                    ExprOne(
                                      ExprSingle(
                                        TermSingle(
                                          FactorNumConst(
                                           0
                                          ) [FactorNumConst]
                                        ) [TermSingle]
                                      ) [ExprSingle]
                                    ) [ExprOne]
                                  ) [ActParsSingle]
                                  ExprOne(
                                    ExprSingle(
                                      TermSingle(
                                        FactorDesignator(
                                          DesignatorSimple(
                                           i
                                          ) [DesignatorSimple]
                                        ) [FactorDesignator]
                                      ) [TermSingle]
                                    ) [ExprSingle]
                                  ) [ExprOne]
                                ) [ActParsMulti]
                              ) [DesignatorMethodCallParams]
                            ) [StmtDesign]
                          ) [StatementSingle]
                          StmtDesign(
                            DesignatorMethodCallParams(
                              DesignatorSimple(
                               putn
                              ) [DesignatorSimple]
                              ActParsMulti(
                                ActParsSingle(
                                  ExprOne(
                                    ExprSingle(
                                      TermSingle(
                                        FactorNumConst(
                                         0
                                        ) [FactorNumConst]
                                      ) [TermSingle]
                                    ) [ExprSingle]
                                  ) [ExprOne]
                                ) [ActParsSingle]
                                ExprOne(
                                  ExprSingle(
                                    TermSingle(
                                      FactorDesignator(
                                        DesignatorSimple(
                                         i
                                        ) [DesignatorSimple]
                                      ) [FactorDesignator]
                                    ) [TermSingle]
                                  ) [ExprSingle]
                                ) [ExprOne]
                              ) [ActParsMulti]
                            ) [DesignatorMethodCallParams]
                          ) [StmtDesign]
                        ) [StatementMulti]
                        StmtDesign(
                          DesignatorIncrement(
                            DesignatorSimple(
                             i
                            ) [DesignatorSimple]
                          ) [DesignatorIncrement]
                        ) [StmtDesign]
                      ) [StatementMulti]
                    ) [Stmt]
                    CondOne(
                      CondTermOne(
                        CondFactTwo(
                          ExprOne(
                            ExprSingle(
                              TermSingle(
                                FactorDesignator(
                                  DesignatorSimple(
                                   i
                                  ) [DesignatorSimple]
                                ) [FactorDesignator]
                              ) [TermSingle]
                            ) [ExprSingle]
                          ) [ExprOne]
                          RelopLT(
                          ) [RelopLT]
                          ExprOne(
                            ExprSingle(
                              TermSingle(
                                FactorDesignator(
                                  DesignatorSimple(
                                   size
                                  ) [DesignatorSimple]
                                ) [FactorDesignator]
                              ) [TermSingle]
                            ) [ExprSingle]
                          ) [ExprOne]
                        ) [CondFactTwo]
                      ) [CondTermOne]
                    ) [CondOne]
                  ) [StmtDoWhile]
                ) [StatementMulti]
                StmtDesign(
                  DesignatorMethodCallParams(
                    DesignatorSimple(
                     f
                    ) [DesignatorSimple]
                    ActParsMulti(
                      ActParsMulti(
                        ActParsSingle(
                          ExprOne(
                            ExprSingle(
                              TermSingle(
                                FactorDesignator(
                                  DesignatorSimple(
                                   c
                                  ) [DesignatorSimple]
                                ) [FactorDesignator]
                              ) [TermSingle]
                            ) [ExprSingle]
                          ) [ExprOne]
                        ) [ActParsSingle]
                        ExprOne(
                          ExprSingle(
                            TermSingle(
                              FactorDesignator(
                                DesignatorSimple(
                                 x
                                ) [DesignatorSimple]
                              ) [FactorDesignator]
                            ) [TermSingle]
                          ) [ExprSingle]
                        ) [ExprOne]
                      ) [ActParsMulti]
                      ExprOne(
                        ExprSingle(
                          TermSingle(
                            FactorDesignator(
                              DesignatorSimple(
                               i
                              ) [DesignatorSimple]
                            ) [FactorDesignator]
                          ) [TermSingle]
                        ) [ExprSingle]
                      ) [ExprOne]
                    ) [ActParsMulti]
                  ) [DesignatorMethodCallParams]
                ) [StmtDesign]
              ) [StatementMulti]
              StmtRead(
                DesignatorSimple(
                 x
                ) [DesignatorSimple]
              ) [StmtRead]
            ) [StatementMulti]
            StmtDoWhile(
              DoHead(
              ) [DoHead]
              Stmt(
                StatementMulti(
                  StatementMulti(
                    StatementSingle(
                      StmtIf(
                        StmtIfBody(
                          IfCond(
                            CondOne(
                              CondTermOne(
                                CondFactTwo(
                                  ExprOne(
                                    ExprSingle(
                                      TermSingle(
                                        FactorDesignator(
                                          DesignatorSimple(
                                           x
                                          ) [DesignatorSimple]
                                        ) [FactorDesignator]
                                      ) [TermSingle]
                                    ) [ExprSingle]
                                  ) [ExprOne]
                                  RelopLE(
                                  ) [RelopLE]
                                  ExprOne(
                                    ExprSingle(
                                      TermSingle(
                                        FactorNumConst(
                                         0
                                        ) [FactorNumConst]
                                      ) [TermSingle]
                                    ) [ExprSingle]
                                  ) [ExprOne]
                                ) [CondFactTwo]
                              ) [CondTermOne]
                            ) [CondOne]
                          ) [IfCond]
                          StmtBreak(
                          ) [StmtBreak]
                        ) [StmtIfBody]
                      ) [StmtIf]
                    ) [StatementSingle]
                    StmtIfElse(
                      StmtIfBody(
                        IfCond(
                          CondOne(
                            CondTermTwo(
                              CondTermOne(
                                CondFactTwo(
                                  ExprOne(
                                    ExprSingle(
                                      TermSingle(
                                        FactorNumConst(
                                         0
                                        ) [FactorNumConst]
                                      ) [TermSingle]
                                    ) [ExprSingle]
                                  ) [ExprOne]
                                  RelopLE(
                                  ) [RelopLE]
                                  ExprOne(
                                    ExprSingle(
                                      TermSingle(
                                        FactorDesignator(
                                          DesignatorSimple(
                                           x
                                          ) [DesignatorSimple]
                                        ) [FactorDesignator]
                                      ) [TermSingle]
                                    ) [ExprSingle]
                                  ) [ExprOne]
                                ) [CondFactTwo]
                              ) [CondTermOne]
                              CondFactTwo(
                                ExprOne(
                                  ExprSingle(
                                    TermSingle(
                                      FactorDesignator(
                                        DesignatorSimple(
                                         x
                                        ) [DesignatorSimple]
                                      ) [FactorDesignator]
                                    ) [TermSingle]
                                  ) [ExprSingle]
                                ) [ExprOne]
                                RelopLT(
                                ) [RelopLT]
                                ExprOne(
                                  ExprSingle(
                                    TermSingle(
                                      FactorDesignator(
                                        DesignatorSimple(
                                         size
                                        ) [DesignatorSimple]
                                      ) [FactorDesignator]
                                    ) [TermSingle]
                                  ) [ExprSingle]
                                ) [ExprOne]
                              ) [CondFactTwo]
                            ) [CondTermTwo]
                          ) [CondOne]
                        ) [IfCond]
                        Stmt(
                          StatementSingle(
                            StmtDesign(
                              DesignatorMethodCallParams(
                                DesignatorSimple(
                                 putp
                                ) [DesignatorSimple]
                                ActParsSingle(
                                  ExprOne(
                                    ExprAddop(
                                      ExprSingle(
                                        TermSingle(
                                          FuncCallParams(
                                            DesignatorSimple(
                                             getp
                                            ) [DesignatorSimple]
                                            ActParsSingle(
                                              ExprOne(
                                                ExprSingle(
                                                  TermSingle(
                                                    FactorDesignator(
                                                      DesignatorSimple(
                                                       x
                                                      ) [DesignatorSimple]
                                                    ) [FactorDesignator]
                                                  ) [TermSingle]
                                                ) [ExprSingle]
                                              ) [ExprOne]
                                            ) [ActParsSingle]
                                          ) [FuncCallParams]
                                        ) [TermSingle]
                                      ) [ExprSingle]
                                      AddopPlus(
                                      ) [AddopPlus]
                                      TermSingle(
                                        FactorNumConst(
                                         1
                                        ) [FactorNumConst]
                                      ) [TermSingle]
                                    ) [ExprAddop]
                                  ) [ExprOne]
                                ) [ActParsSingle]
                              ) [DesignatorMethodCallParams]
                            ) [StmtDesign]
                          ) [StatementSingle]
                        ) [Stmt]
                      ) [StmtIfBody]
                      StmtIf(
                        StmtIfBody(
                          IfCond(
                            CondOne(
                              CondTermTwo(
                                CondTermOne(
                                  CondFactTwo(
                                    ExprOne(
                                      ExprSingle(
                                        TermSingle(
                                          FactorDesignator(
                                            DesignatorSimple(
                                             size
                                            ) [DesignatorSimple]
                                          ) [FactorDesignator]
                                        ) [TermSingle]
                                      ) [ExprSingle]
                                    ) [ExprOne]
                                    RelopLT(
                                    ) [RelopLT]
                                    ExprOne(
                                      ExprSingle(
                                        TermSingle(
                                          FactorDesignator(
                                            DesignatorSimple(
                                             x
                                            ) [DesignatorSimple]
                                          ) [FactorDesignator]
                                        ) [TermSingle]
                                      ) [ExprSingle]
                                    ) [ExprOne]
                                  ) [CondFactTwo]
                                ) [CondTermOne]
                                CondFactTwo(
                                  ExprOne(
                                    ExprSingle(
                                      TermSingle(
                                        FactorDesignator(
                                          DesignatorSimple(
                                           x
                                          ) [DesignatorSimple]
                                        ) [FactorDesignator]
                                      ) [TermSingle]
                                    ) [ExprSingle]
                                  ) [ExprOne]
                                  RelopLT(
                                  ) [RelopLT]
                                  ExprOne(
                                    ExprSingle(
                                      TermSingle(
                                        FactorNumConst(
                                         0
                                        ) [FactorNumConst]
                                      ) [TermSingle]
                                    ) [ExprSingle]
                                  ) [ExprOne]
                                ) [CondFactTwo]
                              ) [CondTermTwo]
                            ) [CondOne]
                          ) [IfCond]
                          Stmt(
                            StatementSingle(
                              StmtDesign(
                                DesignatorMethodCallParams(
                                  DesignatorSimple(
                                   putn
                                  ) [DesignatorSimple]
                                  ActParsSingle(
                                    ExprOne(
                                      ExprAddop(
                                        ExprSingle(
                                          TermSingle(
                                            FuncCallParams(
                                              DesignatorSimple(
                                               getn
                                              ) [DesignatorSimple]
                                              ActParsSingle(
                                                ExprOne(
                                                  ExprSingle(
                                                    TermSingle(
                                                      FactorDesignator(
                                                        DesignatorSimple(
                                                         x
                                                        ) [DesignatorSimple]
                                                      ) [FactorDesignator]
                                                    ) [TermSingle]
                                                  ) [ExprSingle]
                                                ) [ExprOne]
                                              ) [ActParsSingle]
                                            ) [FuncCallParams]
                                          ) [TermSingle]
                                        ) [ExprSingle]
                                        AddopPlus(
                                        ) [AddopPlus]
                                        TermSingle(
                                          FactorNumConst(
                                           1
                                          ) [FactorNumConst]
                                        ) [TermSingle]
                                      ) [ExprAddop]
                                    ) [ExprOne]
                                  ) [ActParsSingle]
                                ) [DesignatorMethodCallParams]
                              ) [StmtDesign]
                            ) [StatementSingle]
                          ) [Stmt]
                        ) [StmtIfBody]
                      ) [StmtIf]
                    ) [StmtIfElse]
                  ) [StatementMulti]
                  StmtRead(
                    DesignatorSimple(
                     x
                    ) [DesignatorSimple]
                  ) [StmtRead]
                ) [StatementMulti]
              ) [Stmt]
              CondOne(
                CondTermOne(
                  CondFactOne(
                    ExprOne(
                      ExprSingle(
                        TermSingle(
                          FactorBoolConst(
                           true
                          ) [FactorBoolConst]
                        ) [TermSingle]
                      ) [ExprSingle]
                    ) [ExprOne]
                  ) [CondFactOne]
                ) [CondTermOne]
              ) [CondOne]
            ) [StmtDoWhile]
          ) [StatementMulti]
          StmtPrint(
            ExprTernary(
              ExprSingle(
                TermMulop(
                  TermSingle(
                    FactorDesignator(
                      DesignatorSimple(
                       x
                      ) [DesignatorSimple]
                    ) [FactorDesignator]
                  ) [TermSingle]
                  MulopMul(
                  ) [MulopMul]
                  FactorNumConst(
                   0
                  ) [FactorNumConst]
                ) [TermMulop]
              ) [ExprSingle]
              ExprSingle(
                TermSingle(
                  FactorCharConst(
                   -
                  ) [FactorCharConst]
                ) [TermSingle]
              ) [ExprSingle]
              ExprSingle(
                TermSingle(
                  FactorCharConst(
                   +
                  ) [FactorCharConst]
                ) [TermSingle]
              ) [ExprSingle]
            ) [ExprTernary]
          ) [StmtPrint]
        ) [StatementMulti]
      ) [MethodVoid4]
    ) [MethodVoidDeclaration]
  ) [MethodDecMulti]
) [Program]
INFO  23:19:12,017 - 

================SEMANTICKA OBRADA====================


INFO  23:19:12,033 - Deklarisana konstanta 'size' na liniji 2
INFO  23:19:12,033 - Deklarisan niz 'pos' na liniji 5
INFO  23:19:12,033 - Deklarisan niz 'neg' na liniji 5
ERROR 23:19:12,034 - Semanticka greska - 'idx' nije deklarisano na liniji 9
ERROR 23:19:12,034 - Semanticka greska - nevalidan pristup elementu niza na liniji 9
INFO  23:19:12,034 - Pristup elementu niza 'pos' na liniji 9
ERROR 23:19:12,034 - Semanticka greska - return naredba u funkciji koja nema povratnu vrednost na liniji 9
INFO  23:19:12,034 - Formalni parametar funkcije getn: 'idx' na liniji 10
INFO  23:19:12,034 - Pristup elementu niza 'neg' na liniji 10
ERROR 23:19:12,034 - Semanticka greska - nije pronadjen tip 'Table' u tabeli simbola!
INFO  23:19:12,034 - Deklarisana globalna promenljiva 'val' na liniji 14
INFO  23:19:12,034 - Formalni parametar funkcije f: 'ch' na liniji 16
INFO  23:19:12,034 - Formalni parametar funkcije f: 'a' na liniji 16
INFO  23:19:12,034 - Formalni parametar funkcije f: 'arg' na liniji 16
INFO  23:19:12,034 - Deklarisana promenljiva 'x' na liniji 17
INFO  23:19:12,034 - Deklarisana promenljiva 'x' na liniji 21
INFO  23:19:12,034 - Deklarisana promenljiva 'i' na liniji 21
INFO  23:19:12,034 - Deklarisana promenljiva 'c' na liniji 21
ERROR 23:19:12,035 - Semanticka greska - nije pronadjen tip 'Table' u tabeli simbola!
ERROR 23:19:12,035 - Semanticka greska - nekompatibilni tipovi za dodelu vrednosti na liniji 24
ERROR 23:19:12,035 - Semanticka greska - nekompatibilni tipovi za dodelu vrednosti na liniji 25
INFO  23:19:12,035 - Pronadjen poziv funkcije 'putp' na liniji 28
ERROR 23:19:12,035 - Semanticka greska - argumenti funkcije nisu odgovarajuci na liniji 28
ERROR 23:19:12,035 - Semanticka greska - 'putn' nije deklarisano na liniji 29
ERROR 23:19:12,035 - Semanticka greska - ime 'noObj' nije funkcija na liniji 29
INFO  23:19:12,035 - Pronadjen poziv funkcije 'f' na liniji 33
ERROR 23:19:12,035 - Semanticka greska - 'getp' nije deklarisano na liniji 40
ERROR 23:19:12,035 - Semanticka greska - ime 'noObj' nije funkcija na liniji 40
ERROR 23:19:12,035 - Semanticka greska - clanovi izraza nisu tipa int na liniji 40
ERROR 23:19:12,035 - Semanticka greska - clanovi izraza nisu kompatibilni na liniji 40
INFO  23:19:12,035 - Pronadjen poziv funkcije 'putp' na liniji 40
ERROR 23:19:12,035 - Semanticka greska - argumenti funkcije nisu odgovarajuci na liniji 40
ERROR 23:19:12,036 - Semanticka greska - 'putn' nije deklarisano na liniji 44
INFO  23:19:12,036 - Pronadjen poziv funkcije 'getn' na liniji 44
ERROR 23:19:12,036 - Semanticka greska - ime 'noObj' nije funkcija na liniji 44
INFO  23:19:12,036 - ===================================
ERROR 23:19:12,036 - Parsiranje nije uspesno zavrseno!
INFO  23:19:17,567 - Kompajliranje ulaznog fajla C:\Users\Anja\Desktop\PP1 projekat\workspace\MJCompiler\test\program.mj
INFO  23:19:17,613 - #2 program
INFO  23:19:17,613 - #20 p
INFO  23:19:17,613 - #7 const
INFO  23:19:17,614 - #20 int
INFO  23:19:17,614 - #20 size
INFO  23:19:17,614 - #37 =
INFO  23:19:17,615 - #21 10
INFO  23:19:17,615 - #40 ;
INFO  23:19:17,615 - #4 class
INFO  23:19:17,615 - #20 Table
INFO  23:19:17,615 - #47 {
INFO  23:19:17,616 - #20 int
INFO  23:19:17,616 - #20 pos
INFO  23:19:17,616 - #45 [
INFO  23:19:17,616 - #46 ]
INFO  23:19:17,616 - #41 ,
INFO  23:19:17,616 - #20 neg
INFO  23:19:17,616 - #45 [
INFO  23:19:17,616 - #46 ]
INFO  23:19:17,616 - #40 ;
INFO  23:19:17,616 - #47 {
INFO  23:19:17,617 - #16 void
INFO  23:19:17,617 - #20 putp
INFO  23:19:17,617 - #43 (
INFO  23:19:17,617 - #20 int
INFO  23:19:17,617 - #20 a
INFO  23:19:17,617 - #41 ,
INFO  23:19:17,617 - #20 int
INFO  23:19:17,617 - #20 idx
INFO  23:19:17,617 - #44 )
INFO  23:19:17,618 - #47 {
INFO  23:19:17,618 - #20 this
INFO  23:19:17,618 - #42 .
ERROR 23:19:17,618 - 
Sintaksna greska na liniji 7, koloni 36 za simbol "."!
INFO  23:19:17,618 - #20 pos
INFO  23:19:17,618 - #45 [
INFO  23:19:17,618 - #20 idx
INFO  23:19:17,619 - #46 ]
INFO  23:19:17,619 - #37 =
INFO  23:19:17,619 - #20 a
INFO  23:19:17,619 - #40 ;
INFO  23:19:17,619 - #48 }
INFO  23:19:17,619 - #16 void
INFO  23:19:17,619 - #20 putn
INFO  23:19:17,619 - #43 (
INFO  23:19:17,619 - #20 int
INFO  23:19:17,619 - #20 a
INFO  23:19:17,619 - #41 ,
INFO  23:19:17,619 - #20 int
INFO  23:19:17,620 - #20 idx
INFO  23:19:17,620 - #44 )
ERROR 23:19:17,620 - Oporavak od greske u definiciji formalnih parametara funkcije na liniji 7, koloni 36 za simbol "."!
INFO  23:19:17,620 - #47 {
INFO  23:19:17,620 - #20 this
INFO  23:19:17,620 - #42 .
ERROR 23:19:17,621 - 
Sintaksna greska na liniji 8, koloni 36 za simbol "."!
INFO  23:19:17,621 - #20 neg
INFO  23:19:17,621 - #45 [
INFO  23:19:17,621 - #20 idx
INFO  23:19:17,621 - #46 ]
INFO  23:19:17,622 - #37 =
INFO  23:19:17,622 - #20 a
INFO  23:19:17,623 - #40 ;
INFO  23:19:17,623 - #48 }
INFO  23:19:17,623 - #20 int
INFO  23:19:17,624 - #20 getp
INFO  23:19:17,624 - #43 (
INFO  23:19:17,624 - #20 int
INFO  23:19:17,624 - #20 idx
INFO  23:19:17,624 - #44 )
INFO  23:19:17,624 - #47 {
INFO  23:19:17,624 - #15 return
INFO  23:19:17,625 - #20 pos
ERROR 23:19:17,625 - Oporavak od greske u definiciji formalnih parametara funkcije na liniji 8, koloni 36 za simbol "."!
INFO  23:19:17,625 - #45 [
INFO  23:19:17,625 - #20 idx
INFO  23:19:17,625 - #46 ]
INFO  23:19:17,625 - #40 ;
INFO  23:19:17,626 - #48 }
INFO  23:19:17,626 - #20 int
INFO  23:19:17,626 - #20 getn
INFO  23:19:17,626 - #43 (
INFO  23:19:17,626 - #20 int
INFO  23:19:17,626 - #20 idx
INFO  23:19:17,627 - #44 )
INFO  23:19:17,627 - #47 {
INFO  23:19:17,627 - #15 return
INFO  23:19:17,627 - #20 neg
INFO  23:19:17,627 - #45 [
INFO  23:19:17,627 - #20 idx
INFO  23:19:17,627 - #46 ]
INFO  23:19:17,627 - #40 ;
INFO  23:19:17,627 - #48 }
INFO  23:19:17,627 - #48 }
INFO  23:19:17,628 - #48 }
INFO  23:19:17,628 - #20 Table
INFO  23:19:17,628 - #20 val
INFO  23:19:17,628 - #40 ;
INFO  23:19:17,628 - #47 {
INFO  23:19:17,628 - #16 void
INFO  23:19:17,628 - #20 f
INFO  23:19:17,628 - #43 (
INFO  23:19:17,628 - #20 char
INFO  23:19:17,628 - #20 ch
INFO  23:19:17,629 - #41 ,
INFO  23:19:17,629 - #20 int
INFO  23:19:17,629 - #20 a
INFO  23:19:17,629 - #41 ,
INFO  23:19:17,629 - #20 int
INFO  23:19:17,629 - #20 arg
INFO  23:19:17,629 - #44 )
INFO  23:19:17,629 - #20 int
INFO  23:19:17,629 - #20 x
INFO  23:19:17,629 - #40 ;
INFO  23:19:17,629 - #47 {
INFO  23:19:17,629 - #20 x
INFO  23:19:17,629 - #37 =
INFO  23:19:17,629 - #20 arg
INFO  23:19:17,629 - #40 ;
INFO  23:19:17,630 - #48 }
INFO  23:19:17,630 - #16 void
INFO  23:19:17,630 - #20 main
INFO  23:19:17,630 - #43 (
INFO  23:19:17,630 - #44 )
INFO  23:19:17,630 - #20 int
INFO  23:19:17,630 - #20 x
INFO  23:19:17,630 - #41 ,
INFO  23:19:17,631 - #20 i
INFO  23:19:17,631 - #40 ;
INFO  23:19:17,631 - #20 char
INFO  23:19:17,631 - #20 c
INFO  23:19:17,631 - #40 ;
INFO  23:19:17,631 - #47 {
INFO  23:19:17,631 - #20 val
INFO  23:19:17,631 - #37 =
INFO  23:19:17,631 - #12 new
INFO  23:19:17,631 - #20 Table
INFO  23:19:17,631 - #40 ;
INFO  23:19:17,632 - #20 val
INFO  23:19:17,632 - #37 =
INFO  23:19:17,632 - #12 new
INFO  23:19:17,632 - #20 int
INFO  23:19:17,632 - #45 [
INFO  23:19:17,632 - #20 size
INFO  23:19:17,632 - #46 ]
INFO  23:19:17,632 - #40 ;
INFO  23:19:17,632 - #20 val
INFO  23:19:17,632 - #37 =
INFO  23:19:17,632 - #12 new
INFO  23:19:17,635 - #20 int
INFO  23:19:17,635 - #45 [
INFO  23:19:17,635 - #20 size
INFO  23:19:17,635 - #46 ]
INFO  23:19:17,635 - #40 ;
INFO  23:19:17,635 - #20 i
INFO  23:19:17,635 - #37 =
INFO  23:19:17,635 - #21 0
INFO  23:19:17,635 - #40 ;
INFO  23:19:17,635 - #10 do
INFO  23:19:17,635 - #47 {
INFO  23:19:17,636 - #20 putp
INFO  23:19:17,636 - #43 (
INFO  23:19:17,636 - #21 0
INFO  23:19:17,636 - #41 ,
INFO  23:19:17,636 - #20 i
INFO  23:19:17,636 - #44 )
INFO  23:19:17,636 - #40 ;
INFO  23:19:17,636 - #20 putn
INFO  23:19:17,636 - #43 (
INFO  23:19:17,636 - #21 0
INFO  23:19:17,636 - #41 ,
INFO  23:19:17,636 - #20 i
INFO  23:19:17,636 - #44 )
INFO  23:19:17,637 - #40 ;
INFO  23:19:17,637 - #20 i
INFO  23:19:17,637 - #38 ++
INFO  23:19:17,637 - #40 ;
INFO  23:19:17,637 - #48 }
INFO  23:19:17,637 - #11 while
INFO  23:19:17,638 - #43 (
INFO  23:19:17,638 - #20 i
INFO  23:19:17,638 - #33 <
INFO  23:19:17,638 - #20 size
INFO  23:19:17,639 - #44 )
INFO  23:19:17,639 - #40 ;
INFO  23:19:17,639 - #20 f
INFO  23:19:17,640 - #43 (
INFO  23:19:17,640 - #20 c
INFO  23:19:17,640 - #41 ,
INFO  23:19:17,640 - #20 x
INFO  23:19:17,640 - #41 ,
INFO  23:19:17,641 - #20 i
INFO  23:19:17,641 - #44 )
INFO  23:19:17,641 - #40 ;
INFO  23:19:17,641 - #14 read
INFO  23:19:17,641 - #43 (
INFO  23:19:17,641 - #20 x
INFO  23:19:17,641 - #44 )
INFO  23:19:17,641 - #40 ;
INFO  23:19:17,641 - #10 do
INFO  23:19:17,641 - #47 {
INFO  23:19:17,642 - #8 if
INFO  23:19:17,642 - #43 (
INFO  23:19:17,642 - #20 x
INFO  23:19:17,642 - #34 <=
INFO  23:19:17,642 - #21 0
INFO  23:19:17,642 - #44 )
INFO  23:19:17,643 - #3 break
INFO  23:19:17,643 - #40 ;
INFO  23:19:17,643 - #8 if
INFO  23:19:17,643 - #43 (
INFO  23:19:17,644 - #21 0
INFO  23:19:17,644 - #34 <=
INFO  23:19:17,644 - #20 x
INFO  23:19:17,644 - #35 &&
INFO  23:19:17,644 - #20 x
INFO  23:19:17,644 - #33 <
INFO  23:19:17,644 - #20 size
INFO  23:19:17,644 - #44 )
INFO  23:19:17,644 - #47 {
INFO  23:19:17,644 - #20 putp
INFO  23:19:17,644 - #43 (
INFO  23:19:17,644 - #20 getp
INFO  23:19:17,644 - #43 (
INFO  23:19:17,644 - #20 x
INFO  23:19:17,644 - #44 )
INFO  23:19:17,644 - #24 +
INFO  23:19:17,644 - #21 1
INFO  23:19:17,645 - #44 )
INFO  23:19:17,645 - #40 ;
INFO  23:19:17,646 - #48 }
INFO  23:19:17,646 - #6 else
INFO  23:19:17,646 - #8 if
INFO  23:19:17,646 - #43 (
INFO  23:19:17,646 - #20 size
INFO  23:19:17,646 - #33 <
INFO  23:19:17,646 - #20 x
INFO  23:19:17,646 - #35 &&
INFO  23:19:17,646 - #20 x
INFO  23:19:17,646 - #33 <
INFO  23:19:17,646 - #21 0
INFO  23:19:17,646 - #44 )
INFO  23:19:17,646 - #47 {
INFO  23:19:17,646 - #20 putn
INFO  23:19:17,646 - #43 (
INFO  23:19:17,646 - #20 getn
INFO  23:19:17,646 - #43 (
INFO  23:19:17,647 - #20 x
INFO  23:19:17,647 - #44 )
INFO  23:19:17,647 - #24 +
INFO  23:19:17,647 - #21 1
INFO  23:19:17,647 - #44 )
INFO  23:19:17,647 - #40 ;
INFO  23:19:17,647 - #48 }
INFO  23:19:17,647 - #14 read
INFO  23:19:17,647 - #43 (
INFO  23:19:17,647 - #20 x
INFO  23:19:17,647 - #44 )
INFO  23:19:17,647 - #40 ;
INFO  23:19:17,647 - #48 }
INFO  23:19:17,647 - #11 while
INFO  23:19:17,647 - #43 (
INFO  23:19:17,647 - #23 true
INFO  23:19:17,647 - #44 )
INFO  23:19:17,648 - #40 ;
INFO  23:19:17,648 - #13 print
INFO  23:19:17,648 - #43 (
INFO  23:19:17,648 - #20 x
INFO  23:19:17,648 - #33 <
ERROR 23:19:17,648 - 
Sintaksna greska na liniji 48, koloni 11 za simbol "<"!
INFO  23:19:17,648 - #21 0
INFO  23:19:17,648 - #49 ?
INFO  23:19:17,648 - #22 -
INFO  23:19:17,648 - #50 :
INFO  23:19:17,648 - #22 +
INFO  23:19:17,648 - #44 )
INFO  23:19:17,648 - #40 ;
INFO  23:19:17,648 - #48 }
INFO  23:19:17,648 - #48 }
ERROR 23:19:17,648 - Fatalna greska, parsiranje se ne moze nastaviti na liniji 50, koloni 2!
INFO  23:19:21,320 - Kompajliranje ulaznog fajla C:\Users\Anja\Desktop\PP1 projekat\workspace\MJCompiler\test\program.mj
INFO  23:19:21,368 - #2 program
INFO  23:19:21,368 - #20 p
INFO  23:19:21,368 - #7 const
INFO  23:19:21,369 - #20 int
INFO  23:19:21,369 - #20 size
INFO  23:19:21,370 - #37 =
INFO  23:19:21,370 - #21 10
INFO  23:19:21,370 - #40 ;
INFO  23:19:21,370 - #4 class
INFO  23:19:21,370 - #20 Table
INFO  23:19:21,370 - #47 {
INFO  23:19:21,371 - #20 int
INFO  23:19:21,371 - #20 pos
INFO  23:19:21,371 - #45 [
INFO  23:19:21,371 - #46 ]
INFO  23:19:21,371 - #41 ,
INFO  23:19:21,371 - #20 neg
INFO  23:19:21,371 - #45 [
INFO  23:19:21,371 - #46 ]
INFO  23:19:21,371 - #40 ;
INFO  23:19:21,371 - #47 {
INFO  23:19:21,372 - #16 void
INFO  23:19:21,372 - #20 putp
INFO  23:19:21,372 - #43 (
INFO  23:19:21,372 - #20 int
INFO  23:19:21,372 - #20 a
INFO  23:19:21,372 - #41 ,
INFO  23:19:21,372 - #20 int
INFO  23:19:21,372 - #20 idx
INFO  23:19:21,373 - #44 )
INFO  23:19:21,373 - #47 {
INFO  23:19:21,373 - #20 this
INFO  23:19:21,373 - #42 .
ERROR 23:19:21,374 - 
Sintaksna greska na liniji 7, koloni 36 za simbol "."!
INFO  23:19:21,374 - #20 pos
INFO  23:19:21,374 - #45 [
INFO  23:19:21,374 - #20 idx
INFO  23:19:21,374 - #46 ]
INFO  23:19:21,374 - #37 =
INFO  23:19:21,374 - #20 a
INFO  23:19:21,374 - #40 ;
INFO  23:19:21,374 - #48 }
INFO  23:19:21,375 - #16 void
INFO  23:19:21,375 - #20 putn
INFO  23:19:21,375 - #43 (
INFO  23:19:21,375 - #20 int
INFO  23:19:21,375 - #20 a
INFO  23:19:21,375 - #41 ,
INFO  23:19:21,375 - #20 int
INFO  23:19:21,375 - #20 idx
INFO  23:19:21,375 - #44 )
ERROR 23:19:21,375 - Oporavak od greske u definiciji formalnih parametara funkcije na liniji 7, koloni 36 za simbol "."!
INFO  23:19:21,376 - #47 {
INFO  23:19:21,376 - #20 this
INFO  23:19:21,376 - #42 .
ERROR 23:19:21,376 - 
Sintaksna greska na liniji 8, koloni 36 za simbol "."!
INFO  23:19:21,376 - #20 neg
INFO  23:19:21,376 - #45 [
INFO  23:19:21,376 - #20 idx
INFO  23:19:21,376 - #46 ]
INFO  23:19:21,376 - #37 =
INFO  23:19:21,376 - #20 a
INFO  23:19:21,376 - #40 ;
INFO  23:19:21,377 - #48 }
INFO  23:19:21,377 - #20 int
INFO  23:19:21,377 - #20 getp
INFO  23:19:21,377 - #43 (
INFO  23:19:21,377 - #20 int
INFO  23:19:21,377 - #20 idx
INFO  23:19:21,377 - #44 )
INFO  23:19:21,377 - #47 {
INFO  23:19:21,377 - #15 return
INFO  23:19:21,377 - #20 pos
ERROR 23:19:21,378 - Oporavak od greske u definiciji formalnih parametara funkcije na liniji 8, koloni 36 za simbol "."!
INFO  23:19:21,378 - #45 [
INFO  23:19:21,378 - #20 idx
INFO  23:19:21,378 - #46 ]
INFO  23:19:21,379 - #40 ;
INFO  23:19:21,379 - #48 }
INFO  23:19:21,380 - #20 int
INFO  23:19:21,381 - #20 getn
INFO  23:19:21,381 - #43 (
INFO  23:19:21,381 - #20 int
INFO  23:19:21,381 - #20 idx
INFO  23:19:21,381 - #44 )
INFO  23:19:21,384 - #47 {
INFO  23:19:21,384 - #15 return
INFO  23:19:21,384 - #20 neg
INFO  23:19:21,384 - #45 [
INFO  23:19:21,385 - #20 idx
INFO  23:19:21,385 - #46 ]
INFO  23:19:21,385 - #40 ;
INFO  23:19:21,385 - #48 }
INFO  23:19:21,385 - #48 }
INFO  23:19:21,385 - #48 }
INFO  23:19:21,385 - #20 Table
INFO  23:19:21,386 - #20 val
INFO  23:19:21,386 - #40 ;
INFO  23:19:21,386 - #47 {
INFO  23:19:21,386 - #16 void
INFO  23:19:21,386 - #20 f
INFO  23:19:21,386 - #43 (
INFO  23:19:21,386 - #20 char
INFO  23:19:21,386 - #20 ch
INFO  23:19:21,386 - #41 ,
INFO  23:19:21,386 - #20 int
INFO  23:19:21,387 - #20 a
INFO  23:19:21,387 - #41 ,
INFO  23:19:21,387 - #20 int
INFO  23:19:21,387 - #20 arg
INFO  23:19:21,387 - #44 )
INFO  23:19:21,387 - #20 int
INFO  23:19:21,387 - #20 x
INFO  23:19:21,387 - #40 ;
INFO  23:19:21,387 - #47 {
INFO  23:19:21,387 - #20 x
INFO  23:19:21,387 - #37 =
INFO  23:19:21,387 - #20 arg
INFO  23:19:21,387 - #40 ;
INFO  23:19:21,388 - #48 }
INFO  23:19:21,388 - #16 void
INFO  23:19:21,388 - #20 main
INFO  23:19:21,388 - #43 (
INFO  23:19:21,388 - #44 )
INFO  23:19:21,388 - #20 int
INFO  23:19:21,388 - #20 x
INFO  23:19:21,388 - #41 ,
INFO  23:19:21,388 - #20 i
INFO  23:19:21,388 - #40 ;
INFO  23:19:21,388 - #20 char
INFO  23:19:21,389 - #20 c
INFO  23:19:21,389 - #40 ;
INFO  23:19:21,389 - #47 {
INFO  23:19:21,389 - #20 val
INFO  23:19:21,389 - #37 =
INFO  23:19:21,389 - #12 new
INFO  23:19:21,389 - #20 Table
INFO  23:19:21,389 - #40 ;
INFO  23:19:21,389 - #20 val
INFO  23:19:21,390 - #37 =
INFO  23:19:21,390 - #12 new
INFO  23:19:21,390 - #20 int
INFO  23:19:21,390 - #45 [
INFO  23:19:21,390 - #20 size
INFO  23:19:21,390 - #46 ]
INFO  23:19:21,390 - #40 ;
INFO  23:19:21,390 - #20 val
INFO  23:19:21,390 - #37 =
INFO  23:19:21,391 - #12 new
INFO  23:19:21,391 - #20 int
INFO  23:19:21,391 - #45 [
INFO  23:19:21,391 - #20 size
INFO  23:19:21,391 - #46 ]
INFO  23:19:21,391 - #40 ;
INFO  23:19:21,391 - #20 i
INFO  23:19:21,391 - #37 =
INFO  23:19:21,391 - #21 0
INFO  23:19:21,391 - #40 ;
INFO  23:19:21,391 - #10 do
INFO  23:19:21,391 - #47 {
INFO  23:19:21,392 - #20 putp
INFO  23:19:21,392 - #43 (
INFO  23:19:21,392 - #21 0
INFO  23:19:21,392 - #41 ,
INFO  23:19:21,392 - #20 i
INFO  23:19:21,392 - #44 )
INFO  23:19:21,392 - #40 ;
INFO  23:19:21,392 - #20 putn
INFO  23:19:21,392 - #43 (
INFO  23:19:21,393 - #21 0
INFO  23:19:21,393 - #41 ,
INFO  23:19:21,393 - #20 i
INFO  23:19:21,393 - #44 )
INFO  23:19:21,393 - #40 ;
INFO  23:19:21,393 - #20 i
INFO  23:19:21,393 - #38 ++
INFO  23:19:21,393 - #40 ;
INFO  23:19:21,393 - #48 }
INFO  23:19:21,393 - #11 while
INFO  23:19:21,393 - #43 (
INFO  23:19:21,393 - #20 i
INFO  23:19:21,393 - #33 <
INFO  23:19:21,393 - #20 size
INFO  23:19:21,394 - #44 )
INFO  23:19:21,394 - #40 ;
INFO  23:19:21,394 - #20 f
INFO  23:19:21,395 - #43 (
INFO  23:19:21,395 - #20 c
INFO  23:19:21,395 - #41 ,
INFO  23:19:21,395 - #20 x
INFO  23:19:21,395 - #41 ,
INFO  23:19:21,395 - #20 i
INFO  23:19:21,395 - #44 )
INFO  23:19:21,395 - #40 ;
INFO  23:19:21,395 - #14 read
INFO  23:19:21,395 - #43 (
INFO  23:19:21,395 - #20 x
INFO  23:19:21,395 - #44 )
INFO  23:19:21,395 - #40 ;
INFO  23:19:21,396 - #10 do
INFO  23:19:21,396 - #47 {
INFO  23:19:21,396 - #8 if
INFO  23:19:21,396 - #43 (
INFO  23:19:21,396 - #20 x
INFO  23:19:21,396 - #34 <=
INFO  23:19:21,396 - #21 0
INFO  23:19:21,396 - #44 )
INFO  23:19:21,396 - #3 break
INFO  23:19:21,397 - #40 ;
INFO  23:19:21,397 - #8 if
INFO  23:19:21,397 - #43 (
INFO  23:19:21,397 - #21 0
INFO  23:19:21,397 - #34 <=
INFO  23:19:21,397 - #20 x
INFO  23:19:21,397 - #35 &&
INFO  23:19:21,397 - #20 x
INFO  23:19:21,397 - #33 <
INFO  23:19:21,397 - #20 size
INFO  23:19:21,397 - #44 )
INFO  23:19:21,397 - #47 {
INFO  23:19:21,398 - #20 putp
INFO  23:19:21,398 - #43 (
INFO  23:19:21,398 - #20 getp
INFO  23:19:21,398 - #43 (
INFO  23:19:21,398 - #20 x
INFO  23:19:21,398 - #44 )
INFO  23:19:21,398 - #24 +
INFO  23:19:21,398 - #21 1
INFO  23:19:21,398 - #44 )
INFO  23:19:21,398 - #40 ;
INFO  23:19:21,399 - #48 }
INFO  23:19:21,399 - #6 else
INFO  23:19:21,399 - #8 if
INFO  23:19:21,399 - #43 (
INFO  23:19:21,399 - #20 size
INFO  23:19:21,399 - #33 <
INFO  23:19:21,399 - #20 x
INFO  23:19:21,399 - #35 &&
INFO  23:19:21,399 - #20 x
INFO  23:19:21,399 - #33 <
INFO  23:19:21,399 - #21 0
INFO  23:19:21,399 - #44 )
INFO  23:19:21,399 - #47 {
INFO  23:19:21,399 - #20 putn
INFO  23:19:21,399 - #43 (
INFO  23:19:21,399 - #20 getn
INFO  23:19:21,399 - #43 (
INFO  23:19:21,399 - #20 x
INFO  23:19:21,399 - #44 )
INFO  23:19:21,400 - #24 +
INFO  23:19:21,400 - #21 1
INFO  23:19:21,400 - #44 )
INFO  23:19:21,400 - #40 ;
INFO  23:19:21,400 - #48 }
INFO  23:19:21,400 - #14 read
INFO  23:19:21,400 - #43 (
INFO  23:19:21,400 - #20 x
INFO  23:19:21,400 - #44 )
INFO  23:19:21,400 - #40 ;
INFO  23:19:21,400 - #48 }
INFO  23:19:21,400 - #11 while
INFO  23:19:21,400 - #43 (
INFO  23:19:21,400 - #23 true
INFO  23:19:21,400 - #44 )
INFO  23:19:21,400 - #40 ;
INFO  23:19:21,400 - #13 print
INFO  23:19:21,400 - #43 (
INFO  23:19:21,400 - #20 x
INFO  23:19:21,400 - #24 +
INFO  23:19:21,400 - #21 0
INFO  23:19:21,400 - #49 ?
INFO  23:19:21,400 - #22 -
INFO  23:19:21,401 - #50 :
INFO  23:19:21,401 - #22 +
INFO  23:19:21,401 - #44 )
INFO  23:19:21,401 - #40 ;
INFO  23:19:21,401 - #48 }
INFO  23:19:21,401 - #48 }
INFO  23:19:21,401 - 

================SINTAKSNO STABLO====================


INFO  23:19:21,405 - Program(
  ProgName(
   p
  ) [ProgName]
  ProgramDeclMulti(
    ProgramDeclMulti(
      ProgramDeclMulti(
        ProgramDeclEps(
        ) [ProgramDeclEps]
        PartConstDeclaration(
          ConstDeclaration(
            Type(
             int
            ) [Type]
            ConstSingle(
              ConstPart(
               size
                NumConst(
                 10
                ) [NumConst]
              ) [ConstPart]
            ) [ConstSingle]
          ) [ConstDeclaration]
        ) [PartConstDeclaration]
      ) [ProgramDeclMulti]
      PartClassDeclaration(
        ClassDecl1(
         Table
          VarDeclSingle(
            VarDeclaration(
              Type(
               int
              ) [Type]
              VarMulti(
                VarSingle(
                  VarArray(
                   pos
                  ) [VarArray]
                ) [VarSingle]
                VarArray(
                 neg
                ) [VarArray]
              ) [VarMulti]
            ) [VarDeclaration]
          ) [VarDeclSingle]
          MethodDecMulti(
            MethodDeclSingle(
              MethodVoidDeclaration(
                MethodVoid2(
                  MethodVoidName(
                   putp
                  ) [MethodVoidName]
                  ParamSingle(
                    ParamError(
                    ) [ParamError]
                  ) [ParamSingle]
                  StatementSingle(
                    StmtReturnExpr(
                      ExprOne(
                        ExprSingle(
                          TermSingle(
                            FactorDesignator(
                              DesignatorArray(
                               pos
                                ExprOne(
                                  ExprSingle(
                                    TermSingle(
                                      FactorDesignator(
                                        DesignatorSimple(
                                         idx
                                        ) [DesignatorSimple]
                                      ) [FactorDesignator]
                                    ) [TermSingle]
                                  ) [ExprSingle]
                                ) [ExprOne]
                              ) [DesignatorArray]
                            ) [FactorDesignator]
                          ) [TermSingle]
                        ) [ExprSingle]
                      ) [ExprOne]
                    ) [StmtReturnExpr]
                  ) [StatementSingle]
                ) [MethodVoid2]
              ) [MethodVoidDeclaration]
            ) [MethodDeclSingle]
            MethodTypeDeclaration(
              MethodType2(
                MethodTypeName(
                  Type(
                   int
                  ) [Type]
                 getn
                ) [MethodTypeName]
                ParamSingle(
                  ParamNormal(
                    Type(
                     int
                    ) [Type]
                   idx
                  ) [ParamNormal]
                ) [ParamSingle]
                StatementSingle(
                  StmtReturnExpr(
                    ExprOne(
                      ExprSingle(
                        TermSingle(
                          FactorDesignator(
                            DesignatorArray(
                             neg
                              ExprOne(
                                ExprSingle(
                                  TermSingle(
                                    FactorDesignator(
                                      DesignatorSimple(
                                       idx
                                      ) [DesignatorSimple]
                                    ) [FactorDesignator]
                                  ) [TermSingle]
                                ) [ExprSingle]
                              ) [ExprOne]
                            ) [DesignatorArray]
                          ) [FactorDesignator]
                        ) [TermSingle]
                      ) [ExprSingle]
                    ) [ExprOne]
                  ) [StmtReturnExpr]
                ) [StatementSingle]
              ) [MethodType2]
            ) [MethodTypeDeclaration]
          ) [MethodDecMulti]
        ) [ClassDecl1]
      ) [PartClassDeclaration]
    ) [ProgramDeclMulti]
    PartVarDeclaration(
      GlobalVarDeclaration(
        Type(
         Table
        ) [Type]
        GlobalVarSingle(
          GlobalVarNormal(
           val
          ) [GlobalVarNormal]
        ) [GlobalVarSingle]
      ) [GlobalVarDeclaration]
    ) [PartVarDeclaration]
  ) [ProgramDeclMulti]
  MethodDecMulti(
    MethodDeclSingle(
      MethodVoidDeclaration(
        MethodVoid0(
          MethodVoidName(
           f
          ) [MethodVoidName]
          ParamMulti(
            ParamMulti(
              ParamSingle(
                ParamNormal(
                  Type(
                   char
                  ) [Type]
                 ch
                ) [ParamNormal]
              ) [ParamSingle]
              ParamNormal(
                Type(
                 int
                ) [Type]
               a
              ) [ParamNormal]
            ) [ParamMulti]
            ParamNormal(
              Type(
               int
              ) [Type]
             arg
            ) [ParamNormal]
          ) [ParamMulti]
          VarDeclSingle(
            VarDeclaration(
              Type(
               int
              ) [Type]
              VarSingle(
                VarNormal(
                 x
                ) [VarNormal]
              ) [VarSingle]
            ) [VarDeclaration]
          ) [VarDeclSingle]
          StatementSingle(
            StmtDesign(
              DesignatorAssignment(
                DesignatorSimple(
                 x
                ) [DesignatorSimple]
                AssignmentExpr(
                  ExprOne(
                    ExprSingle(
                      TermSingle(
                        FactorDesignator(
                          DesignatorSimple(
                           arg
                          ) [DesignatorSimple]
                        ) [FactorDesignator]
                      ) [TermSingle]
                    ) [ExprSingle]
                  ) [ExprOne]
                ) [AssignmentExpr]
              ) [DesignatorAssignment]
            ) [StmtDesign]
          ) [StatementSingle]
        ) [MethodVoid0]
      ) [MethodVoidDeclaration]
    ) [MethodDeclSingle]
    MethodVoidDeclaration(
      MethodVoid4(
        MethodVoidName(
         main
        ) [MethodVoidName]
        VarDeclMulti(
          VarDeclSingle(
            VarDeclaration(
              Type(
               int
              ) [Type]
              VarMulti(
                VarSingle(
                  VarNormal(
                   x
                  ) [VarNormal]
                ) [VarSingle]
                VarNormal(
                 i
                ) [VarNormal]
              ) [VarMulti]
            ) [VarDeclaration]
          ) [VarDeclSingle]
          VarDeclaration(
            Type(
             char
            ) [Type]
            VarSingle(
              VarNormal(
               c
              ) [VarNormal]
            ) [VarSingle]
          ) [VarDeclaration]
        ) [VarDeclMulti]
        StatementMulti(
          StatementMulti(
            StatementMulti(
              StatementMulti(
                StatementMulti(
                  StatementMulti(
                    StatementMulti(
                      StatementMulti(
                        StatementSingle(
                          StmtDesign(
                            DesignatorAssignment(
                              DesignatorSimple(
                               val
                              ) [DesignatorSimple]
                              AssignmentExpr(
                                ExprOne(
                                  ExprSingle(
                                    TermSingle(
                                      FactorNew(
                                        Type(
                                         Table
                                        ) [Type]
                                      ) [FactorNew]
                                    ) [TermSingle]
                                  ) [ExprSingle]
                                ) [ExprOne]
                              ) [AssignmentExpr]
                            ) [DesignatorAssignment]
                          ) [StmtDesign]
                        ) [StatementSingle]
                        StmtDesign(
                          DesignatorAssignment(
                            DesignatorSimple(
                             val
                            ) [DesignatorSimple]
                            AssignmentExpr(
                              ExprOne(
                                ExprSingle(
                                  TermSingle(
                                    FactorNewArray(
                                      Type(
                                       int
                                      ) [Type]
                                      ExprOne(
                                        ExprSingle(
                                          TermSingle(
                                            FactorDesignator(
                                              DesignatorSimple(
                                               size
                                              ) [DesignatorSimple]
                                            ) [FactorDesignator]
                                          ) [TermSingle]
                                        ) [ExprSingle]
                                      ) [ExprOne]
                                    ) [FactorNewArray]
                                  ) [TermSingle]
                                ) [ExprSingle]
                              ) [ExprOne]
                            ) [AssignmentExpr]
                          ) [DesignatorAssignment]
                        ) [StmtDesign]
                      ) [StatementMulti]
                      StmtDesign(
                        DesignatorAssignment(
                          DesignatorSimple(
                           val
                          ) [DesignatorSimple]
                          AssignmentExpr(
                            ExprOne(
                              ExprSingle(
                                TermSingle(
                                  FactorNewArray(
                                    Type(
                                     int
                                    ) [Type]
                                    ExprOne(
                                      ExprSingle(
                                        TermSingle(
                                          FactorDesignator(
                                            DesignatorSimple(
                                             size
                                            ) [DesignatorSimple]
                                          ) [FactorDesignator]
                                        ) [TermSingle]
                                      ) [ExprSingle]
                                    ) [ExprOne]
                                  ) [FactorNewArray]
                                ) [TermSingle]
                              ) [ExprSingle]
                            ) [ExprOne]
                          ) [AssignmentExpr]
                        ) [DesignatorAssignment]
                      ) [StmtDesign]
                    ) [StatementMulti]
                    StmtDesign(
                      DesignatorAssignment(
                        DesignatorSimple(
                         i
                        ) [DesignatorSimple]
                        AssignmentExpr(
                          ExprOne(
                            ExprSingle(
                              TermSingle(
                                FactorNumConst(
                                 0
                                ) [FactorNumConst]
                              ) [TermSingle]
                            ) [ExprSingle]
                          ) [ExprOne]
                        ) [AssignmentExpr]
                      ) [DesignatorAssignment]
                    ) [StmtDesign]
                  ) [StatementMulti]
                  StmtDoWhile(
                    DoHead(
                    ) [DoHead]
                    Stmt(
                      StatementMulti(
                        StatementMulti(
                          StatementSingle(
                            StmtDesign(
                              DesignatorMethodCallParams(
                                DesignatorSimple(
                                 putp
                                ) [DesignatorSimple]
                                ActParsMulti(
                                  ActParsSingle(
                                    ExprOne(
                                      ExprSingle(
                                        TermSingle(
                                          FactorNumConst(
                                           0
                                          ) [FactorNumConst]
                                        ) [TermSingle]
                                      ) [ExprSingle]
                                    ) [ExprOne]
                                  ) [ActParsSingle]
                                  ExprOne(
                                    ExprSingle(
                                      TermSingle(
                                        FactorDesignator(
                                          DesignatorSimple(
                                           i
                                          ) [DesignatorSimple]
                                        ) [FactorDesignator]
                                      ) [TermSingle]
                                    ) [ExprSingle]
                                  ) [ExprOne]
                                ) [ActParsMulti]
                              ) [DesignatorMethodCallParams]
                            ) [StmtDesign]
                          ) [StatementSingle]
                          StmtDesign(
                            DesignatorMethodCallParams(
                              DesignatorSimple(
                               putn
                              ) [DesignatorSimple]
                              ActParsMulti(
                                ActParsSingle(
                                  ExprOne(
                                    ExprSingle(
                                      TermSingle(
                                        FactorNumConst(
                                         0
                                        ) [FactorNumConst]
                                      ) [TermSingle]
                                    ) [ExprSingle]
                                  ) [ExprOne]
                                ) [ActParsSingle]
                                ExprOne(
                                  ExprSingle(
                                    TermSingle(
                                      FactorDesignator(
                                        DesignatorSimple(
                                         i
                                        ) [DesignatorSimple]
                                      ) [FactorDesignator]
                                    ) [TermSingle]
                                  ) [ExprSingle]
                                ) [ExprOne]
                              ) [ActParsMulti]
                            ) [DesignatorMethodCallParams]
                          ) [StmtDesign]
                        ) [StatementMulti]
                        StmtDesign(
                          DesignatorIncrement(
                            DesignatorSimple(
                             i
                            ) [DesignatorSimple]
                          ) [DesignatorIncrement]
                        ) [StmtDesign]
                      ) [StatementMulti]
                    ) [Stmt]
                    CondOne(
                      CondTermOne(
                        CondFactTwo(
                          ExprOne(
                            ExprSingle(
                              TermSingle(
                                FactorDesignator(
                                  DesignatorSimple(
                                   i
                                  ) [DesignatorSimple]
                                ) [FactorDesignator]
                              ) [TermSingle]
                            ) [ExprSingle]
                          ) [ExprOne]
                          RelopLT(
                          ) [RelopLT]
                          ExprOne(
                            ExprSingle(
                              TermSingle(
                                FactorDesignator(
                                  DesignatorSimple(
                                   size
                                  ) [DesignatorSimple]
                                ) [FactorDesignator]
                              ) [TermSingle]
                            ) [ExprSingle]
                          ) [ExprOne]
                        ) [CondFactTwo]
                      ) [CondTermOne]
                    ) [CondOne]
                  ) [StmtDoWhile]
                ) [StatementMulti]
                StmtDesign(
                  DesignatorMethodCallParams(
                    DesignatorSimple(
                     f
                    ) [DesignatorSimple]
                    ActParsMulti(
                      ActParsMulti(
                        ActParsSingle(
                          ExprOne(
                            ExprSingle(
                              TermSingle(
                                FactorDesignator(
                                  DesignatorSimple(
                                   c
                                  ) [DesignatorSimple]
                                ) [FactorDesignator]
                              ) [TermSingle]
                            ) [ExprSingle]
                          ) [ExprOne]
                        ) [ActParsSingle]
                        ExprOne(
                          ExprSingle(
                            TermSingle(
                              FactorDesignator(
                                DesignatorSimple(
                                 x
                                ) [DesignatorSimple]
                              ) [FactorDesignator]
                            ) [TermSingle]
                          ) [ExprSingle]
                        ) [ExprOne]
                      ) [ActParsMulti]
                      ExprOne(
                        ExprSingle(
                          TermSingle(
                            FactorDesignator(
                              DesignatorSimple(
                               i
                              ) [DesignatorSimple]
                            ) [FactorDesignator]
                          ) [TermSingle]
                        ) [ExprSingle]
                      ) [ExprOne]
                    ) [ActParsMulti]
                  ) [DesignatorMethodCallParams]
                ) [StmtDesign]
              ) [StatementMulti]
              StmtRead(
                DesignatorSimple(
                 x
                ) [DesignatorSimple]
              ) [StmtRead]
            ) [StatementMulti]
            StmtDoWhile(
              DoHead(
              ) [DoHead]
              Stmt(
                StatementMulti(
                  StatementMulti(
                    StatementSingle(
                      StmtIf(
                        StmtIfBody(
                          IfCond(
                            CondOne(
                              CondTermOne(
                                CondFactTwo(
                                  ExprOne(
                                    ExprSingle(
                                      TermSingle(
                                        FactorDesignator(
                                          DesignatorSimple(
                                           x
                                          ) [DesignatorSimple]
                                        ) [FactorDesignator]
                                      ) [TermSingle]
                                    ) [ExprSingle]
                                  ) [ExprOne]
                                  RelopLE(
                                  ) [RelopLE]
                                  ExprOne(
                                    ExprSingle(
                                      TermSingle(
                                        FactorNumConst(
                                         0
                                        ) [FactorNumConst]
                                      ) [TermSingle]
                                    ) [ExprSingle]
                                  ) [ExprOne]
                                ) [CondFactTwo]
                              ) [CondTermOne]
                            ) [CondOne]
                          ) [IfCond]
                          StmtBreak(
                          ) [StmtBreak]
                        ) [StmtIfBody]
                      ) [StmtIf]
                    ) [StatementSingle]
                    StmtIfElse(
                      StmtIfBody(
                        IfCond(
                          CondOne(
                            CondTermTwo(
                              CondTermOne(
                                CondFactTwo(
                                  ExprOne(
                                    ExprSingle(
                                      TermSingle(
                                        FactorNumConst(
                                         0
                                        ) [FactorNumConst]
                                      ) [TermSingle]
                                    ) [ExprSingle]
                                  ) [ExprOne]
                                  RelopLE(
                                  ) [RelopLE]
                                  ExprOne(
                                    ExprSingle(
                                      TermSingle(
                                        FactorDesignator(
                                          DesignatorSimple(
                                           x
                                          ) [DesignatorSimple]
                                        ) [FactorDesignator]
                                      ) [TermSingle]
                                    ) [ExprSingle]
                                  ) [ExprOne]
                                ) [CondFactTwo]
                              ) [CondTermOne]
                              CondFactTwo(
                                ExprOne(
                                  ExprSingle(
                                    TermSingle(
                                      FactorDesignator(
                                        DesignatorSimple(
                                         x
                                        ) [DesignatorSimple]
                                      ) [FactorDesignator]
                                    ) [TermSingle]
                                  ) [ExprSingle]
                                ) [ExprOne]
                                RelopLT(
                                ) [RelopLT]
                                ExprOne(
                                  ExprSingle(
                                    TermSingle(
                                      FactorDesignator(
                                        DesignatorSimple(
                                         size
                                        ) [DesignatorSimple]
                                      ) [FactorDesignator]
                                    ) [TermSingle]
                                  ) [ExprSingle]
                                ) [ExprOne]
                              ) [CondFactTwo]
                            ) [CondTermTwo]
                          ) [CondOne]
                        ) [IfCond]
                        Stmt(
                          StatementSingle(
                            StmtDesign(
                              DesignatorMethodCallParams(
                                DesignatorSimple(
                                 putp
                                ) [DesignatorSimple]
                                ActParsSingle(
                                  ExprOne(
                                    ExprAddop(
                                      ExprSingle(
                                        TermSingle(
                                          FuncCallParams(
                                            DesignatorSimple(
                                             getp
                                            ) [DesignatorSimple]
                                            ActParsSingle(
                                              ExprOne(
                                                ExprSingle(
                                                  TermSingle(
                                                    FactorDesignator(
                                                      DesignatorSimple(
                                                       x
                                                      ) [DesignatorSimple]
                                                    ) [FactorDesignator]
                                                  ) [TermSingle]
                                                ) [ExprSingle]
                                              ) [ExprOne]
                                            ) [ActParsSingle]
                                          ) [FuncCallParams]
                                        ) [TermSingle]
                                      ) [ExprSingle]
                                      AddopPlus(
                                      ) [AddopPlus]
                                      TermSingle(
                                        FactorNumConst(
                                         1
                                        ) [FactorNumConst]
                                      ) [TermSingle]
                                    ) [ExprAddop]
                                  ) [ExprOne]
                                ) [ActParsSingle]
                              ) [DesignatorMethodCallParams]
                            ) [StmtDesign]
                          ) [StatementSingle]
                        ) [Stmt]
                      ) [StmtIfBody]
                      StmtIf(
                        StmtIfBody(
                          IfCond(
                            CondOne(
                              CondTermTwo(
                                CondTermOne(
                                  CondFactTwo(
                                    ExprOne(
                                      ExprSingle(
                                        TermSingle(
                                          FactorDesignator(
                                            DesignatorSimple(
                                             size
                                            ) [DesignatorSimple]
                                          ) [FactorDesignator]
                                        ) [TermSingle]
                                      ) [ExprSingle]
                                    ) [ExprOne]
                                    RelopLT(
                                    ) [RelopLT]
                                    ExprOne(
                                      ExprSingle(
                                        TermSingle(
                                          FactorDesignator(
                                            DesignatorSimple(
                                             x
                                            ) [DesignatorSimple]
                                          ) [FactorDesignator]
                                        ) [TermSingle]
                                      ) [ExprSingle]
                                    ) [ExprOne]
                                  ) [CondFactTwo]
                                ) [CondTermOne]
                                CondFactTwo(
                                  ExprOne(
                                    ExprSingle(
                                      TermSingle(
                                        FactorDesignator(
                                          DesignatorSimple(
                                           x
                                          ) [DesignatorSimple]
                                        ) [FactorDesignator]
                                      ) [TermSingle]
                                    ) [ExprSingle]
                                  ) [ExprOne]
                                  RelopLT(
                                  ) [RelopLT]
                                  ExprOne(
                                    ExprSingle(
                                      TermSingle(
                                        FactorNumConst(
                                         0
                                        ) [FactorNumConst]
                                      ) [TermSingle]
                                    ) [ExprSingle]
                                  ) [ExprOne]
                                ) [CondFactTwo]
                              ) [CondTermTwo]
                            ) [CondOne]
                          ) [IfCond]
                          Stmt(
                            StatementSingle(
                              StmtDesign(
                                DesignatorMethodCallParams(
                                  DesignatorSimple(
                                   putn
                                  ) [DesignatorSimple]
                                  ActParsSingle(
                                    ExprOne(
                                      ExprAddop(
                                        ExprSingle(
                                          TermSingle(
                                            FuncCallParams(
                                              DesignatorSimple(
                                               getn
                                              ) [DesignatorSimple]
                                              ActParsSingle(
                                                ExprOne(
                                                  ExprSingle(
                                                    TermSingle(
                                                      FactorDesignator(
                                                        DesignatorSimple(
                                                         x
                                                        ) [DesignatorSimple]
                                                      ) [FactorDesignator]
                                                    ) [TermSingle]
                                                  ) [ExprSingle]
                                                ) [ExprOne]
                                              ) [ActParsSingle]
                                            ) [FuncCallParams]
                                          ) [TermSingle]
                                        ) [ExprSingle]
                                        AddopPlus(
                                        ) [AddopPlus]
                                        TermSingle(
                                          FactorNumConst(
                                           1
                                          ) [FactorNumConst]
                                        ) [TermSingle]
                                      ) [ExprAddop]
                                    ) [ExprOne]
                                  ) [ActParsSingle]
                                ) [DesignatorMethodCallParams]
                              ) [StmtDesign]
                            ) [StatementSingle]
                          ) [Stmt]
                        ) [StmtIfBody]
                      ) [StmtIf]
                    ) [StmtIfElse]
                  ) [StatementMulti]
                  StmtRead(
                    DesignatorSimple(
                     x
                    ) [DesignatorSimple]
                  ) [StmtRead]
                ) [StatementMulti]
              ) [Stmt]
              CondOne(
                CondTermOne(
                  CondFactOne(
                    ExprOne(
                      ExprSingle(
                        TermSingle(
                          FactorBoolConst(
                           true
                          ) [FactorBoolConst]
                        ) [TermSingle]
                      ) [ExprSingle]
                    ) [ExprOne]
                  ) [CondFactOne]
                ) [CondTermOne]
              ) [CondOne]
            ) [StmtDoWhile]
          ) [StatementMulti]
          StmtPrint(
            ExprTernary(
              ExprAddop(
                ExprSingle(
                  TermSingle(
                    FactorDesignator(
                      DesignatorSimple(
                       x
                      ) [DesignatorSimple]
                    ) [FactorDesignator]
                  ) [TermSingle]
                ) [ExprSingle]
                AddopPlus(
                ) [AddopPlus]
                TermSingle(
                  FactorNumConst(
                   0
                  ) [FactorNumConst]
                ) [TermSingle]
              ) [ExprAddop]
              ExprSingle(
                TermSingle(
                  FactorCharConst(
                   -
                  ) [FactorCharConst]
                ) [TermSingle]
              ) [ExprSingle]
              ExprSingle(
                TermSingle(
                  FactorCharConst(
                   +
                  ) [FactorCharConst]
                ) [TermSingle]
              ) [ExprSingle]
            ) [ExprTernary]
          ) [StmtPrint]
        ) [StatementMulti]
      ) [MethodVoid4]
    ) [MethodVoidDeclaration]
  ) [MethodDecMulti]
) [Program]
INFO  23:19:21,407 - 

================SEMANTICKA OBRADA====================


INFO  23:19:21,422 - Deklarisana konstanta 'size' na liniji 2
INFO  23:19:21,423 - Deklarisan niz 'pos' na liniji 5
INFO  23:19:21,423 - Deklarisan niz 'neg' na liniji 5
ERROR 23:19:21,423 - Semanticka greska - 'idx' nije deklarisano na liniji 9
ERROR 23:19:21,423 - Semanticka greska - nevalidan pristup elementu niza na liniji 9
INFO  23:19:21,423 - Pristup elementu niza 'pos' na liniji 9
ERROR 23:19:21,423 - Semanticka greska - return naredba u funkciji koja nema povratnu vrednost na liniji 9
INFO  23:19:21,423 - Formalni parametar funkcije getn: 'idx' na liniji 10
INFO  23:19:21,423 - Pristup elementu niza 'neg' na liniji 10
ERROR 23:19:21,423 - Semanticka greska - nije pronadjen tip 'Table' u tabeli simbola!
INFO  23:19:21,424 - Deklarisana globalna promenljiva 'val' na liniji 14
INFO  23:19:21,424 - Formalni parametar funkcije f: 'ch' na liniji 16
INFO  23:19:21,424 - Formalni parametar funkcije f: 'a' na liniji 16
INFO  23:19:21,424 - Formalni parametar funkcije f: 'arg' na liniji 16
INFO  23:19:21,424 - Deklarisana promenljiva 'x' na liniji 17
INFO  23:19:21,424 - Deklarisana promenljiva 'x' na liniji 21
INFO  23:19:21,424 - Deklarisana promenljiva 'i' na liniji 21
INFO  23:19:21,424 - Deklarisana promenljiva 'c' na liniji 21
ERROR 23:19:21,424 - Semanticka greska - nije pronadjen tip 'Table' u tabeli simbola!
ERROR 23:19:21,424 - Semanticka greska - nekompatibilni tipovi za dodelu vrednosti na liniji 24
ERROR 23:19:21,424 - Semanticka greska - nekompatibilni tipovi za dodelu vrednosti na liniji 25
INFO  23:19:21,424 - Pronadjen poziv funkcije 'putp' na liniji 28
ERROR 23:19:21,424 - Semanticka greska - argumenti funkcije nisu odgovarajuci na liniji 28
ERROR 23:19:21,424 - Semanticka greska - 'putn' nije deklarisano na liniji 29
ERROR 23:19:21,424 - Semanticka greska - ime 'noObj' nije funkcija na liniji 29
INFO  23:19:21,424 - Pronadjen poziv funkcije 'f' na liniji 33
ERROR 23:19:21,424 - Semanticka greska - 'getp' nije deklarisano na liniji 40
ERROR 23:19:21,424 - Semanticka greska - ime 'noObj' nije funkcija na liniji 40
ERROR 23:19:21,424 - Semanticka greska - clanovi izraza nisu tipa int na liniji 40
ERROR 23:19:21,425 - Semanticka greska - clanovi izraza nisu kompatibilni na liniji 40
INFO  23:19:21,425 - Pronadjen poziv funkcije 'putp' na liniji 40
ERROR 23:19:21,425 - Semanticka greska - argumenti funkcije nisu odgovarajuci na liniji 40
ERROR 23:19:21,425 - Semanticka greska - 'putn' nije deklarisano na liniji 44
INFO  23:19:21,425 - Pronadjen poziv funkcije 'getn' na liniji 44
ERROR 23:19:21,425 - Semanticka greska - ime 'noObj' nije funkcija na liniji 44
INFO  23:19:21,425 - ===================================
ERROR 23:19:21,425 - Parsiranje nije uspesno zavrseno!
INFO  23:19:25,368 - Kompajliranje ulaznog fajla C:\Users\Anja\Desktop\PP1 projekat\workspace\MJCompiler\test\program.mj
INFO  23:19:25,415 - #2 program
INFO  23:19:25,415 - #20 p
INFO  23:19:25,415 - #7 const
INFO  23:19:25,415 - #20 int
INFO  23:19:25,416 - #20 size
INFO  23:19:25,416 - #37 =
INFO  23:19:25,416 - #21 10
INFO  23:19:25,416 - #40 ;
INFO  23:19:25,417 - #4 class
INFO  23:19:25,417 - #20 Table
INFO  23:19:25,417 - #47 {
INFO  23:19:25,417 - #20 int
INFO  23:19:25,417 - #20 pos
INFO  23:19:25,417 - #45 [
INFO  23:19:25,418 - #46 ]
INFO  23:19:25,418 - #41 ,
INFO  23:19:25,418 - #20 neg
INFO  23:19:25,418 - #45 [
INFO  23:19:25,418 - #46 ]
INFO  23:19:25,418 - #40 ;
INFO  23:19:25,418 - #47 {
INFO  23:19:25,418 - #16 void
INFO  23:19:25,418 - #20 putp
INFO  23:19:25,419 - #43 (
INFO  23:19:25,419 - #20 int
INFO  23:19:25,419 - #20 a
INFO  23:19:25,419 - #41 ,
INFO  23:19:25,419 - #20 int
INFO  23:19:25,419 - #20 idx
INFO  23:19:25,419 - #44 )
INFO  23:19:25,420 - #47 {
INFO  23:19:25,420 - #20 this
INFO  23:19:25,420 - #42 .
ERROR 23:19:25,420 - 
Sintaksna greska na liniji 7, koloni 36 za simbol "."!
INFO  23:19:25,420 - #20 pos
INFO  23:19:25,420 - #45 [
INFO  23:19:25,420 - #20 idx
INFO  23:19:25,421 - #46 ]
INFO  23:19:25,421 - #37 =
INFO  23:19:25,421 - #20 a
INFO  23:19:25,421 - #40 ;
INFO  23:19:25,421 - #48 }
INFO  23:19:25,421 - #16 void
INFO  23:19:25,421 - #20 putn
INFO  23:19:25,421 - #43 (
INFO  23:19:25,421 - #20 int
INFO  23:19:25,421 - #20 a
INFO  23:19:25,421 - #41 ,
INFO  23:19:25,421 - #20 int
INFO  23:19:25,421 - #20 idx
INFO  23:19:25,422 - #44 )
ERROR 23:19:25,422 - Oporavak od greske u definiciji formalnih parametara funkcije na liniji 7, koloni 36 za simbol "."!
INFO  23:19:25,422 - #47 {
INFO  23:19:25,422 - #20 this
INFO  23:19:25,423 - #42 .
ERROR 23:19:25,423 - 
Sintaksna greska na liniji 8, koloni 36 za simbol "."!
INFO  23:19:25,423 - #20 neg
INFO  23:19:25,423 - #45 [
INFO  23:19:25,423 - #20 idx
INFO  23:19:25,423 - #46 ]
INFO  23:19:25,423 - #37 =
INFO  23:19:25,423 - #20 a
INFO  23:19:25,423 - #40 ;
INFO  23:19:25,423 - #48 }
INFO  23:19:25,423 - #20 int
INFO  23:19:25,423 - #20 getp
INFO  23:19:25,423 - #43 (
INFO  23:19:25,423 - #20 int
INFO  23:19:25,423 - #20 idx
INFO  23:19:25,423 - #44 )
INFO  23:19:25,424 - #47 {
INFO  23:19:25,424 - #15 return
INFO  23:19:25,424 - #20 pos
ERROR 23:19:25,424 - Oporavak od greske u definiciji formalnih parametara funkcije na liniji 8, koloni 36 za simbol "."!
INFO  23:19:25,424 - #45 [
INFO  23:19:25,424 - #20 idx
INFO  23:19:25,424 - #46 ]
INFO  23:19:25,425 - #40 ;
INFO  23:19:25,425 - #48 }
INFO  23:19:25,426 - #20 int
INFO  23:19:25,426 - #20 getn
INFO  23:19:25,426 - #43 (
INFO  23:19:25,427 - #20 int
INFO  23:19:25,427 - #20 idx
INFO  23:19:25,427 - #44 )
INFO  23:19:25,430 - #47 {
INFO  23:19:25,430 - #15 return
INFO  23:19:25,430 - #20 neg
INFO  23:19:25,430 - #45 [
INFO  23:19:25,430 - #20 idx
INFO  23:19:25,430 - #46 ]
INFO  23:19:25,430 - #40 ;
INFO  23:19:25,430 - #48 }
INFO  23:19:25,430 - #48 }
INFO  23:19:25,431 - #48 }
INFO  23:19:25,431 - #20 Table
INFO  23:19:25,431 - #20 val
INFO  23:19:25,431 - #40 ;
INFO  23:19:25,431 - #47 {
INFO  23:19:25,432 - #16 void
INFO  23:19:25,432 - #20 f
INFO  23:19:25,432 - #43 (
INFO  23:19:25,432 - #20 char
INFO  23:19:25,432 - #20 ch
INFO  23:19:25,432 - #41 ,
INFO  23:19:25,432 - #20 int
INFO  23:19:25,432 - #20 a
INFO  23:19:25,432 - #41 ,
INFO  23:19:25,432 - #20 int
INFO  23:19:25,432 - #20 arg
INFO  23:19:25,432 - #44 )
INFO  23:19:25,432 - #20 int
INFO  23:19:25,432 - #20 x
INFO  23:19:25,432 - #40 ;
INFO  23:19:25,432 - #47 {
INFO  23:19:25,432 - #20 x
INFO  23:19:25,432 - #37 =
INFO  23:19:25,432 - #20 arg
INFO  23:19:25,432 - #40 ;
INFO  23:19:25,433 - #48 }
INFO  23:19:25,433 - #16 void
INFO  23:19:25,433 - #20 main
INFO  23:19:25,433 - #43 (
INFO  23:19:25,433 - #44 )
INFO  23:19:25,433 - #20 int
INFO  23:19:25,433 - #20 x
INFO  23:19:25,433 - #41 ,
INFO  23:19:25,433 - #20 i
INFO  23:19:25,433 - #40 ;
INFO  23:19:25,433 - #20 char
INFO  23:19:25,433 - #20 c
INFO  23:19:25,433 - #40 ;
INFO  23:19:25,433 - #47 {
INFO  23:19:25,433 - #20 val
INFO  23:19:25,433 - #37 =
INFO  23:19:25,433 - #12 new
INFO  23:19:25,433 - #20 Table
INFO  23:19:25,433 - #40 ;
INFO  23:19:25,434 - #20 val
INFO  23:19:25,434 - #37 =
INFO  23:19:25,434 - #12 new
INFO  23:19:25,434 - #20 int
INFO  23:19:25,434 - #45 [
INFO  23:19:25,434 - #20 size
INFO  23:19:25,434 - #46 ]
INFO  23:19:25,434 - #40 ;
INFO  23:19:25,434 - #20 val
INFO  23:19:25,434 - #37 =
INFO  23:19:25,434 - #12 new
INFO  23:19:25,434 - #20 int
INFO  23:19:25,434 - #45 [
INFO  23:19:25,434 - #20 size
INFO  23:19:25,434 - #46 ]
INFO  23:19:25,434 - #40 ;
INFO  23:19:25,434 - #20 i
INFO  23:19:25,434 - #37 =
INFO  23:19:25,435 - #21 0
INFO  23:19:25,435 - #40 ;
INFO  23:19:25,435 - #10 do
INFO  23:19:25,435 - #47 {
INFO  23:19:25,435 - #20 putp
INFO  23:19:25,435 - #43 (
INFO  23:19:25,435 - #21 0
INFO  23:19:25,435 - #41 ,
INFO  23:19:25,436 - #20 i
INFO  23:19:25,436 - #44 )
INFO  23:19:25,436 - #40 ;
INFO  23:19:25,436 - #20 putn
INFO  23:19:25,436 - #43 (
INFO  23:19:25,436 - #21 0
INFO  23:19:25,436 - #41 ,
INFO  23:19:25,436 - #20 i
INFO  23:19:25,436 - #44 )
INFO  23:19:25,436 - #40 ;
INFO  23:19:25,436 - #20 i
INFO  23:19:25,436 - #38 ++
INFO  23:19:25,436 - #40 ;
INFO  23:19:25,436 - #48 }
INFO  23:19:25,436 - #11 while
INFO  23:19:25,437 - #43 (
INFO  23:19:25,437 - #20 i
INFO  23:19:25,437 - #33 <
INFO  23:19:25,437 - #20 size
INFO  23:19:25,438 - #44 )
INFO  23:19:25,438 - #40 ;
INFO  23:19:25,438 - #20 f
INFO  23:19:25,438 - #43 (
INFO  23:19:25,439 - #20 c
INFO  23:19:25,439 - #41 ,
INFO  23:19:25,439 - #20 x
INFO  23:19:25,439 - #41 ,
INFO  23:19:25,439 - #20 i
INFO  23:19:25,439 - #44 )
INFO  23:19:25,439 - #40 ;
INFO  23:19:25,439 - #14 read
INFO  23:19:25,439 - #43 (
INFO  23:19:25,439 - #20 x
INFO  23:19:25,439 - #44 )
INFO  23:19:25,439 - #40 ;
INFO  23:19:25,440 - #10 do
INFO  23:19:25,440 - #47 {
INFO  23:19:25,440 - #8 if
INFO  23:19:25,440 - #43 (
INFO  23:19:25,440 - #20 x
INFO  23:19:25,440 - #34 <=
INFO  23:19:25,440 - #21 0
INFO  23:19:25,441 - #44 )
INFO  23:19:25,441 - #3 break
INFO  23:19:25,441 - #40 ;
INFO  23:19:25,441 - #8 if
INFO  23:19:25,441 - #43 (
INFO  23:19:25,441 - #21 0
INFO  23:19:25,441 - #34 <=
INFO  23:19:25,442 - #20 x
INFO  23:19:25,442 - #35 &&
INFO  23:19:25,442 - #20 x
INFO  23:19:25,442 - #33 <
INFO  23:19:25,442 - #20 size
INFO  23:19:25,442 - #44 )
INFO  23:19:25,442 - #47 {
INFO  23:19:25,442 - #20 putp
INFO  23:19:25,442 - #43 (
INFO  23:19:25,442 - #20 getp
INFO  23:19:25,442 - #43 (
INFO  23:19:25,442 - #20 x
INFO  23:19:25,442 - #44 )
INFO  23:19:25,442 - #24 +
INFO  23:19:25,442 - #21 1
INFO  23:19:25,443 - #44 )
INFO  23:19:25,443 - #40 ;
INFO  23:19:25,443 - #48 }
INFO  23:19:25,443 - #6 else
INFO  23:19:25,443 - #8 if
INFO  23:19:25,443 - #43 (
INFO  23:19:25,443 - #20 size
INFO  23:19:25,443 - #33 <
INFO  23:19:25,443 - #20 x
INFO  23:19:25,443 - #35 &&
INFO  23:19:25,443 - #20 x
INFO  23:19:25,443 - #33 <
INFO  23:19:25,443 - #21 0
INFO  23:19:25,443 - #44 )
INFO  23:19:25,443 - #47 {
INFO  23:19:25,443 - #20 putn
INFO  23:19:25,443 - #43 (
INFO  23:19:25,443 - #20 getn
INFO  23:19:25,443 - #43 (
INFO  23:19:25,444 - #20 x
INFO  23:19:25,444 - #44 )
INFO  23:19:25,444 - #24 +
INFO  23:19:25,444 - #21 1
INFO  23:19:25,444 - #44 )
INFO  23:19:25,444 - #40 ;
INFO  23:19:25,444 - #48 }
INFO  23:19:25,444 - #14 read
INFO  23:19:25,444 - #43 (
INFO  23:19:25,444 - #20 x
INFO  23:19:25,444 - #44 )
INFO  23:19:25,444 - #40 ;
INFO  23:19:25,444 - #48 }
INFO  23:19:25,444 - #11 while
INFO  23:19:25,444 - #43 (
INFO  23:19:25,445 - #23 true
INFO  23:19:25,445 - #44 )
INFO  23:19:25,445 - #40 ;
INFO  23:19:25,445 - #13 print
INFO  23:19:25,445 - #43 (
INFO  23:19:25,445 - #20 x
INFO  23:19:25,445 - #49 ?
INFO  23:19:25,445 - #22 -
INFO  23:19:25,445 - #50 :
INFO  23:19:25,445 - #22 +
INFO  23:19:25,445 - #44 )
INFO  23:19:25,445 - #40 ;
INFO  23:19:25,445 - #48 }
INFO  23:19:25,445 - #48 }
INFO  23:19:25,446 - 

================SINTAKSNO STABLO====================


INFO  23:19:25,450 - Program(
  ProgName(
   p
  ) [ProgName]
  ProgramDeclMulti(
    ProgramDeclMulti(
      ProgramDeclMulti(
        ProgramDeclEps(
        ) [ProgramDeclEps]
        PartConstDeclaration(
          ConstDeclaration(
            Type(
             int
            ) [Type]
            ConstSingle(
              ConstPart(
               size
                NumConst(
                 10
                ) [NumConst]
              ) [ConstPart]
            ) [ConstSingle]
          ) [ConstDeclaration]
        ) [PartConstDeclaration]
      ) [ProgramDeclMulti]
      PartClassDeclaration(
        ClassDecl1(
         Table
          VarDeclSingle(
            VarDeclaration(
              Type(
               int
              ) [Type]
              VarMulti(
                VarSingle(
                  VarArray(
                   pos
                  ) [VarArray]
                ) [VarSingle]
                VarArray(
                 neg
                ) [VarArray]
              ) [VarMulti]
            ) [VarDeclaration]
          ) [VarDeclSingle]
          MethodDecMulti(
            MethodDeclSingle(
              MethodVoidDeclaration(
                MethodVoid2(
                  MethodVoidName(
                   putp
                  ) [MethodVoidName]
                  ParamSingle(
                    ParamError(
                    ) [ParamError]
                  ) [ParamSingle]
                  StatementSingle(
                    StmtReturnExpr(
                      ExprOne(
                        ExprSingle(
                          TermSingle(
                            FactorDesignator(
                              DesignatorArray(
                               pos
                                ExprOne(
                                  ExprSingle(
                                    TermSingle(
                                      FactorDesignator(
                                        DesignatorSimple(
                                         idx
                                        ) [DesignatorSimple]
                                      ) [FactorDesignator]
                                    ) [TermSingle]
                                  ) [ExprSingle]
                                ) [ExprOne]
                              ) [DesignatorArray]
                            ) [FactorDesignator]
                          ) [TermSingle]
                        ) [ExprSingle]
                      ) [ExprOne]
                    ) [StmtReturnExpr]
                  ) [StatementSingle]
                ) [MethodVoid2]
              ) [MethodVoidDeclaration]
            ) [MethodDeclSingle]
            MethodTypeDeclaration(
              MethodType2(
                MethodTypeName(
                  Type(
                   int
                  ) [Type]
                 getn
                ) [MethodTypeName]
                ParamSingle(
                  ParamNormal(
                    Type(
                     int
                    ) [Type]
                   idx
                  ) [ParamNormal]
                ) [ParamSingle]
                StatementSingle(
                  StmtReturnExpr(
                    ExprOne(
                      ExprSingle(
                        TermSingle(
                          FactorDesignator(
                            DesignatorArray(
                             neg
                              ExprOne(
                                ExprSingle(
                                  TermSingle(
                                    FactorDesignator(
                                      DesignatorSimple(
                                       idx
                                      ) [DesignatorSimple]
                                    ) [FactorDesignator]
                                  ) [TermSingle]
                                ) [ExprSingle]
                              ) [ExprOne]
                            ) [DesignatorArray]
                          ) [FactorDesignator]
                        ) [TermSingle]
                      ) [ExprSingle]
                    ) [ExprOne]
                  ) [StmtReturnExpr]
                ) [StatementSingle]
              ) [MethodType2]
            ) [MethodTypeDeclaration]
          ) [MethodDecMulti]
        ) [ClassDecl1]
      ) [PartClassDeclaration]
    ) [ProgramDeclMulti]
    PartVarDeclaration(
      GlobalVarDeclaration(
        Type(
         Table
        ) [Type]
        GlobalVarSingle(
          GlobalVarNormal(
           val
          ) [GlobalVarNormal]
        ) [GlobalVarSingle]
      ) [GlobalVarDeclaration]
    ) [PartVarDeclaration]
  ) [ProgramDeclMulti]
  MethodDecMulti(
    MethodDeclSingle(
      MethodVoidDeclaration(
        MethodVoid0(
          MethodVoidName(
           f
          ) [MethodVoidName]
          ParamMulti(
            ParamMulti(
              ParamSingle(
                ParamNormal(
                  Type(
                   char
                  ) [Type]
                 ch
                ) [ParamNormal]
              ) [ParamSingle]
              ParamNormal(
                Type(
                 int
                ) [Type]
               a
              ) [ParamNormal]
            ) [ParamMulti]
            ParamNormal(
              Type(
               int
              ) [Type]
             arg
            ) [ParamNormal]
          ) [ParamMulti]
          VarDeclSingle(
            VarDeclaration(
              Type(
               int
              ) [Type]
              VarSingle(
                VarNormal(
                 x
                ) [VarNormal]
              ) [VarSingle]
            ) [VarDeclaration]
          ) [VarDeclSingle]
          StatementSingle(
            StmtDesign(
              DesignatorAssignment(
                DesignatorSimple(
                 x
                ) [DesignatorSimple]
                AssignmentExpr(
                  ExprOne(
                    ExprSingle(
                      TermSingle(
                        FactorDesignator(
                          DesignatorSimple(
                           arg
                          ) [DesignatorSimple]
                        ) [FactorDesignator]
                      ) [TermSingle]
                    ) [ExprSingle]
                  ) [ExprOne]
                ) [AssignmentExpr]
              ) [DesignatorAssignment]
            ) [StmtDesign]
          ) [StatementSingle]
        ) [MethodVoid0]
      ) [MethodVoidDeclaration]
    ) [MethodDeclSingle]
    MethodVoidDeclaration(
      MethodVoid4(
        MethodVoidName(
         main
        ) [MethodVoidName]
        VarDeclMulti(
          VarDeclSingle(
            VarDeclaration(
              Type(
               int
              ) [Type]
              VarMulti(
                VarSingle(
                  VarNormal(
                   x
                  ) [VarNormal]
                ) [VarSingle]
                VarNormal(
                 i
                ) [VarNormal]
              ) [VarMulti]
            ) [VarDeclaration]
          ) [VarDeclSingle]
          VarDeclaration(
            Type(
             char
            ) [Type]
            VarSingle(
              VarNormal(
               c
              ) [VarNormal]
            ) [VarSingle]
          ) [VarDeclaration]
        ) [VarDeclMulti]
        StatementMulti(
          StatementMulti(
            StatementMulti(
              StatementMulti(
                StatementMulti(
                  StatementMulti(
                    StatementMulti(
                      StatementMulti(
                        StatementSingle(
                          StmtDesign(
                            DesignatorAssignment(
                              DesignatorSimple(
                               val
                              ) [DesignatorSimple]
                              AssignmentExpr(
                                ExprOne(
                                  ExprSingle(
                                    TermSingle(
                                      FactorNew(
                                        Type(
                                         Table
                                        ) [Type]
                                      ) [FactorNew]
                                    ) [TermSingle]
                                  ) [ExprSingle]
                                ) [ExprOne]
                              ) [AssignmentExpr]
                            ) [DesignatorAssignment]
                          ) [StmtDesign]
                        ) [StatementSingle]
                        StmtDesign(
                          DesignatorAssignment(
                            DesignatorSimple(
                             val
                            ) [DesignatorSimple]
                            AssignmentExpr(
                              ExprOne(
                                ExprSingle(
                                  TermSingle(
                                    FactorNewArray(
                                      Type(
                                       int
                                      ) [Type]
                                      ExprOne(
                                        ExprSingle(
                                          TermSingle(
                                            FactorDesignator(
                                              DesignatorSimple(
                                               size
                                              ) [DesignatorSimple]
                                            ) [FactorDesignator]
                                          ) [TermSingle]
                                        ) [ExprSingle]
                                      ) [ExprOne]
                                    ) [FactorNewArray]
                                  ) [TermSingle]
                                ) [ExprSingle]
                              ) [ExprOne]
                            ) [AssignmentExpr]
                          ) [DesignatorAssignment]
                        ) [StmtDesign]
                      ) [StatementMulti]
                      StmtDesign(
                        DesignatorAssignment(
                          DesignatorSimple(
                           val
                          ) [DesignatorSimple]
                          AssignmentExpr(
                            ExprOne(
                              ExprSingle(
                                TermSingle(
                                  FactorNewArray(
                                    Type(
                                     int
                                    ) [Type]
                                    ExprOne(
                                      ExprSingle(
                                        TermSingle(
                                          FactorDesignator(
                                            DesignatorSimple(
                                             size
                                            ) [DesignatorSimple]
                                          ) [FactorDesignator]
                                        ) [TermSingle]
                                      ) [ExprSingle]
                                    ) [ExprOne]
                                  ) [FactorNewArray]
                                ) [TermSingle]
                              ) [ExprSingle]
                            ) [ExprOne]
                          ) [AssignmentExpr]
                        ) [DesignatorAssignment]
                      ) [StmtDesign]
                    ) [StatementMulti]
                    StmtDesign(
                      DesignatorAssignment(
                        DesignatorSimple(
                         i
                        ) [DesignatorSimple]
                        AssignmentExpr(
                          ExprOne(
                            ExprSingle(
                              TermSingle(
                                FactorNumConst(
                                 0
                                ) [FactorNumConst]
                              ) [TermSingle]
                            ) [ExprSingle]
                          ) [ExprOne]
                        ) [AssignmentExpr]
                      ) [DesignatorAssignment]
                    ) [StmtDesign]
                  ) [StatementMulti]
                  StmtDoWhile(
                    DoHead(
                    ) [DoHead]
                    Stmt(
                      StatementMulti(
                        StatementMulti(
                          StatementSingle(
                            StmtDesign(
                              DesignatorMethodCallParams(
                                DesignatorSimple(
                                 putp
                                ) [DesignatorSimple]
                                ActParsMulti(
                                  ActParsSingle(
                                    ExprOne(
                                      ExprSingle(
                                        TermSingle(
                                          FactorNumConst(
                                           0
                                          ) [FactorNumConst]
                                        ) [TermSingle]
                                      ) [ExprSingle]
                                    ) [ExprOne]
                                  ) [ActParsSingle]
                                  ExprOne(
                                    ExprSingle(
                                      TermSingle(
                                        FactorDesignator(
                                          DesignatorSimple(
                                           i
                                          ) [DesignatorSimple]
                                        ) [FactorDesignator]
                                      ) [TermSingle]
                                    ) [ExprSingle]
                                  ) [ExprOne]
                                ) [ActParsMulti]
                              ) [DesignatorMethodCallParams]
                            ) [StmtDesign]
                          ) [StatementSingle]
                          StmtDesign(
                            DesignatorMethodCallParams(
                              DesignatorSimple(
                               putn
                              ) [DesignatorSimple]
                              ActParsMulti(
                                ActParsSingle(
                                  ExprOne(
                                    ExprSingle(
                                      TermSingle(
                                        FactorNumConst(
                                         0
                                        ) [FactorNumConst]
                                      ) [TermSingle]
                                    ) [ExprSingle]
                                  ) [ExprOne]
                                ) [ActParsSingle]
                                ExprOne(
                                  ExprSingle(
                                    TermSingle(
                                      FactorDesignator(
                                        DesignatorSimple(
                                         i
                                        ) [DesignatorSimple]
                                      ) [FactorDesignator]
                                    ) [TermSingle]
                                  ) [ExprSingle]
                                ) [ExprOne]
                              ) [ActParsMulti]
                            ) [DesignatorMethodCallParams]
                          ) [StmtDesign]
                        ) [StatementMulti]
                        StmtDesign(
                          DesignatorIncrement(
                            DesignatorSimple(
                             i
                            ) [DesignatorSimple]
                          ) [DesignatorIncrement]
                        ) [StmtDesign]
                      ) [StatementMulti]
                    ) [Stmt]
                    CondOne(
                      CondTermOne(
                        CondFactTwo(
                          ExprOne(
                            ExprSingle(
                              TermSingle(
                                FactorDesignator(
                                  DesignatorSimple(
                                   i
                                  ) [DesignatorSimple]
                                ) [FactorDesignator]
                              ) [TermSingle]
                            ) [ExprSingle]
                          ) [ExprOne]
                          RelopLT(
                          ) [RelopLT]
                          ExprOne(
                            ExprSingle(
                              TermSingle(
                                FactorDesignator(
                                  DesignatorSimple(
                                   size
                                  ) [DesignatorSimple]
                                ) [FactorDesignator]
                              ) [TermSingle]
                            ) [ExprSingle]
                          ) [ExprOne]
                        ) [CondFactTwo]
                      ) [CondTermOne]
                    ) [CondOne]
                  ) [StmtDoWhile]
                ) [StatementMulti]
                StmtDesign(
                  DesignatorMethodCallParams(
                    DesignatorSimple(
                     f
                    ) [DesignatorSimple]
                    ActParsMulti(
                      ActParsMulti(
                        ActParsSingle(
                          ExprOne(
                            ExprSingle(
                              TermSingle(
                                FactorDesignator(
                                  DesignatorSimple(
                                   c
                                  ) [DesignatorSimple]
                                ) [FactorDesignator]
                              ) [TermSingle]
                            ) [ExprSingle]
                          ) [ExprOne]
                        ) [ActParsSingle]
                        ExprOne(
                          ExprSingle(
                            TermSingle(
                              FactorDesignator(
                                DesignatorSimple(
                                 x
                                ) [DesignatorSimple]
                              ) [FactorDesignator]
                            ) [TermSingle]
                          ) [ExprSingle]
                        ) [ExprOne]
                      ) [ActParsMulti]
                      ExprOne(
                        ExprSingle(
                          TermSingle(
                            FactorDesignator(
                              DesignatorSimple(
                               i
                              ) [DesignatorSimple]
                            ) [FactorDesignator]
                          ) [TermSingle]
                        ) [ExprSingle]
                      ) [ExprOne]
                    ) [ActParsMulti]
                  ) [DesignatorMethodCallParams]
                ) [StmtDesign]
              ) [StatementMulti]
              StmtRead(
                DesignatorSimple(
                 x
                ) [DesignatorSimple]
              ) [StmtRead]
            ) [StatementMulti]
            StmtDoWhile(
              DoHead(
              ) [DoHead]
              Stmt(
                StatementMulti(
                  StatementMulti(
                    StatementSingle(
                      StmtIf(
                        StmtIfBody(
                          IfCond(
                            CondOne(
                              CondTermOne(
                                CondFactTwo(
                                  ExprOne(
                                    ExprSingle(
                                      TermSingle(
                                        FactorDesignator(
                                          DesignatorSimple(
                                           x
                                          ) [DesignatorSimple]
                                        ) [FactorDesignator]
                                      ) [TermSingle]
                                    ) [ExprSingle]
                                  ) [ExprOne]
                                  RelopLE(
                                  ) [RelopLE]
                                  ExprOne(
                                    ExprSingle(
                                      TermSingle(
                                        FactorNumConst(
                                         0
                                        ) [FactorNumConst]
                                      ) [TermSingle]
                                    ) [ExprSingle]
                                  ) [ExprOne]
                                ) [CondFactTwo]
                              ) [CondTermOne]
                            ) [CondOne]
                          ) [IfCond]
                          StmtBreak(
                          ) [StmtBreak]
                        ) [StmtIfBody]
                      ) [StmtIf]
                    ) [StatementSingle]
                    StmtIfElse(
                      StmtIfBody(
                        IfCond(
                          CondOne(
                            CondTermTwo(
                              CondTermOne(
                                CondFactTwo(
                                  ExprOne(
                                    ExprSingle(
                                      TermSingle(
                                        FactorNumConst(
                                         0
                                        ) [FactorNumConst]
                                      ) [TermSingle]
                                    ) [ExprSingle]
                                  ) [ExprOne]
                                  RelopLE(
                                  ) [RelopLE]
                                  ExprOne(
                                    ExprSingle(
                                      TermSingle(
                                        FactorDesignator(
                                          DesignatorSimple(
                                           x
                                          ) [DesignatorSimple]
                                        ) [FactorDesignator]
                                      ) [TermSingle]
                                    ) [ExprSingle]
                                  ) [ExprOne]
                                ) [CondFactTwo]
                              ) [CondTermOne]
                              CondFactTwo(
                                ExprOne(
                                  ExprSingle(
                                    TermSingle(
                                      FactorDesignator(
                                        DesignatorSimple(
                                         x
                                        ) [DesignatorSimple]
                                      ) [FactorDesignator]
                                    ) [TermSingle]
                                  ) [ExprSingle]
                                ) [ExprOne]
                                RelopLT(
                                ) [RelopLT]
                                ExprOne(
                                  ExprSingle(
                                    TermSingle(
                                      FactorDesignator(
                                        DesignatorSimple(
                                         size
                                        ) [DesignatorSimple]
                                      ) [FactorDesignator]
                                    ) [TermSingle]
                                  ) [ExprSingle]
                                ) [ExprOne]
                              ) [CondFactTwo]
                            ) [CondTermTwo]
                          ) [CondOne]
                        ) [IfCond]
                        Stmt(
                          StatementSingle(
                            StmtDesign(
                              DesignatorMethodCallParams(
                                DesignatorSimple(
                                 putp
                                ) [DesignatorSimple]
                                ActParsSingle(
                                  ExprOne(
                                    ExprAddop(
                                      ExprSingle(
                                        TermSingle(
                                          FuncCallParams(
                                            DesignatorSimple(
                                             getp
                                            ) [DesignatorSimple]
                                            ActParsSingle(
                                              ExprOne(
                                                ExprSingle(
                                                  TermSingle(
                                                    FactorDesignator(
                                                      DesignatorSimple(
                                                       x
                                                      ) [DesignatorSimple]
                                                    ) [FactorDesignator]
                                                  ) [TermSingle]
                                                ) [ExprSingle]
                                              ) [ExprOne]
                                            ) [ActParsSingle]
                                          ) [FuncCallParams]
                                        ) [TermSingle]
                                      ) [ExprSingle]
                                      AddopPlus(
                                      ) [AddopPlus]
                                      TermSingle(
                                        FactorNumConst(
                                         1
                                        ) [FactorNumConst]
                                      ) [TermSingle]
                                    ) [ExprAddop]
                                  ) [ExprOne]
                                ) [ActParsSingle]
                              ) [DesignatorMethodCallParams]
                            ) [StmtDesign]
                          ) [StatementSingle]
                        ) [Stmt]
                      ) [StmtIfBody]
                      StmtIf(
                        StmtIfBody(
                          IfCond(
                            CondOne(
                              CondTermTwo(
                                CondTermOne(
                                  CondFactTwo(
                                    ExprOne(
                                      ExprSingle(
                                        TermSingle(
                                          FactorDesignator(
                                            DesignatorSimple(
                                             size
                                            ) [DesignatorSimple]
                                          ) [FactorDesignator]
                                        ) [TermSingle]
                                      ) [ExprSingle]
                                    ) [ExprOne]
                                    RelopLT(
                                    ) [RelopLT]
                                    ExprOne(
                                      ExprSingle(
                                        TermSingle(
                                          FactorDesignator(
                                            DesignatorSimple(
                                             x
                                            ) [DesignatorSimple]
                                          ) [FactorDesignator]
                                        ) [TermSingle]
                                      ) [ExprSingle]
                                    ) [ExprOne]
                                  ) [CondFactTwo]
                                ) [CondTermOne]
                                CondFactTwo(
                                  ExprOne(
                                    ExprSingle(
                                      TermSingle(
                                        FactorDesignator(
                                          DesignatorSimple(
                                           x
                                          ) [DesignatorSimple]
                                        ) [FactorDesignator]
                                      ) [TermSingle]
                                    ) [ExprSingle]
                                  ) [ExprOne]
                                  RelopLT(
                                  ) [RelopLT]
                                  ExprOne(
                                    ExprSingle(
                                      TermSingle(
                                        FactorNumConst(
                                         0
                                        ) [FactorNumConst]
                                      ) [TermSingle]
                                    ) [ExprSingle]
                                  ) [ExprOne]
                                ) [CondFactTwo]
                              ) [CondTermTwo]
                            ) [CondOne]
                          ) [IfCond]
                          Stmt(
                            StatementSingle(
                              StmtDesign(
                                DesignatorMethodCallParams(
                                  DesignatorSimple(
                                   putn
                                  ) [DesignatorSimple]
                                  ActParsSingle(
                                    ExprOne(
                                      ExprAddop(
                                        ExprSingle(
                                          TermSingle(
                                            FuncCallParams(
                                              DesignatorSimple(
                                               getn
                                              ) [DesignatorSimple]
                                              ActParsSingle(
                                                ExprOne(
                                                  ExprSingle(
                                                    TermSingle(
                                                      FactorDesignator(
                                                        DesignatorSimple(
                                                         x
                                                        ) [DesignatorSimple]
                                                      ) [FactorDesignator]
                                                    ) [TermSingle]
                                                  ) [ExprSingle]
                                                ) [ExprOne]
                                              ) [ActParsSingle]
                                            ) [FuncCallParams]
                                          ) [TermSingle]
                                        ) [ExprSingle]
                                        AddopPlus(
                                        ) [AddopPlus]
                                        TermSingle(
                                          FactorNumConst(
                                           1
                                          ) [FactorNumConst]
                                        ) [TermSingle]
                                      ) [ExprAddop]
                                    ) [ExprOne]
                                  ) [ActParsSingle]
                                ) [DesignatorMethodCallParams]
                              ) [StmtDesign]
                            ) [StatementSingle]
                          ) [Stmt]
                        ) [StmtIfBody]
                      ) [StmtIf]
                    ) [StmtIfElse]
                  ) [StatementMulti]
                  StmtRead(
                    DesignatorSimple(
                     x
                    ) [DesignatorSimple]
                  ) [StmtRead]
                ) [StatementMulti]
              ) [Stmt]
              CondOne(
                CondTermOne(
                  CondFactOne(
                    ExprOne(
                      ExprSingle(
                        TermSingle(
                          FactorBoolConst(
                           true
                          ) [FactorBoolConst]
                        ) [TermSingle]
                      ) [ExprSingle]
                    ) [ExprOne]
                  ) [CondFactOne]
                ) [CondTermOne]
              ) [CondOne]
            ) [StmtDoWhile]
          ) [StatementMulti]
          StmtPrint(
            ExprTernary(
              ExprSingle(
                TermSingle(
                  FactorDesignator(
                    DesignatorSimple(
                     x
                    ) [DesignatorSimple]
                  ) [FactorDesignator]
                ) [TermSingle]
              ) [ExprSingle]
              ExprSingle(
                TermSingle(
                  FactorCharConst(
                   -
                  ) [FactorCharConst]
                ) [TermSingle]
              ) [ExprSingle]
              ExprSingle(
                TermSingle(
                  FactorCharConst(
                   +
                  ) [FactorCharConst]
                ) [TermSingle]
              ) [ExprSingle]
            ) [ExprTernary]
          ) [StmtPrint]
        ) [StatementMulti]
      ) [MethodVoid4]
    ) [MethodVoidDeclaration]
  ) [MethodDecMulti]
) [Program]
INFO  23:19:25,452 - 

================SEMANTICKA OBRADA====================


INFO  23:19:25,467 - Deklarisana konstanta 'size' na liniji 2
INFO  23:19:25,467 - Deklarisan niz 'pos' na liniji 5
INFO  23:19:25,467 - Deklarisan niz 'neg' na liniji 5
ERROR 23:19:25,467 - Semanticka greska - 'idx' nije deklarisano na liniji 9
ERROR 23:19:25,468 - Semanticka greska - nevalidan pristup elementu niza na liniji 9
INFO  23:19:25,468 - Pristup elementu niza 'pos' na liniji 9
ERROR 23:19:25,468 - Semanticka greska - return naredba u funkciji koja nema povratnu vrednost na liniji 9
INFO  23:19:25,468 - Formalni parametar funkcije getn: 'idx' na liniji 10
INFO  23:19:25,468 - Pristup elementu niza 'neg' na liniji 10
ERROR 23:19:25,468 - Semanticka greska - nije pronadjen tip 'Table' u tabeli simbola!
INFO  23:19:25,468 - Deklarisana globalna promenljiva 'val' na liniji 14
INFO  23:19:25,468 - Formalni parametar funkcije f: 'ch' na liniji 16
INFO  23:19:25,468 - Formalni parametar funkcije f: 'a' na liniji 16
INFO  23:19:25,468 - Formalni parametar funkcije f: 'arg' na liniji 16
INFO  23:19:25,468 - Deklarisana promenljiva 'x' na liniji 17
INFO  23:19:25,468 - Deklarisana promenljiva 'x' na liniji 21
INFO  23:19:25,468 - Deklarisana promenljiva 'i' na liniji 21
INFO  23:19:25,468 - Deklarisana promenljiva 'c' na liniji 21
ERROR 23:19:25,468 - Semanticka greska - nije pronadjen tip 'Table' u tabeli simbola!
ERROR 23:19:25,468 - Semanticka greska - nekompatibilni tipovi za dodelu vrednosti na liniji 24
ERROR 23:19:25,468 - Semanticka greska - nekompatibilni tipovi za dodelu vrednosti na liniji 25
INFO  23:19:25,468 - Pronadjen poziv funkcije 'putp' na liniji 28
ERROR 23:19:25,468 - Semanticka greska - argumenti funkcije nisu odgovarajuci na liniji 28
ERROR 23:19:25,468 - Semanticka greska - 'putn' nije deklarisano na liniji 29
ERROR 23:19:25,469 - Semanticka greska - ime 'noObj' nije funkcija na liniji 29
INFO  23:19:25,469 - Pronadjen poziv funkcije 'f' na liniji 33
ERROR 23:19:25,469 - Semanticka greska - 'getp' nije deklarisano na liniji 40
ERROR 23:19:25,469 - Semanticka greska - ime 'noObj' nije funkcija na liniji 40
ERROR 23:19:25,469 - Semanticka greska - clanovi izraza nisu tipa int na liniji 40
ERROR 23:19:25,469 - Semanticka greska - clanovi izraza nisu kompatibilni na liniji 40
INFO  23:19:25,469 - Pronadjen poziv funkcije 'putp' na liniji 40
ERROR 23:19:25,469 - Semanticka greska - argumenti funkcije nisu odgovarajuci na liniji 40
ERROR 23:19:25,469 - Semanticka greska - 'putn' nije deklarisano na liniji 44
INFO  23:19:25,469 - Pronadjen poziv funkcije 'getn' na liniji 44
ERROR 23:19:25,469 - Semanticka greska - ime 'noObj' nije funkcija na liniji 44
INFO  23:19:25,470 - ===================================
ERROR 23:19:25,470 - Parsiranje nije uspesno zavrseno!
