package rs.ac.bg.etf.pp1;

import java_cup.runtime.*;
import org.apache.log4j.*;
import rs.ac.bg.etf.pp1.ast.*;

parser code {:

	private boolean errorDetected = false;
	private Symbol currSymbol = null;		
	private Symbol errorSymbol = null;
	
	Logger log = Logger.getLogger(getClass());
   
    // slede redefinisani metodi za prijavu gresaka radi izmene teksta poruke
     
    public void report_fatal_error(String message, Object info) throws java.lang.Exception {
      done_parsing();
      report_error(message, info);
    }
  
    public void syntax_error(Symbol cur_token) {
        report_error("\nSintaksna greska", cur_token);
    }
  
    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        report_fatal_error("Fatalna greska, parsiranje se ne moze nastaviti", cur_token);
    }

    public void report_error(String message, Object info) {
    	errorDetected = true;
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol) {			
			errorSymbol = (Symbol) info;
            msg.append(" na liniji ").append(errorSymbol.left);
			msg.append(", koloni ").append(errorSymbol.right);
			if (errorSymbol.value != null) {
				msg.append(" za simbol \"").append(errorSymbol.value.toString()).append("\"");
			}			
			msg.append("!");
		}
        log.error(msg.toString());
    }
    
    public void report_info(String message, Object info) {
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol) {
            msg.append(" na liniji ").append(((Symbol)info).left);
			msg.append(", koloni ").append(((Symbol)info).right);
			if (errorSymbol.value != null) {
				msg.append(" za simbol \"").append(((Symbol)info).value.toString()).append("\"");
			}
		}
        log.info(msg.toString());
    }
	
	public boolean isErrorDetected() {
		return errorDetected;
	}
    
	public Symbol getCurrSymbol() {
		return currSymbol;
	}
	
	public Symbol getErrorSymbol() {
		return errorSymbol;
	}
:}

scan with {:
	currSymbol = this.getScanner().next_token();
	if (currSymbol != null && currSymbol.value != null) {
		log.info(currSymbol.toString() + " " + currSymbol.value.toString());
	}
	return currSymbol;
:}

terminal PROGRAM, BREAK, CLASS, ENUM, ELSE, CONST, IF;
terminal SWITCH, DO, WHILE, NEW, PRINT, READ, RETURN;
terminal VOID, EXTENDS, CONTINUE, CASE;
terminal String IDENT;
terminal Integer NUM_CONST;
terminal Character CHAR_CONST;
terminal Boolean BOOL_CONST;
terminal PLUS, MINUS, MUL, DIV, MOD;
terminal EQUAL, NOT_EQUAL, GREATER, GREATER_EQUAL, LESSER, LESSER_EQUAL;
terminal AND, OR, ASSIGNMENT, INC, DEC, SEMICOLON, COMMA, FULL_STOP;
terminal LPAREN, RPAREN, LSQUARE, RSQUARE, LBRACE, RBRACE;
terminal QUESTION_MARK, COLON;

nonterminal ProgramDeclarations, ProgramDeclaration;
nonterminal ConstDecl, ConstList, ConstPart, ClassDecl;
nonterminal Value, VarDecl, VarList, VarPart, VarDeclList;
nonterminal MethodDeclList, MethodDec, MethodVoidDecl, MethodTypeDecl;
nonterminal FormParams, FormParam, StatementList, Statement, StatementIf, StatementIfBody;
nonterminal CaseList, CasePart, DesignatorStatement;
nonterminal ActPars, Condition, CondTerm, CondFact;
nonterminal Expr, Expr1, TermList, TermPart, Term;
nonterminal FactorList, FactorPart, Factor;
nonterminal Designator, DesignatorList, DesignatorPart;
nonterminal Relop, Addop, Mulop;

nonterminal rs.etf.pp1.symboltable.concepts.Obj Program, ProgName;
nonterminal rs.etf.pp1.symboltable.concepts.Struct Type;

precedence left ELSE;

Program ::= (Program) PROGRAM ProgName:p ProgramDeclarations LBRACE MethodDeclList RBRACE;

ProgName ::= (ProgName) IDENT:progName;

ProgramDeclarations ::= (ProgramDeclMulti) ProgramDeclarations ProgramDeclaration
						|
						(ProgramDeclSingle) ProgramDeclaration;
						
ProgramDeclaration ::= (PartConstDeclaration) ConstDecl
					   |
					   (PartVarDeclaration) VarDecl
					   |
					   (PartClassDeclaration) ClassDecl;

ConstDecl ::= (ConstDeclaration) CONST Type ConstList SEMICOLON;

ConstList ::= (ConstMulti) ConstList COMMA ConstPart
			  |
			  (ConstSingle) ConstPart;
			  
ConstPart ::= (ConstPart) IDENT ASSIGNMENT Value;

Value ::= (NumConst) NUM_CONST
		  |
		  (BoolConst) BOOL_CONST
		  |
		  (CharConst) CHAR_CONST;
				
VarDecl ::= (VarDeclaration) Type:varType VarList SEMICOLON;

VarList ::= (VarMulti) VarList COMMA VarPart
			|
			(VarSingle) VarPart;
			
VarPart ::= (VarNormal) IDENT 
			|
			(VarArray)IDENT LSQUARE RSQUARE
			|
			(VarError) error {: parser.report_error("Sintaksna greska - neispravna deklaracija promenljive", parser.getErrorSymbol()); :};
			/* A1 definicija globalne promenljive */

ClassDecl ::= (ClassDecl0) CLASS IDENT EXTENDS Type LBRACE VarDeclList LBRACE MethodDeclList RBRACE RBRACE
			  |
			  (ClassDecl1) CLASS IDENT LBRACE VarDeclList LBRACE MethodDeclList RBRACE RBRACE
			  |
			  (ClassDecl2) CLASS IDENT EXTENDS Type LBRACE VarDeclList RBRACE
			  |
			  (ClassDecl3) CLASS IDENT LBRACE VarDeclList RBRACE
			  |
			  (ClassDecl4) CLASS IDENT EXTENDS Type LBRACE LBRACE MethodDeclList RBRACE RBRACE
			  |
			  (ClassDecl5) CLASS IDENT LBRACE LBRACE MethodDeclList RBRACE RBRACE
			  |
			  (ClassDecl6) CLASS IDENT EXTENDS Type LBRACE RBRACE
			  |
			  (ClassDecl7) CLASS IDENT LBRACE RBRACE;
			  
VarDeclList ::= (VarDeclMulti) VarDeclList VarDecl
				|
				(VarDeclSingle) VarDecl;
				
MethodDeclList ::= (MethodDecMulti) MethodDeclList MethodDec
				   |
				   (MethodDeclSingle) MethodDec;
				   
MethodDec ::= (MethodVoidDeclaration) MethodVoidDecl
			  |
			  (MethodTypeDeclaration) MethodTypeDecl;

MethodVoidDecl ::= (MethodVoid0) VOID IDENT LPAREN FormParams RPAREN VarDeclList LBRACE StatementList RBRACE
				   |
				   (MethodVoid1) VOID IDENT LPAREN FormParams RPAREN VarDeclList LBRACE RBRACE
				   |
				   (MethodVoid2) VOID IDENT LPAREN FormParams RPAREN LBRACE StatementList RBRACE
				   |
				   (MethodVoid3) VOID IDENT LPAREN FormParams RPAREN LBRACE RBRACE
				   |
				   (MethodVoid4) VOID IDENT LPAREN RPAREN VarDeclList LBRACE StatementList RBRACE
				   |
				   (MethodVoid5) VOID IDENT LPAREN RPAREN VarDeclList LBRACE RBRACE
				   |
				   (MethodVoid6) VOID IDENT LPAREN RPAREN LBRACE StatementList RBRACE
				   |
				   (MethodVoid7) VOID IDENT LPAREN RPAREN LBRACE RBRACE;
				   
MethodTypeDecl ::= (MethodType0) Type IDENT LPAREN FormParams RPAREN VarDeclList LBRACE StatementList RBRACE
				   |
				   (MethodType1) Type IDENT LPAREN FormParams RPAREN VarDeclList LBRACE RBRACE
				   |
				   (MethodType2) Type IDENT LPAREN FormParams RPAREN LBRACE StatementList RBRACE
				   |
				   (MethodType3) Type IDENT LPAREN FormParams RPAREN LBRACE RBRACE
				   |
				   (MethodType4) Type IDENT LPAREN RPAREN VarDeclList LBRACE StatementList RBRACE
				   |
				   (MethodType5) Type IDENT LPAREN RPAREN VarDeclList LBRACE RBRACE
				   |
				   (MethodType6) Type IDENT LPAREN RPAREN LBRACE StatementList RBRACE
				   |
				   (MethodType7) Type IDENT LPAREN RPAREN LBRACE RBRACE;

FormParams ::= (ParamMulti) FormParams COMMA FormParam
			   |
			   (ParamSingle) FormParam;
			   
FormParam ::= (ParamNormal) Type IDENT
		      |
		      (ParamArray) Type IDENT LSQUARE RSQUARE
		      |
		      (ParamError) error 
		      {: this.parser.report_error("Sintaksna greska - neispravni parametri funkcije", this.parser.getErrorSymbol()); :};
		      /* B1 definicija formalnih parametara */
		      
Type ::= (Type) IDENT:typeName;				   

StatementList ::= (StatementMulti) StatementList Statement
				  |
				  (StatementSingle) Statement;
				  
Statement ::= (StmtDesign) DesignatorStatement SEMICOLON
			  |
			  (StmtSwitchNoCase) LPAREN Expr RPAREN LBRACE RBRACE
			  |
			  (StmtSwitch) LPAREN Expr RPAREN LBRACE CaseList RBRACE
			  |
			  (StmtBreak) BREAK SEMICOLON
			  |
			  (StmtContinue) CONTINUE SEMICOLON
			  |
			  (StmtReturnExpr) RETURN Expr SEMICOLON
			  |
			  (StmtReturn) RETURN SEMICOLON
			  |
			  (StmtRead) READ LPAREN Designator RPAREN SEMICOLON
			  |
			  (StmtPrintNumConst) PRINT LPAREN Expr COMMA NUM_CONST RPAREN SEMICOLON
			  |
			  (StmtPrint) PRINT LPAREN Expr RPAREN SEMICOLON
			  |
			  (Stmt) LBRACE StatementList RBRACE			
			  |
			  (StmtIfElse) StatementIf StatementIfBody ELSE Statement
			  |
			  (StmtIf) StatementIf StatementIfBody;
			  
StatementIf ::= (StmtIfHead) IF;
			  
StatementIfBody ::= (StmtIfBody) LPAREN Condition RPAREN Statement;	
		
CaseList ::= (CaseMulti) CaseList CasePart
			 |
			 (CaseSingle) CasePart;
			 
CasePart ::= (CasePart) CASE NUM_CONST COLON StatementList;

DesignatorStatement ::= (Assignment) Designator ASSIGNMENT Expr
						|
						(MethodCall0) Designator LPAREN ActPars RPAREN
						|
						(MethodCall1) Designator RPAREN RPAREN
						|
						(Increment) Designator INC
						|
						(Decrement) Designator DEC;

ActPars ::= (ActParsMulti) ActPars COMMA Expr
			|
			(ActParsSingle) Expr;
			
Condition ::= (CondTwo) Condition OR CondTerm
			  |
			  (CondOne) CondTerm;
			  
CondTerm ::= (CondTermTwo) CondTerm AND CondFact
			 |
			 (CondTermOne) CondFact;
			  			 			  
CondFact ::= (CondFactTwo) Expr Relop Expr
			 |
			 (CondFactOne) Expr;
			 
Expr ::= (ExprTernary) Expr1 QUESTION_MARK Expr1 COLON Expr1
		 |
		 (ExprOne) Expr1;
			 
Expr1 ::= (ExprNegMulti) MINUS Term TermList
		 | 
		 (ExprNegSingle) MINUS Term
		 |
		 (ExprMulti) Term TermList
		 |
		 (ExprSingle) Term
		 |
		 (ExprError) error 
		 {: this.parser.report_error("Sintaksna greska - neispravan izraz", this.parser.getErrorSymbol()); :};
		 /* A2 konstrukcija iskaza dodele */
		 
TermList ::= (TermListMulti) TermList TermPart
			 |
			 (TermListSingle) TermPart;
			 
TermPart ::= (TermPart) Addop Term;
		 
Term ::= (TermMulti) Factor FactorList
		 |
		 (TermSingle) Factor;

FactorList ::= (FactorListMulti) FactorList FactorPart
			   |
			   (FactorListSingle) FactorPart;
			   
FactorPart ::= (FactorPart) Mulop Factor;

Factor ::= (FactorDesigMethCall0) Designator LPAREN ActPars RPAREN
		   |
		   (FactorDesigMethCall1) Designator LPAREN RPAREN
		   |
		   (FactorDesignator) Designator
		   |
		   (FactorNumConst) NUM_CONST
		   | 
		   (FactorCharConst) CHAR_CONST
		   | 
		   (FactorBoolConst) BOOL_CONST
		   |
		   (FactorNew) NEW Type
		   |
		   (FactorNewArray) NEW Type LSQUARE Expr RSQUARE
		   | 
		   (FactorExpr) LPAREN Expr RPAREN;
		   
Designator ::= (Designator0) IDENT
			   |
			   (Designator1) IDENT DesignatorList;

DesignatorList ::= (DesignatorListMulti) DesignatorList DesignatorPart
				   |
				   (DesignatorListSingle) DesignatorPart;
				   
DesignatorPart ::= (DesignatorPart0) FULL_STOP IDENT
				   |
				   (DesignatorPart1) LSQUARE Expr RSQUARE;

Relop ::= (RelopEQ) EQUAL
		  |
		  (RelopNE) NOT_EQUAL
		  |
		  (RelopGT) GREATER
		  |
		  (RelopGE) GREATER_EQUAL
		  |
		  (RelopLT) LESSER
		  |
		  (RelopLE) LESSER_EQUAL;

Addop ::= (AddopPlus) PLUS 
		  | 
		  (AddopMinus) MINUS;

Mulop ::= (MulopMul) MUL 
		  | 
		  (MulopDiv) DIV 
		  | 
		  (MulopMod) MOD;
		   